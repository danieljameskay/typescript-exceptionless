{"version":3,"sources":["tracekit.js","exceptionless.ts"],"names":["window","undefined","_has","object","key","Object","prototype","hasOwnProperty","call","_isUndefined","what","TraceKit","_oldTraceKit","_slice","slice","UNKNOWN_FUNCTION","ERROR_TYPES_RE","noConflict","wrap","func","apply","this","arguments","e","report","notifyHandlers","stack","isWindowError","error","exception","collectWindowErrors","i","handlers","inner","traceKitWindowOnError","message","url","lineNo","columnNo","errorObj","lastExceptionStack","computeStackTrace","augmentStackTraceWithInitialElement","processLastException","name","location","line","column","msg","toString","groups","match","guessFunctionName","context","gatherContext","mode","_oldOnerrorHandler","installGlobalHandler","_onErrorHandlerInstalled","onerror","_lastExceptionStack","_lastException","lastException","ex","setTimeout","incomplete","subscribe","handler","push","unsubscribe","length","splice","loadSource","remoteFetching","request","XMLHttpRequest","ActiveXObject","open","send","responseText","getSource","sourceCache","source","domain","document","exec","split","m","reFunctionArgNames","reGuessFunction","linesBefore","Math","floor","linesOfContext","linesAfter","start","max","end","min","escapeRegExp","text","replace","escapeCodeAsRegExpForMatchingInsideHTML","body","findSourceInUrls","re","urls","j","join","substring","index","lastIndexOf","findSourceInLine","fragment","RegExp","findSourceByFunctionBody","parts","result","href","scripts","getElementsByTagName","code","codeRE","eventRE","script","src","args","event","computeStackTraceFromStackProp","submatch","element","chrome","gecko","winjs","geckoEval","chromeEval","lines","reference","isNative","indexOf","columnNumber","computeStackTraceFromStacktraceProp","stacktrace","opera10Regex","opera11Regex","exc","computeStackTraceFromOperaMultiLineMessage","lineRE1","lineRE2","lineRE3","inlineScriptBlocks","s","item","relativeLine","pos","innerText","midline","stackInfo","initial","unshift","partial","computeStackTraceByWalkingCallerChain","depth","functionName","funcs","recursion","curr","caller","input","description","sourceURL","fileName","lineNumber","debug","ofCaller","Error","extendToAsynchronousCallbacks","_helper","fnName","originalFn","originalCallback","define","amd","module","exports","global","parseDate","value","dateRegx","__extends","extendStatics","setPrototypeOf","__proto__","Array","d","b","p","__","constructor","create","DefaultLastReferenceIdManager","_lastReferenceId","getLast","clearLast","setLast","eventId","ConsoleLog","trace","log","info","warn","level","console","NullLog","HeartbeatPlugin","heartbeatInterval","priority","_interval","run","next","clearInterval","_intervalId","user","data","identity","setInterval","client","submitSessionHeartbeat","ReferenceIdPlugin","reference_id","type","Utils","guid","EventPluginContext","contextData","ContextData","defineProperty","get","config","callback","plugin","cancelled","plugins","wrappedPlugins","EventPluginManager","addDefaultPlugins","addPlugin","ConfigurationDefaultsPlugin","ErrorPlugin","DuplicateCheckerPlugin","EventExclusionPlugin","ModuleInfoPlugin","RequestInfoPlugin","EnvironmentInfoPlugin","SubmissionMethodPlugin","DefaultEventQueue","_handlers","_processingQueue","_config","enqueue","enabled","isValid","areQueuedItemsDiscarded","ensureQueueTimer","timestamp","storage","queue","save","logText","process","isAppExiting","_this","events_1","submissionBatchSize","serverUrl","submissionClient","postEvents","map","response","processSubmissionResponse","eventsPosted","suspendProcessing","durationInMinutes","discardFutureQueuedItems","clearQueue","_suspendProcessingUntil","Date","getTime","_discardQueuedItemsUntil","clear","onEventsPosted","events","_i","handlers_1","_queueTimer","onProcessQueue","isQueueProcessingSuspended","success","removeEvents","serviceUnavailable","paymentRequired","unableToAuthenticate","notFound","badRequest","requestEntityTooLarge","round","remove","InMemoryStorageProvider","maxQueueItems","InMemoryStorage","settings","DefaultSubmissionClient","configurationVersionHeader","JSON","stringify","createRequest","cb","createSubmissionCallback","submissionAdapter","sendRequest","postUserDescription","referenceId","path","encodeURIComponent","getSettings","version","status","headers","SettingsResponse","parse","isNaN","sendHeartbeat","sessionIdOrUserId","closeSession","heartbeatServerUrl","method","apiKey","userAgent","settingsVersion","parseInt","checkVersion","SubmissionResponse","target","values","_a","values_1","getHashCode","hash","charCodeAt","getCookies","cookies","exclusions","parts_1","cookie","isMatch","isEmpty","s4","random","merge","defaultValues","parseVersion","matches","query","pairs","pairs_1","decodeURIComponent","patterns","ignoreCase","toLowerCase","trim","some","pattern","startsWithWildcard","endsWithWildcard","endsWith","startsWith","keys","prefix","suffix","maxDepth","stringifyImpl","obj","excludedKeys","cache","flattened","prop","defaultValue","SettingsManager","onChanged","applySavedServerSettings","savedSettings","getSavedServerSettings","changed","getVersion","currentVersion","updateSettings","savedServerSettings","newSettings","unableToUpdateMessage","handlers_2","statusCode","ExceptionlessClient","settingsOrApiKey","Configuration","updateSettingsTimer","_timeoutId","createException","pluginContextData","setException","createEvent","setType","submitException","submit","createUnhandledException","submissionMethod","builder","markAsUnhandledError","setSubmissionMethod","submitUnhandledException","createFeatureUsage","feature","setSource","submitFeatureUsage","createLog","sourceOrMessage","setMessage","setProperty","submitLog","createNotFound","resource","submitNotFound","createSessionStart","submitSessionStart","submitSessionEnd","EventBuilder","date","submitEvent","tags","ctx","ev","lastReferenceIdManager","updateUserEmailAndDescription","email","userDescription","email_address","getLastReferenceId","initialDelay","clearTimeout","updateSettingsWhenIdleInterval","interval","_instance","configurable","enumerable","getException","getSubmissionMethod","configSettings","inject","fn","defaultTags","defaultData","_serverUrl","_heartbeatServerUrl","_updateSettingsWhenIdleInterval","_dataExclusions","_userAgentBotPatterns","_plugins","defaults","environmentInfoCollector","errorParser","moduleCollector","requestInfoCollector","_apiKey","concat","addRange","addUserAgentBotPatterns","userAgentBotPatterns","sort","p1","p2","pluginOrName","pluginAction","pluginExists","plugins_1","removePlugin","setVersion","setUserIdentity","userInfoOrIdentity","userInfo","shouldRemove","useSessions","sendHeartbeats","useReferenceIds","useLocalStorage","useDebugLogger","handlers_3","_defaultSettings","_validIdentifierErrorMessage","setReferenceId","isValidIdentifier","setEventReference","id","setGeo","latitude","longitude","geo","setUserDescription","emailAddress","setManualStackingInfo","signatureData","title","signature_data","setManualStackingKey","manualStackingKey","ManualStackingKey","setValue","addTags","excludedPropertyNames","dataExclusions","markAsCritical","critical","addRequestInfo","isDigit","isLetter","isMinus","defaultTags_1","tag","getCurrentTime","now","_mergedEvents","_processedHashcodes","_getCurrentTime","shift","resubmit","hashCode","stack_trace","count","now_1","merged","filter","incrementCount","updateDate","h","MergedEvent","_context","_count","collector","environmentInfo","getEnvironmentInfo","ignoredProperties","parser","additionalData","getTypeAndSourceSetting","isLog","sourcePrefix","toBoolean","loggerName","getLogLevel","logLevel","minLogLevel","modules","getModules","requestInfo","getRequestInfo","user_agent","maxItems","items","lastTimestamp","limit","KeyValueStorageBase","single","ensureIndex","getKey","json","write","delete","read","safeDelete","forEach","createIndex","readAllKeys","getTimestamp","a","_super","BrowserStorage","namespace","isAvailable","localStorage","x","setItem","removeItem","getItem","substr","DefaultErrorParser","getParameters","parameters","params_1","param","stackTrace","stackFrames","frames","stackFrames_1","frame","file_name","line_number","module_id","innerHTML","DefaultModuleCollector","DefaultRequestInfoCollector","navigator","is_secure","protocol","host","hostname","port","pathname","query_string","parseQueryString","search","referrer","BrowserStorageProvider","xhr","isCompleted","statusText","TIMEOUT","LOADED","responseBody","headerStr","headerPairs_1","headerPair","separator","getAllResponseHeaders","WITH_CREDENTIALS","setRequestHeader","XDomainRequest","useSetTimeout","timeout","onreadystatechange","readyState","complete","onprogress","ontimeout","onload","DefaultSubmissionAdapter","pop","options","default"],"mappings":"CAKA,SAAAA,EAAAC,GAuBA,SAAAC,EAAAC,EAAAC,GACA,OAAAC,OAAAC,UAAAC,eAAAC,KAAAL,EAAAC,GAUA,SAAAK,EAAAC,GACA,YAAA,IAAAA,EAlCA,GAAAV,EAAA,CAIA,IAAAW,KACAC,EAAAZ,EAAAW,SAGAE,KAAAC,MACAC,EAAA,IAGAC,EAAA,0GA+BAL,EAAAM,WAAA,WAEA,OADAjB,EAAAW,SAAAC,EACAD,GAWAA,EAAAO,KAAA,SAAAC,GASA,OARA,WACA,IACA,OAAAA,EAAAC,MAAAC,KAAAC,WACA,MAAAC,GAEA,MADAZ,EAAAa,OAAAD,GACAA,KAkDAZ,EAAAa,OAAA,WAyCA,SAAAC,EAAAC,EAAAC,EAAAC,GACA,IAAAC,EAAA,KACA,IAAAF,GAAAhB,EAAAmB,oBAAA,CAGA,IAAA,IAAAC,KAAAC,EACA,GAAA9B,EAAA8B,EAAAD,GACA,IACAC,EAAAD,GAAAL,EAAAC,EAAAC,GACA,MAAAK,GACAJ,EAAAI,EAKA,GAAAJ,EACA,MAAAA,GAgBA,SAAAK,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,GAGA,GAAAC,EACA7B,EAAA8B,kBAAAC,oCAAAF,EAAAJ,EAAAC,EAAAF,GACAQ,SACA,GAAAJ,EAEAd,EADAd,EAAA8B,kBAAAF,IACA,EAAAA,OACA,CACA,IAMAK,EANAC,GACAT,IAAAA,EACAU,KAAAT,EACAU,OAAAT,GAIAU,EAAAb,EACA,GAAA,uBAAAc,SAAAzC,KAAA2B,GAAA,CACA,IAAAe,EAAAf,EAAAgB,MAAAnC,GACAkC,IACAN,EAAAM,EAAA,GACAF,EAAAE,EAAA,IAIAL,EAAA1B,KAAAR,EAAA8B,kBAAAW,kBAAAP,EAAAT,IAAAS,EAAAC,MACAD,EAAAQ,QAAA1C,EAAA8B,kBAAAa,cAAAT,EAAAT,IAAAS,EAAAC,MAQArB,GANAmB,KAAAA,EACAT,QAAAa,EACAO,KAAA,UACA7B,OAAAmB,KAGA,EAAA,MAGA,QAAAW,GACAA,EAAApC,MAAAC,KAAAC,WAUA,SAAAmC,KACA,IAAAC,IAIAF,EAAAxD,EAAA2D,QACA3D,EAAA2D,QAAAzB,EACAwB,GAAA,GAOA,SAAAf,IACA,IAAAiB,EAAApB,EACAqB,EAAAC,EACAtB,EAAA,KACAsB,EAAA,KACArC,EAAAmC,GAAA,EAAAC,GASA,SAAArC,EAAAuC,GACA,GAAAvB,EAAA,CACA,GAAAsB,IAAAC,EACA,OAEApB,IAIA,IAAAjB,EAAAf,EAAA8B,kBAAAsB,GAcA,MAbAvB,EAAAd,EACAoC,EAAAC,EAMAC,WAAA,WACAF,IAAAC,GACApB,KAEAjB,EAAAuC,WAAA,IAAA,GAEAF,EA5KA,IA4DAP,EAAAE,EA5DA1B,KACA8B,EAAA,KACAtB,EAAA,KA+KA,OAFAhB,EAAA0C,UAtKA,SAAAC,GACAV,IACAzB,EAAAoC,KAAAD,IAqKA3C,EAAA6C,YA7JA,SAAAF,GACA,IAAA,IAAApC,EAAAC,EAAAsC,OAAA,EAAAvC,GAAA,IAAAA,EACAC,EAAAD,KAAAoC,GACAnC,EAAAuC,OAAAxC,EAAA,GAIA,IAAAC,EAAAsC,SACAtE,EAAA2D,QAAAH,EACAE,GAAA,IAqJAlC,KAwFAb,EAAA8B,kBAAA,WAWA,SAAA+B,EAAApC,GACA,IAAAzB,EAAA8D,eACA,MAAA,GAEA,IACA,IASAC,EATA,WACA,IACA,OAAA,IAAA1E,EAAA2E,eACA,MAAApD,GAEA,OAAA,IAAAvB,EAAA4E,cAAA,yBAOA,OAFAF,EAAAG,KAAA,MAAAzC,GAAA,GACAsC,EAAAI,KAAA,IACAJ,EAAAK,aACA,MAAAxD,GACA,MAAA,IAUA,SAAAyD,EAAA5C,GACA,GAAA,iBAAAA,EACA,SAGA,IAAAlC,EAAA+E,EAAA7C,GAAA,CAWA,IAAA8C,EAAA,GACAC,EAAA,GACA,IAAAA,EAAAnF,EAAAoF,SAAAD,OAAA,MAAA5D,IACA,IAAA4B,EAAA,8CAAAkC,KAAAjD,GACAe,GAAAA,EAAA,KAAAgC,IACAD,EAAAV,EAAApC,IAEA6C,EAAA7C,GAAA8C,EAAAA,EAAAI,MAAA,SAGA,OAAAL,EAAA7C,GAYA,SAAAgB,EAAAhB,EAAAC,GACA,IAKAkD,EALAC,EAAA,8BACAC,EAAA,mEACA3C,EAAA,GAEAoC,EAAAF,EAAA5C,GAGA,IAAA8C,EAAAZ,OACA,OAAAvD,EAKA,IAAA,IAAAgB,EAAA,EAAAA,EAVA,KAUAA,EAGA,GAFAe,EAAAoC,EAAA7C,EAAAN,GAAAe,GAEArC,EAAAqC,GAAA,CACA,GAAAyC,EAAAE,EAAAJ,KAAAvC,GACA,OAAAyC,EAAA,GACA,GAAAA,EAAAC,EAAAH,KAAAvC,GACA,OAAAyC,EAAA,GAKA,OAAAxE,EAUA,SAAAuC,EAAAlB,EAAAU,GACA,IAAAoC,EAAAF,EAAA5C,GAEA,IAAA8C,EAAAZ,OACA,OAAA,KAGA,IAAAjB,KAIAqC,EAAAC,KAAAC,MAAAjF,EAAAkF,eAAA,GAEAC,EAAAJ,EAAA/E,EAAAkF,eAAA,EACAE,EAAAJ,KAAAK,IAAA,EAAAlD,EAAA4C,EAAA,GACAO,EAAAN,KAAAO,IAAAhB,EAAAZ,OAAAxB,EAAAgD,EAAA,GAEAhD,GAAA,EAEA,IAAA,IAAAf,EAAAgE,EAAAhE,EAAAkE,IAAAlE,EACAtB,EAAAyE,EAAAnD,KACAsB,EAAAe,KAAAc,EAAAnD,IAIA,OAAAsB,EAAAiB,OAAA,EAAAjB,EAAA,KAUA,SAAA8C,EAAAC,GACA,OAAAA,EAAAC,QAAA,4BAAA,QAWA,SAAAC,EAAAC,GACA,OAAAJ,EAAAI,GAAAF,QAAA,IAAA,cAAAA,QAAA,IAAA,cAAAA,QAAA,IAAA,eAAAA,QAAA,IAAA,gBAAAA,QAAA,OAAA,QAWA,SAAAG,EAAAC,EAAAC,GAEA,IAAA,IADAxB,EAAAK,EACAxD,EAAA,EAAA4E,EAAAD,EAAApC,OAAAvC,EAAA4E,IAAA5E,EACA,IAAAmD,EAAAF,EAAA0B,EAAA3E,KAAAuC,SACAY,EAAAA,EAAA0B,KAAA,MACArB,EAAAkB,EAAApB,KAAAH,IAEA,OACA9C,IAAAsE,EAAA3E,GACAe,KAAAoC,EAAA2B,UAAA,EAAAtB,EAAAuB,OAAAxB,MAAA,MAAAhB,OACAvB,OAAAwC,EAAAuB,MAAA5B,EAAA6B,YAAA,KAAAxB,EAAAuB,OAAA,GAMA,OAAA,KAYA,SAAAE,EAAAC,EAAA7E,EAAAU,GACA,IAEAyC,EAFAL,EAAAF,EAAA5C,GACAqE,EAAA,IAAAS,OAAA,MAAAf,EAAAc,GAAA,OAKA,OAFAnE,GAAA,EAEAoC,GAAAA,EAAAZ,OAAAxB,IAAAyC,EAAAkB,EAAApB,KAAAH,EAAApC,KACAyC,EAAAuB,MAGA,KAWA,SAAAK,EAAAhG,GACA,IAAAV,EAAAT,GAAAA,EAAAoF,UAAA,CAcA,IAAA,IARAmB,EAIAE,EACAW,EACAC,EARAX,GAAA1G,EAAA6C,SAAAyE,MACAC,EAAAvH,EAAAoF,SAAAoC,qBAAA,UAEAC,EAAA,GAAAtG,EACAuG,EAAA,2EACAC,EAAA,iEAKA5F,EAAA,EAAAA,EAAAwF,EAAAjD,SAAAvC,EAAA,CACA,IAAA6F,EAAAL,EAAAxF,GACA6F,EAAAC,KACAnB,EAAAtC,KAAAwD,EAAAC,KAIA,GAAAT,EAAAM,EAAArC,KAAAoC,GAMA,CACA,IAAA7E,EAAAwE,EAAA,GAAA,OAAAA,EAAA,GAAA,GACAU,EAAAV,EAAA,GAAA9B,MAAA,KAAAsB,KAAA,aAEAL,EAAAJ,EAAAiB,EAAA,IAAAf,QAAA,KAAA,MACAI,EAAA,IAAAS,OAAA,WAAAtE,EAAA,cAAAkF,EAAA,mBAAAvB,EAAA,cAVAE,EAAA,IAAAS,OAAAf,EAAAsB,GAAApB,QAAA,OAAA,SAcA,GAAAgB,EAAAb,EAAAC,EAAAC,GACA,OAAAW,EAIA,GAAAD,EAAAO,EAAAtC,KAAAoC,GAAA,CACA,IAAAM,EAAAX,EAAA,GAMA,GALAb,EAAAD,EAAAc,EAAA,IAGAX,EAAA,IAAAS,OAAA,KAAAa,EAAA,eAAAxB,EAAA,cAAA,KAEAc,EAAAb,EAAAC,EAAAC,EAAA,IACA,OAAAW,EAMA,GAFAZ,EAAA,IAAAS,OAAAX,GAEAc,EAAAb,EAAAC,EAAAC,GACA,OAAAW,EAIA,OAAA,MA+CA,SAAAW,EAAAjE,GACA,IAAAA,EAAArC,MACA,OAAA,KAmBA,IAAA,IALAuG,EACAb,EACAc,EAbAC,EAAA,8HACAC,EAAA,kIACAC,EAAA,gHAIAC,EAAA,gDACAC,EAAA,gCAEAC,EAAAzE,EAAArC,MAAA4D,MAAA,MACA5D,KAIA+G,EAAA,sBAAApD,KAAAtB,EAAA5B,SAEAJ,EAAA,EAAA4E,EAAA6B,EAAAlE,OAAAvC,EAAA4E,IAAA5E,EAAA,CACA,GAAAqF,EAAAe,EAAA9C,KAAAmD,EAAAzG,IAAA,CACA,IAAA2G,EAAAtB,EAAA,IAAA,IAAAA,EAAA,GAAAuB,QAAA,UACAvB,EAAA,IAAA,IAAAA,EAAA,GAAAuB,QAAA,UACAV,EAAAM,EAAAlD,KAAA+B,EAAA,OAEAA,EAAA,GAAAa,EAAA,GACAb,EAAA,GAAAa,EAAA,GACAb,EAAA,GAAAa,EAAA,IAEAC,GACA9F,IAAAsG,EAAA,KAAAtB,EAAA,GACAjG,KAAAiG,EAAA,IAAArG,EACA+G,KAAAY,GAAAtB,EAAA,OACAtE,KAAAsE,EAAA,IAAAA,EAAA,GAAA,KACArE,OAAAqE,EAAA,IAAAA,EAAA,GAAA,WAEA,GAAAA,EAAAiB,EAAAhD,KAAAmD,EAAAzG,IACAmG,GACA9F,IAAAgF,EAAA,GACAjG,KAAAiG,EAAA,IAAArG,EACA+G,QACAhF,MAAAsE,EAAA,GACArE,OAAAqE,EAAA,IAAAA,EAAA,GAAA,UAEA,CAAA,KAAAA,EAAAgB,EAAA/C,KAAAmD,EAAAzG,KAsBA,SArBAqF,EAAA,IAAAA,EAAA,GAAAuB,QAAA,YAAA,IACAV,EAAAK,EAAAjD,KAAA+B,EAAA,MAEAA,EAAA,GAAAa,EAAA,GACAb,EAAA,GAAAa,EAAA,GACAb,EAAA,GAAA,MACA,IAAArF,GAAAqF,EAAA,IAAA3G,EAAAsD,EAAA6E,gBAKAlH,EAAA,GAAAqB,OAAAgB,EAAA6E,aAAA,GAEAV,GACA9F,IAAAgF,EAAA,GACAjG,KAAAiG,EAAA,IAAArG,EACA+G,KAAAV,EAAA,GAAAA,EAAA,GAAA9B,MAAA,QACAxC,KAAAsE,EAAA,IAAAA,EAAA,GAAA,KACArE,OAAAqE,EAAA,IAAAA,EAAA,GAAA,OAMAc,EAAA/G,MAAA+G,EAAApF,OACAoF,EAAA/G,KAAAiC,EAAA8E,EAAA9F,IAAA8F,EAAApF,OAGAoF,EAAA7E,QAAA6E,EAAApF,KAAAQ,EAAA4E,EAAA9F,IAAA8F,EAAApF,MAAA,KACApB,EAAA0C,KAAA8D,GAGA,OAAAxG,EAAA4C,QAIA5C,EAAA,IAAAA,EAAA,GAAAoB,OAAApB,EAAA,GAAAqB,QAAA0F,IACA/G,EAAA,GAAAqB,OAAAiE,EAAAyB,EAAA,GAAA/G,EAAA,GAAAU,IAAAV,EAAA,GAAAoB,QAIAS,KAAA,QACAX,KAAAmB,EAAAnB,KACAT,QAAA4B,EAAA5B,QACAT,MAAAA,IAXA,KAsBA,SAAAmH,EAAA9E,GAIA,IAAA+E,EAAA/E,EAAA+E,WACA,GAAAA,EAAA,CAUA,IAAA,IAFA1B,EAJA2B,EAAA,8DACAC,EAAA,uGACAR,EAAAM,EAAAxD,MAAA,MACA5D,KAGAoB,EAAA,EAAAA,EAAA0F,EAAAlE,OAAAxB,GAAA,EAAA,CACA,IAAAoF,EAAA,KAmBA,IAlBAd,EAAA2B,EAAA1D,KAAAmD,EAAA1F,KACAoF,GACA9F,IAAAgF,EAAA,GACAtE,MAAAsE,EAAA,GACArE,OAAA,KACA5B,KAAAiG,EAAA,GACAU,UAEAV,EAAA4B,EAAA3D,KAAAmD,EAAA1F,OACAoF,GACA9F,IAAAgF,EAAA,GACAtE,MAAAsE,EAAA,GACArE,QAAAqE,EAAA,GACAjG,KAAAiG,EAAA,IAAAA,EAAA,GACAU,KAAAV,EAAA,GAAAA,EAAA,GAAA9B,MAAA,UAIA4C,EAAA,CAIA,IAHAA,EAAA/G,MAAA+G,EAAApF,OACAoF,EAAA/G,KAAAiC,EAAA8E,EAAA9F,IAAA8F,EAAApF,OAEAoF,EAAApF,KACA,IACAoF,EAAA7E,QAAAC,EAAA4E,EAAA9F,IAAA8F,EAAApF,MACA,MAAAmG,IAGAf,EAAA7E,UACA6E,EAAA7E,SAAAmF,EAAA1F,EAAA,KAGApB,EAAA0C,KAAA8D,IAIA,OAAAxG,EAAA4C,QAKAf,KAAA,aACAX,KAAAmB,EAAAnB,KACAT,QAAA4B,EAAA5B,QACAT,MAAAA,GAPA,MAqBA,SAAAwH,EAAAnF,GAgBA,IAAAyE,EAAAzE,EAAA5B,QAAAmD,MAAA,MACA,GAAAkD,EAAAlE,OAAA,EACA,OAAA,KAGA,IAMA8C,EANA+B,EAAA,yFACAC,EAAA,kGACAC,EAAA,yCACA3H,KACA6F,EAAAvH,GAAAA,EAAAoF,UAAApF,EAAAoF,SAAAoC,qBAAA,UACA8B,KAGA,IAAA,IAAAC,KAAAhC,EACArH,EAAAqH,EAAAgC,KAAAhC,EAAAgC,GAAA1B,KACAyB,EAAAlF,KAAAmD,EAAAgC,IAIA,IAAA,IAAAzG,EAAA,EAAAA,EAAA0F,EAAAlE,OAAAxB,GAAA,EAAA,CACA,IAAA0G,EAAA,KACA,GAAApC,EAAA+B,EAAA9D,KAAAmD,EAAA1F,IACA0G,GACApH,IAAAgF,EAAA,GACAjG,KAAAiG,EAAA,GACAU,QACAhF,MAAAsE,EAAA,GACArE,OAAA,WAEA,GAAAqE,EAAAgC,EAAA/D,KAAAmD,EAAA1F,IAAA,CACA0G,GACApH,IAAAgF,EAAA,GACAjG,KAAAiG,EAAA,GACAU,QACAhF,MAAAsE,EAAA,GACArE,OAAA,MAEA,IAAA0G,GAAArC,EAAA,GACAQ,EAAA0B,EAAAlC,EAAA,GAAA,GACA,GAAAQ,EAAA,CACA,IAAA1C,EAAAF,EAAAwE,EAAApH,KACA,GAAA8C,EAAA,CAEA,IAAAwE,GADAxE,EAAAA,EAAA0B,KAAA,OACA+B,QAAAf,EAAA+B,WACAD,GAAA,IACAF,EAAA1G,KAAA2G,EAAAvE,EAAA2B,UAAA,EAAA6C,GAAApE,MAAA,MAAAhB,eAIA,GAAA8C,EAAAiC,EAAAhE,KAAAmD,EAAA1F,IAAA,CACA,IAAAV,EAAApC,EAAA6C,SAAAyE,KAAAjB,QAAA,OAAA,IAEAwB,EAAArB,EADA,IAAAU,OAAAZ,EAAAkC,EAAA1F,EAAA,MACAV,IACAoH,GACApH,IAAAA,EACAjB,KAAA,GACA2G,QACAhF,KAAA+E,EAAAA,EAAA/E,KAAAsE,EAAA,GACArE,OAAA,MAIA,GAAAyG,EAAA,CACAA,EAAArI,OACAqI,EAAArI,KAAAiC,EAAAoG,EAAApH,IAAAoH,EAAA1G,OAEA,IAAAO,EAAAC,EAAAkG,EAAApH,IAAAoH,EAAA1G,MACA8G,EAAAvG,EAAAA,EAAAsC,KAAAC,MAAAvC,EAAAiB,OAAA,IAAA,KACAjB,GAAAuG,EAAAvD,QAAA,OAAA,MAAAmC,EAAA1F,EAAA,GAAAuD,QAAA,OAAA,IACAmD,EAAAnG,QAAAA,EAGAmG,EAAAnG,SAAAmF,EAAA1F,EAAA,IAEApB,EAAA0C,KAAAoF,IAGA,OAAA9H,EAAA4C,QAKAf,KAAA,YACAX,KAAAmB,EAAAnB,KACAT,QAAAqG,EAAA,GACA9G,MAAAA,GAPA,KAyBA,SAAAgB,EAAAmH,EAAAzH,EAAAC,EAAAF,GACA,IAAA2H,GACA1H,IAAAA,EACAU,KAAAT,GAGA,GAAAyH,EAAA1H,KAAA0H,EAAAhH,KAAA,CACA+G,EAAA5F,YAAA,EAEA6F,EAAA3I,OACA2I,EAAA3I,KAAAiC,EAAA0G,EAAA1H,IAAA0H,EAAAhH,OAGAgH,EAAAzG,UACAyG,EAAAzG,QAAAC,EAAAwG,EAAA1H,IAAA0H,EAAAhH,OAGA,IAAA2F,EAAA,cAAApD,KAAAlD,GAKA,GAJAsG,IACAqB,EAAA/G,OAAAiE,EAAAyB,EAAA,GAAAqB,EAAA1H,IAAA0H,EAAAhH,OAGA+G,EAAAnI,MAAA4C,OAAA,GACAuF,EAAAnI,MAAA,GAAAU,MAAA0H,EAAA1H,IAAA,CACA,GAAAyH,EAAAnI,MAAA,GAAAoB,OAAAgH,EAAAhH,KACA,OAAA,EACA,IAAA+G,EAAAnI,MAAA,GAAAoB,MAAA+G,EAAAnI,MAAA,GAAAP,OAAA2I,EAAA3I,KAGA,OAFA0I,EAAAnI,MAAA,GAAAoB,KAAAgH,EAAAhH,KACA+G,EAAAnI,MAAA,GAAA2B,QAAAyG,EAAAzG,SACA,EAOA,OAFAwG,EAAAnI,MAAAqI,QAAAD,GACAD,EAAAG,SAAA,GACA,EAKA,OAHAH,EAAA5F,YAAA,GAGA,EAaA,SAAAgG,EAAAlG,EAAAmG,GASA,IAAA,IAJA9C,EACAoC,EACAtE,EANAiF,EAAA,qEACAzI,KACA0I,KACAC,GAAA,EAKAC,EAAAL,EAAAM,OAAAD,IAAAD,EAAAC,EAAAA,EAAAC,OACA,GAAAD,IAAA7H,GAAA6H,IAAA3J,EAAAa,OAAA,CAkBA,GAdAgI,GACApH,IAAA,KACAjB,KAAAJ,EACA+G,QACAhF,KAAA,KACAC,OAAA,MAGAuH,EAAA1H,KACA4G,EAAArI,KAAAmJ,EAAA1H,MACAwE,EAAA+C,EAAA9E,KAAAiF,EAAArH,eACAuG,EAAArI,KAAAiG,EAAA,SAGA,IAAAoC,EAAArI,KACA,IACAqI,EAAArI,KAAAiG,EAAAoD,MAAA3D,UAAA,EAAAO,EAAAoD,MAAA7B,QAAA,MACA,MAAApH,IAGA,GAAA2D,EAAAiC,EAAAmD,GAAA,CACAd,EAAApH,IAAA8C,EAAA9C,IACAoH,EAAA1G,KAAAoC,EAAApC,KAEA0G,EAAArI,OAAAJ,IACAyI,EAAArI,KAAAiC,EAAAoG,EAAApH,IAAAoH,EAAA1G,OAGA,IAAA2F,EAAA,cAAApD,KAAAtB,EAAA5B,SAAA4B,EAAA0G,aACAhC,IACAe,EAAAzG,OAAAiE,EAAAyB,EAAA,GAAAvD,EAAA9C,IAAA8C,EAAApC,OAIAsH,EAAA,GAAAE,GACAD,GAAA,EAEAD,EAAA,GAAAE,IAAA,EAGA5I,EAAA0C,KAAAoF,GAGAU,GACAxI,EAAA6C,OAAA,EAAA2F,GAGA,IAAA7C,GACA9D,KAAA,UACAX,KAAAmB,EAAAnB,KACAT,QAAA4B,EAAA5B,QACAT,MAAAA,GAGA,OADAgB,EAAA2E,EAAAtD,EAAA2G,WAAA3G,EAAA4G,SAAA5G,EAAAjB,MAAAiB,EAAA6G,WAAA7G,EAAA5B,SAAA4B,EAAA0G,aACApD,EASA,SAAA5E,EAAAsB,EAAAmG,GACA,IAAAxI,EAAA,KACAwI,EAAA,MAAAA,EAAA,GAAAA,EAEA,IAKA,GADAxI,EAAAmH,EAAA9E,GAEA,OAAArC,EAEA,MAAAH,GACA,GAAAsJ,EACA,MAAAtJ,EAIA,IAEA,GADAG,EAAAsG,EAAAjE,GAEA,OAAArC,EAEA,MAAAH,GACA,GAAAsJ,EACA,MAAAtJ,EAIA,IAEA,GADAG,EAAAwH,EAAAnF,GAEA,OAAArC,EAEA,MAAAH,GACA,GAAAsJ,EACA,MAAAtJ,EAIA,IAEA,GADAG,EAAAuI,EAAAlG,EAAAmG,EAAA,GAEA,OAAAxI,EAEA,MAAAH,GACA,GAAAsJ,EACA,MAAAtJ,EAIA,OACAqB,KAAAmB,EAAAnB,KACAT,QAAA4B,EAAA5B,QACAoB,KAAA,UA3yBA,IAAAsH,GAAA,EACA5F,KAo0BA,OAPAxC,EAAAC,oCAAAA,EACAD,EAAAuF,+BAAAA,EACAvF,EAAAW,kBAAAA,EACAX,EAAAa,cAAAA,EACAb,EAAAqI,SAbA,SAAAZ,GACAA,EAAA,GAAA,MAAAA,EAAA,GAAAA,GACA,IACA,MAAA,IAAAa,MACA,MAAAhH,GACA,OAAAtB,EAAAsB,EAAAmG,EAAA,KASAzH,EAAAuC,UAAAA,EAEAvC,KAQA9B,EAAAqK,8BAAA,WACA,IAAAC,EAAA,SAAAC,GACA,IAAAC,EAAAnL,EAAAkL,GACAlL,EAAAkL,GAAA,WAEA,IAAApD,EAAAjH,EAAAL,KAAAc,WACA8J,EAAAtD,EAAA,GAOA,MANA,mBAAA,IACAA,EAAA,GAAAnH,EAAAO,KAAAkK,IAKAD,EAAA/J,MACA+J,EAAA/J,MAAAC,KAAAyG,GAEAqD,EAAArD,EAAA,GAAAA,EAAA,MAKAmD,EAAA,cACAA,EAAA,gBAIAtK,EAAA8D,iBACA9D,EAAA8D,gBAAA,GAEA9D,EAAAmB,sBACAnB,EAAAmB,qBAAA,KAEAnB,EAAAkF,gBAAAlF,EAAAkF,eAAA,KAEAlF,EAAAkF,eAAA,IAIA,mBAAAwF,QAAAA,OAAAC,IACAD,OAAA,cAAA1K,GACA,oBAAA4K,QAAAA,OAAAC,SAAAxL,EAAAuL,SAAAA,OACAA,OAAAC,QAAA7K,EAEAX,EAAAW,SAAAA,IAGA,oBAAAX,OAAAA,OAAAyL,wSCi4CEC,EAAAtL,EAAAuL,OAA+BC,EAAA,kFAAuC,iBAAAD,GAAtEC,EACEvG,KAAAsG,eAZAA,qBAlmFJE,EAAAxK,MAAAA,KAAAwK,WAAA,eAMUC,EAAAzL,OAAgB0L,iBAwBzBC,wBAAAC,OAAA,SAAAC,EAAAC,GAAAD,EAAAF,UAAAG,IAlBQ,SAAAD,EAAAC,GAAA,IAAA,IAAAC,KAAAD,EAAAA,EAAA5L,eAAP6L,KAAAF,EAAAE,GAAAD,EAAAC,YACE,SAAYF,EAAAC,GAMP,SAAAE,IAAAhL,KAAAiL,YAAAJ,EALNJ,EAAAI,EAAAC,GAMCD,EAAA5L,UAAK,OAAA6L,EAAmB9L,OAAKkM,OAAAJ,IAAAE,EAAA/L,UAAA6L,EAAA7L,UAAA,IAAA+L,6BAQxBb,EAAgB,cAAWG,OAAA,QAClCa,EAAC,WACH,SAAAA,IAACnL,KAAAoL,iBAAA,KAaQ,OATTD,EAAAlM,UAAAoM,QAAA,WAAA,OAAArL,KAAAoL,kBACSD,EAAPlM,UAAaqM,UAAe,WAC1BtL,KAAKoL,iBAAa,MAGbD,EAAPlM,UAAYsM,QAAe,SAAAC,GACzBxL,KAAKoL,iBAAmBI,GAGnBL,OAENA,8BAAAA,MAEMM,EAAA,oBACAA,KAkBI,OAfHA,EAAAxM,UAAAyM,MAAR,SAAY5K,GACVd,KAAI2L,IAAA,QAAU7K,MAGT7B,UAAS2M,KAAQ,SAAC9K,YACnB,OAAQA,MACR7B,UAAS4M,KAAW,SAAG/K,YACvB,OAAQA,MAEX7B,UAAAsB,MAAA,SAAAO,GACFd,KAAA2L,IAAA,QAAA7K,IA3BH2K,EA4BCxM,UAAA0M,IAAA,SAAAG,EAAAhL,GA5BY,GAAAiL,QAAA,CAgCb,IAAApK,EAAA,IAAAmK,EAAA,oBAAAhL,EAAAiL,QAAAD,GAKCC,QAAAD,GAAAnK,GAHQoK,QAAPJ,KACOI,QAAP,IAAApK,KAHW8J,OAsBXA,WAAAA,QAAY,oBANLO,cAOD/M,UAAUyM,MAAG,SAAA5K,KACnBkL,EAAC/M,UAAA2M,KAAA,SAAA9K,KAEMkL,EAAA/M,UAAA4M,KAAA,SAAP/K,OACE7B,UAAcsB,MAAK,SAAaO,KAEhCkL,eAEOA,QACN,oBAEGC,EAAWC,QAChB,IAAAA,IAAAA,EAAA,KACHlM,KAAAmM,SAAA,IAACnM,KAAAuB,KAAA,kBArBYvB,KAAAoM,UAAAF,SAyBbD,EAAAhN,UAAAoN,IAAA,SAAArK,EAAAsK,GACSC,cAAQvM,KAAcwM,aACtB,IAAAC,EAAIzK,EAAW0E,MAAAgG,KAAA,SASvBD,GAAAA,EAAAE,WAPQ3M,KAAAwM,YAAAI,YAAP,WAAwC,OAAiB5K,EAAA6K,OAAAC,uBAAAL,EAAAE,WAAA3M,KAAAoM,eAErDE,KAGFL,OAEJA,gBAAAA,EAAA,IAXAc,EAWC,WAXY,SAAAA,IAeb/M,KAAAmM,SAAA,GAMEnM,KAAAuB,KAAA,6BAEetC,UAAMoN,IAAA,SAAArK,EAAAsK,GACdtK,EAAA0E,MAAcsG,cAA8C,IAAhChL,EAAW0E,MAAGsG,aAAe/J,QAAG,UAAAjB,EAAA0E,MAAAuG,OAClEjL,EAAA0E,MAAAsG,aAAAE,EAAAC,OAAAnI,QAAA,IAAA,IAAAQ,UAAA,EAAA,QAED8G,KAECS,iCAAA,WACH,SAAAK,EAACP,EAAAnG,EAAA2G,GAAArN,KAAA6M,OAAAA,EAfY7M,KAAA0G,MAAAA,EAmBb1G,KAAAqN,YAAAA,GAAA,IAAAC,SA0CAtO,OAACuO,eAAAH,EAAAnO,UAAA,OAzCeuO,IAAA,WACN,OAAOxN,KAAA6M,OAACY,OAAsB9B,iBAE5B,gBACA,8BAGUyB,QACZ,kCAIEf,IAAQ,SAASrK,EAAM0L,kBAChBC,EAAQrB,UAClB,WACD,IACFtK,EAAA4L,WAE8BD,EAAQtB,IAAArK,EAAcsK,GAGpD,MAAA5J,GACDV,EAAA4L,WAAA,EAEQ5L,EAAQ2J,IAAOpL,MAAC,yBAA+BoN,EAAGpM,KAAA,MAAAmB,EAAA5B,QAAA,uBAE1DkB,EAAA4L,WAAAF,GAEDA,EAAoB1L,KAKpB6L,EAAO7L,EAAc6K,OAAAY,OAAeI,QACpCC,KACMJ,IACNI,EAAiBD,EAAI5K,QAAgBpD,GAAI0B,KAAA,KAAA4K,SAAA,iBAAAE,IAAAqB,GAAA,OAEzC,IAAA,IAAOjI,EAAUoI,EAAI5K,OAAA,EAAAwC,GAAyB,EAAAA,IAC9CqI,EAAiBrI,GAAI5F,EAAAgO,EAAApI,GAA0BiI,GAAAjI,EAAAoI,EAAA5K,OAAA,EAAA6K,EAAArI,EAAA,GAAA,MAEnDqI,EAAA,MA1CaC,EAAAC,kBAAA,SAAkBP,GAsD/BA,EAAAQ,UAAA,IAAAC,GA2CET,EAAAQ,UAAA,IAAAE,GA9BQV,EAAAQ,UAA6E,IAAGG,GAqBhFX,EAAAQ,UAAA,IAAgBI,GAUtBZ,EAAKQ,UAAU,IAAMK,GACtBb,EAAAQ,UAAA,IAAAM,GAEMd,EAAAQ,UAAA,IAAAO,GACLf,EAAMQ,UAAA,IAAAQ,IAENV,0BAGWA,QACF,oBACRW,EAAAjB,GAEDzN,KAAK2O,kBACHC,kBAAS,OACTC,QAAOpB,EAmPb,SAhPaxO,UAAA6P,QAAyB,SAAGpI,OAEnC+G,EAAOzN,KAAA6O,QACRlD,EAAA8B,EAAA9B,IAED,GAAK8B,EAAAsB,WAKHtB,EAAQuB,QAGV,GAAChP,KAAAiP,0BACFtD,EAAAC,KAAA,gFADC,CAIA5L,KAAMkP,mBACN,IAAMC,EAAwB1B,EAAK2B,QAAQC,MAAAC,KAAA5I,GACrC6I,EAAY,QAAW7I,EAAAuG,KAAA,KAAAvG,EAAAsG,aAAA,SAAAtG,EAAAsG,aAAA,IAEzBmC,EACFxD,EAAAC,KAAO,oBAAAuD,EAAA,IAAAI,GAIL5D,EAACpL,MAAO,2BAAUgP,QAfrB5D,EAAAC,KAAA,uDAJKD,EAAAC,KAAS,+DAsBd3M,UAAAuQ,QAAA,SAAAC,GAED,IAAIC,EAAQ1P,KAEVyN,EAAOzN,KAAA6O,QACRlD,EAAA8B,EAAA9B,IAED,IAAI3L,KAAC4O,sBAIHhD,KAAM,uBACN6B,EAAKsB,WAKLtB,EAAQuB,gCAIG,8BAGZ,IAAAW,EAAAlC,EAAA2B,QAAAC,MAAA7B,IAAAC,EAAAmC,qBAAC,IAASD,GAAG,IAAAA,EAAA1M,OAER,YADAjD,KAAK4O,kBAAC,GAGXjD,EAAAC,KAAA,WAAA+D,EAAA1M,OAAA,cAAAwK,EAAAoC,UAAA,KACFpC,EAAAqC,iBAAAC,WAAAJ,EAAAK,IAAA,SAAA9P,GAAA,OAAAA,EAAAoK,QAAAmD,EAAA,SAAAwC,GAEMP,EAAAQ,0BAAAD,EAAPN,GACQD,EAAwBS,aAAaR,EAAAK,IAAA,SAAA9P,GAAA,OAAAA,EAAAoK,QAAA2F,GAEtCtE,EAAAC,KAAA,8BACH8D,EAAAd,kBAAsB,GACvBa,GAGD,MAAK/M,GAEDiJ,EAAApL,MAAA,2BAA2BmC,GAC7B1C,KAAKoQ,oBACNpQ,KAAA4O,kBAAA,QAzBCjD,EAAAC,KAAO,4DALLA,KAAK,kEAmCR3M,UAAAmR,kBAAA,SAAAC,EAAAC,EAAAC,GACF,IAAA9C,EAAAzN,KAAA6O,UAEMwB,GAAAA,GAAP,KACIA,EAAgB,GAGZ5C,EAAA9B,IAAAC,KAAA,6BAARyE,EAAmE,aACjErQ,KAAMwQ,wBAA0B,IAAAC,MAAA,IAAAA,MAAAC,UAAA,IAAAL,GAC5BC,IAACtQ,KAAM2Q,yBAAO3Q,KAAAwQ,4BAGhB/C,EAAC2B,QAAAC,MAAAuB,WAEA3R,UAAA4R,eAAA,SAAA/N,KACFA,GAAA9C,KAAA2O,UAAA5L,KAAAD,IAGK4L,EAAAzP,UAAAkR,aAAA,SAAuBW,EAA/Bb,GAEC,IAAA,IAAAc,EAAA,EAAAC,EADahR,KAAA2O,UACboC,EAAAC,EAAA/N,OAAA8N,IAAA,CAEO,IAAAjO,EAAAkO,EAAAD,GAAR,IACOjO,EAAKgO,EAAcb,GAEvB,MAAAvN,GACF1C,KAAA6O,QAAAlD,IAAApL,MAAA,yCAAAmC,MAMOgM,EAAAzP,UAAAgQ,wBAAR,WACE,OAAKjP,KAAK2Q,0BAA4B3Q,KAAK2Q,yBAAwB,IAAAF,QAElExR,UAAAiQ,iBAAA,WACF,IAAAQ,EAAA1P,KAEOA,KAAAiR,cACAjR,KAAAiR,YAAuBrE,YAAA,WAAA,OAAmC8C,EAAAwB,kBAAA,SAInDjS,UAAUkS,2BAAA,kBAClBnR,KAAKwQ,yBAAsBxQ,KAAAwQ,wBAAY,IAAAC,QAEnCxR,UAAAiS,eAAA,WACRlR,KAAAmR,8BAAAnR,KAAA4O,kBAEG5O,KAAAwP,aAIKvQ,UAAAiR,0BAAA,SAAAD,EAAAa,GACT,IAEIrD,EAASzN,KAAA6O,QAEXlD,EAAI8B,EAAK9B,OACTsE,EAAKmB,QAIH,OAHFzF,EAAAC,KAAO,QAAAkF,EAAA7N,OAAA,iBACRjD,KAAAqR,aAAAP,MAKCb,EAAKqB,mBAGN,OAFC3F,EAAIpL,MAAC,6CACLP,KAAAoQ,uBAKAH,EAASsB,gBAGT,OAFA5F,EAAIC,KAAC,uEACL5L,KAAKoQ,kBAAa,MAAQ,GAAA,GAI5B,GAAIH,EAASuB,4BACX7F,EAAMC,KAAA,6FACN5L,KAAIoQ,kBAAO,cACTiB,aAAaP,MAEbb,EAAMwB,UAAAxB,EAAAyB,WAKR,SAJEnR,MAAI,sCAAoC0P,EAAAnP,cACxCsP,kBAAkB,UACpBpQ,KAACqR,aAAAP,GAKH,GAAIb,EAAS0B,sBAAb,CACE,IAAI7Q,EAAM,kDACN2M,EAACmC,oBAAoB,GAC1BjE,EAAApL,MAAAO,EAAA,sCACF2M,EAAAmC,oBAAAtL,KAAAK,IAAA,EAAAL,KAAAsN,MAAAnE,EAAAmC,oBAAA,QAIOjE,EAACpL,MAAQO,EAAQ,qCACtBd,KAAAqR,aAAAP,SAhPQb,EAAAmB,UAuRbzF,EAAApL,MAAA,6BAAA0P,EAAAnP,SAAA,gDAIEd,KAAAoQ,wBAEenR,UAAOoS,aAAmB,SAAAP,GACxC,IAAA,IAAArL,EAAA,EAAAA,GAAAqL,OAAA7N,OAAAwC,IAEHzF,KAAA6O,QAAAO,QAAAC,MAACwC,OAAAf,EAAArL,GAAA0J,YAcDT,OACSA,kBAAAA,MAkEToD,EAAC,WA1DC,OANO,SAAAC,QACa,IAAZA,IAA4BA,EAAE,KACpC/R,KAAMqP,MAAO,IAAG2C,EAAmBD,GACnC/R,KAAMiS,SAAU,IAAAD,EAAA,SAMhBF,wBAAuBA,QACL,oBACZI,IACNlS,KAAMmS,2BAAU,uCAGlBD,EAACjT,UAAA8Q,WAAA,SAAAe,EAAArD,EAAAC,EAAA+B,GAEM,IAAA/C,EAAA0F,KAAAC,UAAAvB,GACCzN,EAAUrD,KAAKsS,cAAc7E,EAAQ,OAAUA,EAAOoC,UAAS,iBAAAnD,GAC/D6F,EAAKvS,KAAAwS,yBAAkB/E,EAAOC,UAC/BD,EAAOgF,kBAAWC,YAAArP,EAAAkP,EAAA9C,MAEpBxQ,UAAA0T,oBAAA,SAAAC,EAAAxJ,EAAAqE,EAAAC,OAEDmF,EAAIpF,EAA+BoC,UAAA,yBAAAiD,mBAAAF,GAAA,oBACnClG,EAAK0F,KAAAC,UAAAjJ,KACHpJ,KAAWsS,cAAW7E,EAAM,OAAAoF,EAAAnG,GAC9B6F,EAACvS,KAAAwS,yBAAA/E,EAAAC,UAACD,EAAUgF,kBAACC,YAAArP,EAAAkP,MAEZtT,UAAA8T,YAAA,SAAAtF,EAAAuF,EAAAtF,OAEDrK,EAAKrD,KAAQsS,cAAU7E,EAAS,MAAWA,EAAAoC,UAAA,6BAAAmD,UAoB3CvF,EAAQgF,kBAAaC,YAAArP,EAnBnB,SAAO4P,EAASnS,EAAI4L,EAAAwG,GACtB,GAAC,MAAAD,EAED,OAASvF,EAAI,IAAAyF,GAAuB,EAAS,MAAQ,EAAI,KAAIrS,IAG/D,IAAOmR,EACR,IAEMA,EAAAG,KAAAgB,MAAA1G,GAEL,MAAOxM,GACRuN,EAAA9B,IAAApL,MAAA,8BAAAmM,EAAA,KAEyE,IAAAuF,GAAAoB,MAAApB,EAAmBe,SACpF,OAAAtF,EAAA,IAAAyF,GAAA,EAAA,MAAA,EAAA,KAAA,oCAELzF,EAAG,IAAAyF,GAAA,EAAAlB,EAAAA,aAAAA,EAAAe,eAIH/T,UAAAqU,cAAA,SAAAC,EAAAC,EAAA/F,GACH,IAAApK,EAAArD,KAAAsS,cAAA7E,EAAA,MAAAA,EAAAgG,mBAAA,uCAAAF,EAAA,UAAAC,GAEO/F,EAAAgF,kBAAAC,YAAArP,MACEpE,UAAQqT,cAAgB,SAAQ7E,EAAAiG,EAAA3S,EAAA2L,eAChC,IAANA,IAAqBA,EAAW,OAGhCgH,OAAQA,EACR3S,IAAAA,EACH2L,KAAAA,EACHiH,OAAAlG,EAAAkG,OAACC,UAAAnG,EAAAmG,YAiBD1B,EAAAjT,UAAAuT,yBAAA,SAAA/E,EAAAC,GAqPC,IAAAgC,EAAA1P,KApPe,OAAA,SAAdiT,EAA0BnS,EAAW4L,EAAAwG,GAAE,IAAAW,EAAcX,GAAAY,SAAAZ,EAAAxD,EAAAyC,4BAAA,MAAd4B,aAAAF,EAAcpG,GAAdC,EAAA,IAAAsG,EAAcf,EAAAnS,aAKnDoR,wBAAsBA,QACpB,oBACDhF,uBAEe,SAAA+G,WACdC,KACEnD,EAAM,EAACA,EAAK9Q,UAAOgD,OAAA8N,IACrBmD,EAACnD,EAAA,GAAA9Q,UAAA8Q,GAOH,GAJAkD,IACDA,OAGMC,GAA4B,IAAlBA,EAAOjR,OACpB,OAAOgR,EAGT,IAAI,IAAIE,EAAa,EAAAC,EAAAF,EAAAC,EAAAC,EAAAnR,OAAAkR,IAAA,CACjB,IAAC7J,EAAS8J,EAAWD,GACjB7J,GAAS2J,EAAG3M,QAAOgD,GAAW,GAChC2J,EAAKlR,KAAIuH,GAIf,OAAO2J,GAGK/G,EAAAmH,YAAd,SAAyBxQ,GACvB,IAAMA,GAAoB,IAADA,EAACZ,OAEpB,OAAK,MAET,IADGqR,EAAM,EACH7O,EAAmB,EAAAA,EAAW5B,EAAKZ,OAAAwC,OAEvC6O,GAAa,GAAIA,EADRzQ,EAAQ0Q,WAAW9O,GAE9B6O,GAAC,EAGH,OAAOA,GAGKpH,EAAAsH,WAAd,SAAAC,EAAAC,GAGE,IAAC,IAFD1O,KAEC+K,EAAA,EAAA4D,GADQF,GAAa,IAAGxQ,MAAK,MAC7B8M,EAAA4D,EAAA1R,OAAA8N,IAAA,CAED,IACD6D,EADeD,EAAO5D,GACtB9M,MAAA,KAGkBiJ,EAAnB2H,QAAoBD,EAAA,GAAqBF,KACjC1O,EAAmB4O,EAAC,IAAAA,EAAA,WAItB1H,EAAM4H,QAAQ9O,GAAmB,KAAnBA,KAEjBmH,KAAA,WAED,SAAW4H,IACT,OAAMzQ,KAAMC,MAAQ,OAAD,EAACD,KAAA0Q,WAAApT,SAAA,IAAA4D,UAAA,UAEnBuP,IAAAA,IAAA,IAAAA,IAAA,IAAAA,IAAA,IAAAA,IAAA,IAAAA,IAAAA,IAAAA,OAGHE,MAAO,SAAOC,EAAAhB,GACf,IAAAlO,KAEa,IAAA,IAAAjH,KAAYmW,MACnBA,EAASnW,KACZiH,EAAWjH,GAACmW,EAAAnW,IAId,IAAM,IAAAA,KAAUmV,MACZA,EAAWnV,KACbiH,EAAOjH,GAAWmV,EAAAnV,IAIrB,OAAAiH,KAGGmP,aAAY,SAAYtR,OACxBA,EACD,OAAA,KAGD,IACEuR,EADc,kHACFpR,KAAAH,GACd,OAACuR,GAAAA,EAAAnS,OAAA,EAEWmS,EAAc,GACrB,yBAEQ,SAAgBC,EAAEX,UACpB,IAADW,EAACpS,OACT,OAAC,KAGH,IAAAqS,EAAQD,EAAMpR,MAAQ,KACvB,GAAA,IAAAqR,EAAArS,OAEa,OAAA,KASA,IAAA,IAPb+C,KAOoB+K,EAArB,EAAAwE,EAAmCD,EAAEvE,EAAoBwE,EAAAtS,OAA0B8N,IAAA,CAA1B,IAClDhL,EADkDwP,EAAAxE,GAClC9M,MAAK,KACxBiJ,EAAO2H,QAAM9O,EAAA,GAAA2O,KACd1O,EAAAwP,mBAAAzP,EAAA,KAAAyP,mBAAAzP,EAAA,KAKD,OAAQmH,EAAA4H,QAAc9O,GAAQ,KAADA,kBAElB,kBACR1B,KAAAC,MAAA,iBAAAD,KAAA0Q,qBAGG,SAAc7L,EAAOsM,EAACC,WACjB,QAAMA,GAAA,IACdvM,GAAA,iBAAAA,EAED,OAAM,QAEJ,+CACDuM,EAAAvM,EAAAwM,cAAAxM,GAAAnE,QAAA4Q,EAAA,KAEKH,OAAgBI,KAAY,SAAQC,GAC1C,GAAuB,iBAAnBA,EACF,OAAO,MAGTA,GAAIJ,EAAkBI,EAAIH,cAAmBG,GAAA9Q,QAAA4Q,EAAA,KACpC3S,QAAQ,EAChB,OAAA,MAGC8S,EAAoC,MAAfD,EAAQ,GAC9BC,IAEGD,EAAAA,EAAkBrW,MAAC,IAEvB,IAACuW,EAAA,MAAAF,EAAAA,EAAA7S,OAAA,GAMS,OAJV+S,IACCF,EAAAA,EAAAtQ,UAAA,EAAAsQ,EAAA7S,OAAA,IAGS8S,GAAqBC,EACrBF,EAAS7S,QAAYkG,EAAMlG,SAAqC,IAA/BkG,EAAQ7B,QAAUwO,EAAM,GAGzDC,EACC7I,EAAA+I,SAAa9M,EAAO2M,GAGrBE,EACC9I,EAAQgJ,WAAQ/M,EAAM2M,GASd3M,IAAvB2M,eAGW,SAAK3M,UACD,UAA4B,iBAAd,GAAgB,IAAAnK,OAAAmX,KAAAhN,GAAAlG,qBAEtC,SAAAkG,EAAAiN,YAEG5Q,UAAO,EAAK4Q,EAAKnT,UAAcmT,uBAGxBjN,EAAAkN,UACR,MAAA/O,QAAA+O,EAAAlN,EAAAlG,OAAAoT,EAAApT,qBAGF,SAAAyJ,EAAAgI,EAAA4B,YAEDC,EAAaC,EAAAC,GACf,IAAGC,KACJ,OAAAtE,KAAAC,UAAAmE,EAAA,SAAAzX,EAAAuL,GAEO,IAAC4C,EAAS2H,QAAK9V,EAAK0X,GAApB,CAIJ,GAAuB,iBAAZnM,GAAcA,EAAA,CACrB,IAAiB,IAAjBoM,EAAUpP,QAAOgD,GACnB,OAEFoM,EAAU3T,KAAKuH,GAIjB,OAAOA,QAIW,uBAAZ1I,SAASzC,KAAGuN,GAAA,CAClB,IAAIiK,SACF,IAAAC,KAAalK,EACdA,EAAAkK,KAEWlK,IAIfiK,EAAAC,GAAAlK,EAAAkK,IAE8B,OAAAL,EAAAI,EAAAjC,MAEd,sBAAb9S,SAAazC,KAAAuN,GAAA,CAGX,IAAK,IAFR1G,KAEQP,EAAS,EAAIA,EAAOiH,EAAKzJ,OAAKwC,IACrCO,EAAOP,GAAa2M,KAAAgB,MAAAmD,EAAA7J,EAAAjH,GAAAiP,IAGtB,OAAStC,KAAKC,UAAOrM,UACNuQ,EAAW7J,EAAAgI,gBACnB,SAAQvL,EAAA0N,WAAW,IAAVA,IAAUA,GAAA,GAAU,kBAAJ1N,EAAK,OAAKA,EAG1C,GAAO,OAAPA,GAAoB,iBAAAA,GAAA,iBAAAA,EACrB,OAAA0N,EACF,QAAA1N,EAAA,IAAAwM,cAAAC,QArPY,IAAA,OAkRb,IAAA,MAAA,IAAA,IAAA,OAAA,EA4GC,IAAA,QApGe,IAAA,KACV,IAAO,IACV,KAAA,KAAA,OAAA,EAGC,OAAKiB,GAEJ3J,OAGDA,MAAOA,QACQ,oBACV4J,YAGOA,EAAAC,UAAU,SAAxBjU,KACIA,GAAS9C,KAAK2O,UAAO5L,KAAUD,MAEhCkU,yBAAA,SAAAvJ,GAED,GAAMA,GAAAA,EAAgBuB,QAAtB,CAIY,IAAAiI,EAAAjX,KAAYkX,uBAAkBzJ,GAC1CA,EAAM9B,IAAAC,KAAA,6BAAiDqL,EAAAjE,SACvDvF,EAAIwE,SAAW/E,EAAA+H,MAAexH,EAAEwE,SAAAgF,EAAAhF,eAC9BkF,QAAO1J,OAGE2J,WAAK,SAAA3J,GAChB,OAAKA,GAAAA,EAAeuB,QAgDrBhP,KAAAkX,uBAAAzJ,GA5CiBuF,SAAgB,EAHjC,KAKEe,aAAA,SAAAf,EAAAvF,GAED,IAAM4J,EAAArX,KAAqBoX,WAAG3J,GAC1BuF,GAAQqE,IAGZ5J,EAAC9B,IAAAC,KAAA,2BAAAyL,EAAA,QAAArE,GAEDhT,KAAKsX,eAAW7J,EAAY4J,OAE3BC,eAAA,SAAA7J,EAAAuF,GAED,IAAAtD,EAAW1P,KACX,GAAAyN,GAAOA,EAAgBsB,QAAvB,CAIGtB,EAAAuB,cAQKgE,EAAS,OACXhT,KAAAoX,WAAS3J,UAGX7B,KAAO,wCAAqBoH,EAAA,OAC7BlD,iBAAAiD,YAAAtF,EAAAuF,EAAA,SAAA/C,GAED,GAAMxC,GAAWwC,GAAyBA,EAAAmB,SAAAnB,EAAAgC,SAA1C,CAKAxE,EAAOwE,SAAQ/E,EAAS+H,MAAKxH,EAAAwE,SAAahC,EAAAgC,UAE1C,IAAAsF,EAAgBT,EAAsBI,uBAAuBzJ,GAC7D,IAAI,IAAC1O,KAAQwY,EACZtH,EAAAgC,SAAAlT,WAIc0O,EAAKwE,SAAUlT,GAC3B,IAAMyY,GACLxE,QAAC/C,EAAA4D,gBACH5B,SAAQhC,EAAQgC,UAChBxE,EAAO2B,QAAK6C,SAAA3C,KAAAkI,KACZ7L,IAAOC,KAAI,sBAAM4L,EAAAxE,SACnBtD,EAACyH,QAAA1J,QAlBCA,EAAO9B,IAAEE,KAAA4L,8BAAwBxH,EAAAnP,YAdnC2M,EAAO9B,IAAApL,MAAQkX,mDAoCJX,EAAAK,QAAA,SAAA1J,GAEb,IAAI,IAAIsD,EAAI,EAAK2G,EADJ1X,KAAO2O,UACiBoC,EAAO2G,EAASzU,OAAM8N,IAAW,CACpE,IAAAjO,EAAY4U,EAAM3G,GACnB,IAEMjO,EAAS2K,GAEpB,MAAA/K,GA5GA+K,EAAA9B,IAAApL,MAAA,oCAAAmC,MAsIEoU,EAAAI,uBAAgC,SAAgBzJ,GAVzC,IAAAtF,EAAAsF,EAAmB2B,QAAM6C,SAAAzE,MAAA,GACzB,OAAArF,GAAAA,EAAUmC,OAAkBnC,EAAAmC,MAAA0I,SAAA7K,EAAAmC,MAAA2H,SAC5B9J,EAAAmC,OAEA0I,QAAA,EAAAf,cAEA6E,OAMAnI,eAELmI,gBAAeA,QACG,WAmCpB,gBAlCyBa,EAAa7W,GACpCd,KAAKoR,SAAA,EACLpR,KAAK0R,YAAA,EACL1R,KAAKsR,oBAAqB,EAC1BtR,KAAKuR,iBAAA,EACNvR,KAAAwR,sBAAA,EACHxR,KAAAyR,UAAA,EAACzR,KAAA2R,uBAAA,EAvBY3R,KAAA2X,WAAAA,EA2Bb3X,KAAAc,QAAAA,EAgBEd,KAAAoR,QAAAuG,GAAY,KAAAA,GAAoD,IAAhE3X,KAAA0R,WAQC,MAAAiG,EAPC3X,KAAKsR,mBAAgC,MAAhBqG,uBACC,MAADA,4BACY,MAATA,GAA8C,MAAXA,EAE3D3X,KAAKyR,SAA0B,MAA1BkG,EACL3X,KAAK2R,sBAA6B,MAAZgG,QAKtB3D,mBAAuBA,QACL,oBAClB4D,EAAwBC,EAAmBhI,GAC5C,IAAAH,EAAA1P,KAEMA,KAAAyN,OACA,IAAAqK,EADe,iBAAfD,EACgBA,GACtBlE,OAAAkE,EAAAhI,UAAAA,IAEM7P,KAAA+X,oBAAA,KACL/X,KAAMyN,OAAOsJ,UAAQ,SAAAtJ,GAAgB,OAAWiC,EAAAqI,oBAAArI,EAAAsI,WAAA,EAAA,IAAA,KAChDhY,KAAAyN,OAAQ4B,MAAAwB,eAAkB,SAAAC,EAAuBb,GAAA,OAAAP,EAAAqI,wBAkNnD,SA/MiB9Y,UAAAgZ,gBAAA,SAAAzX,GAChB,IAAA0X,EAAA,IAAA5K,EAGC,OADK4K,EAAAC,aAAA3X,GACAR,KAAAoY,YAAAF,GAAoCG,QAAA,UAGpCT,EAAA3Y,UAAAqZ,gBAAkB,SAAzB9X,EAAyCkN,GACvC1N,KAAAiY,gBAAYzX,GAAc+X,OAAQ7K,IAG7BkK,EAAA3Y,UAAAuZ,yBAAP,SAA0BhY,EAAiEiY,GACzF,IAAIC,EAAC1Y,KAAAiY,gBAA4BzX,GAOjC,OANDkY,EAAAR,kBAAAS,uBAKMD,EAAAR,kBAAAU,oBAAPH,GACMC,KAGQzZ,UAAQ4Z,yBAA2B,SAAWrY,EAASiY,EAAsB/K,GACzF1N,KAACwY,yBAAAhY,EAAAiY,GAAAF,OAAA7K,MACWzO,UAAQ6Z,mBAAyB,SAAEC,GAC/C,OAAC/Y,KAAAoY,cAAAC,QAAA,SAAAW,UAAAD,MACW9Z,UAAQga,mBAAW,SAAiBF,EAAArL,QAE9CoL,mBAAKC,GAAAR,OAAA7K,MAGIzO,UAAWia,UAAU,SAAUC,EAAiBrY,EAAOgL,OAChE4M,EAAC1Y,KAAAoY,cAAAC,QAAA,UAACvM,IACK4M,EAAOM,UAAUG,GAAAC,WAAAtY,GAAqCuY,YAAS,SAAAvN,QAEvE,GAAAhL,EAED4X,EAAcA,EAACM,UAAAG,GAAAC,WAAAtY,OAMV,CACD4X,EAAUA,EAACU,WAAiBD,GACjC,IAEM,IAAAjQ,EAAAlJ,KAAAkZ,UAAAhQ,OACEwP,EAAKA,EAAcM,UAAQ9P,GAAOA,EAAUA,QAAUA,EAAAA,OAAA3H,MAGxD,MAAArB,GACAF,KAAAyN,OAAe9B,IAAAD,MAAU,iCAAiBxL,EAAAY,UAI/C,OAAO4X,GAGFd,EAAA3Y,UAAAqa,UAAA,SAAPH,EAA0ErY,EAAAgL,EAAA4B,GACxE1N,KAAKkZ,UAAAC,EAA2BrY,EAASgL,GAAEyM,OAAA7K,IAGtCkK,EAAA3Y,UAAAsa,eAAgB,SAAvBC,GACE,OAAIxZ,KAAAoY,cAAoBC,QAAA,OAAAW,UAAAQ,MAEVva,UAAAwa,eAAiB,SAAcD,EAAA9L,GAC7C1N,KAACuZ,eAAAC,GAAAjB,OAAA7K,IAGIkK,EAAA3Y,UAAAya,mBAAA,WACL,OAAI1Z,KAAAoY,cAAoBC,QAAA,cAEVpZ,UAAA0a,mBAA+B,SAAAjM,GAC7C1N,KAAC0Z,qBAAAnB,OAAA7K,IAGIkK,EAAA3Y,UAAA2a,iBAAP,SAAmBrG,GACjBA,IACDvT,KAAAyN,OAAA9B,IAAAC,KAAA,2BAAA2H,GAQMvT,KAAAyN,OAAAqC,iBAAAwD,cAAPC,GAAkC,EAAAvT,KAAiCyN,YAGrDxO,UAAS6N,uBAAQ,SAAAyG,GAC3BA,IAEAvT,KAAAyN,OAAS9B,IAAAC,KAAY,iCAAkB2H,GACxCvT,KAAAyN,OAAAqC,iBAAAwD,cAAAC,GAAA,EAAAvT,KAAAyN,YAIQxO,UAAUmZ,YAAS,SAAAF,GAC5B,OAAC,IAAA2B,GAAAC,KAAA,IAAArJ,MAAAzQ,KAAAkY,MAGajZ,UAAS8a,YAAA,SAAArT,EAAAwR,EAA2CxK,YAChEE,EAAO5L,GAKR,OAJAA,IAEIA,EAAW4L,WAAE,KAEjBF,GAAAA,EAAA1L,OAGCA,EAAU,IAAGoL,EAAGpN,KAAA0G,EAAAwR,GAClB,OAACxR,EAIC1G,KAAQyN,OAAOsB,WAMZrC,SAECA,WAEDsN,MAAAtT,EAAAsT,KAAA/W,WAED+W,gBAGS3N,IAACrK,EAAK,SAAAiY,SACbA,EAAOpN,OAAAY,OACTyM,EAACD,EAAAvT,MACFuT,EAAArM,YAECsM,EAAQjN,MAAkB,IAAdiN,EAASjN,KAAKhK,SAC3BiX,EAAAjN,KAAA,OAUEiN,EAAAJ,OAAPI,EAAAJ,KAaC,IAAArJ,MAXGhD,EAAS4B,MAAQP,QAAIoL,GACtBA,EAAAlN,cAAAkN,EAAAlN,aAAA/J,OAAA,IAEKgX,EAAAtO,IAAeC,KAAuB,8BAAiCsO,EAAAlN,aAAG,KACpES,EAAA0M,uBAAiB5O,QAAoB2O,EAAAlN,kBAG9CU,GAAAA,EAAAuM,OAtCDja,KAAKyN,OAAI9B,IAAAC,KAAY,2CAEhBgC,EAAS5L,IANhB4L,EAAmB5L,IA8CrB4V,EAAC3Y,UAAAmb,8BAAA,SAAAxH,EAAAyH,EAAAjR,EAAAsE,GAMM,IAAAgC,EAAA1P,KACL,KAAA4S,GAAmByH,GAAAjR,GAAuBpJ,KAAUyN,OAAAsB,SACrD,QAAArB,GAAAA,EAAA,IAAAsG,EAAA,IAAA,cAED,IAAAsG,GAeCC,cAAAF,EAAAjR,YAAAA,GAdCpJ,KAAKyN,OAAOqC,iBAAS6C,oBAAAC,EAAuC0H,EAAgBta,KAAAyN,OAAA,SAAAwC,GAEvEA,EAAamB,SACb1B,EAAAjC,OAAa9B,IAAApL,MAAa,0DAAmBqS,EAAA,MAAA3C,EAAA0H,WAAA,IAAA1H,EAAAnP,WAG9C4M,GAAcA,EAACuC,QAGVhR,UAAaub,mBAAW,kBAC9Bxa,KAAAyN,OAAA0M,uBAAA9O,aAGFpM,UAAA8Y,oBAAA,SAAA0C,GACF,IAAA/K,EAAA1P,KAMDA,KAAAyN,OAAA9B,IAAAC,KAAkB,uCAAO6O,QAAzBzC,WAAA0C,aAAA1a,KAAAgY,iBACEA,WAAIzL,cAAoBvM,KAASwM,mBAC/BxM,KAAAyN,OAAmBkN,kCACrBC,EAAC,EAAA,CAED,IAAAtD,EAAO,WAAoB,OAAUR,EAAAQ,eAAA5H,EAAAjC,SACtCgN,EAAA,qCAAAza,KAAAwM,YAAAI,YAAA0K,EAAAsD,KAxOc5b,OAAAuO,eAAAqK,EAAsC,WAN1CpK,IAAA,WAkPJ,OADT,OAAAoK,EAAAiD,YAAAjD,EAAAiD,UAAA,IAAAjD,EAAA,OACSA,EAAYiD,uBAEV,EACPC,cAAC,IAGHlD,OACUiD,UAAM,OAChBjD,oBAACA,wCAEMtK,EAAArO,UAAAkZ,aAAP,SAAA3X,GACEA,IACDR,KAAA,gBAAAQ,IAIDxB,OAACuO,eAAAD,EAAArO,UAAA,gBAEDuO,IAAA,mBAAAxN,KAAA,iBAEA+a,YAAC,sBAAA9b,UAAA+b,aAAA,WAEM,OAAAhb,KAAA,iBAAA,QAECf,UAAC0Z,qBAAgC,WACvC3Y,KAAC,wBAAA,GAGIhB,OAAAuO,eAAAD,EAAArO,UAAP,oBACEuO,IAAA,WACD,QAAAxN,KAAA,wBACF+a,YAAA,EAhCYD,cAAA,IA0QXxN,EAAArO,UAAA2Z,oBAAmD,SAAAlF,GAlG5CA,IAQA1T,KAAA,uBAAyB0T,MA4BzBzU,UAAqBgc,oBAAC,WAkBrB,OAAAjb,KAAA,wBAAqB,MAcrBsN,OAcAA,YAAAA,QAOQ,oBAORwK,EAAsDoD,GAkB5D,SAAKC,EAAAC,GACD,MAAqB,mBAApBA,EAA8BA,EAAApb,MAAcob,EAhBjDpb,KAAAqb,oBACEC,eACFtb,KAAC+O,SAAA,EAED/O,KAAAma,uBAA6B,IAAAhP,EAE7BnL,KAAKiS,YACLjS,KAAKub,WAAS,qCACdvb,KAAKwb,oBAAY,qCACjBxb,KAAKyb,gCAAqB,KAC1Bzb,KAAK0b,mBAEL1b,KAAK2b,yBACL3b,KAAK4b,YACL5b,KAAK2O,aAILuM,EAAKhO,EAAiB+H,MAAG6C,EAAO+D,SAAeX,GAC/Clb,KAAK2L,IAAAwP,EAAAD,EAA0BvP,MAAA,IAAcK,EAC7ChM,KAAK2T,OAAOuH,EAAUvH,OACtB3T,KAAK6P,UAAQqL,EAAOrL,UAEpB7P,KAAAyT,mBAAgByH,EAAyBzH,mBACzCzT,KAAA2a,+BAAqCO,EAAMP,+BAC5C3a,KAAA8b,yBAAAX,EAAAD,EAAAY,0BAMD9b,KAAA+b,YAAWZ,EAAAD,EAAAa,kBAAX5B,uBAAAgB,EAAAD,EAAAf,yBAAA,IAAAhP,OACE6Q,gBAAmBb,EAACD,EAAAc,iBACtBhc,KAACic,qBAAAd,EAAAD,EAAAe,2BAMDrM,oBAA+BuL,EAAAD,EAAAtL,sBAAA,QAC7B6C,kBAAoB0I,EAAQD,EAACzI,wBAC7B3C,iBAAcqL,EAAWD,EAAgBpL,mBAAA,IAAAoC,OACzC9C,QAAK+L,EAAUD,EAAA9L,UAAA,IAAA0C,EACjB9R,KAACqP,MAAA8L,EAAAD,EAAA7L,QAAA,IAAAX,EAAA1O,wEAMDhB,OAAAuO,eAAWuK,EAAA7Y,UAAA,cAAX,WACE,OAAOe,KAAEkc,8CACVlc,KAAA2L,IAAAC,KAAA,WAAA5L,KAAAkc,SAMDlc,KAAAmX,uBACS,EACT2D,cAAC,0BAOehD,EAAA7Y,UAAA,kCAEPe,KAAA2T,QAAA3T,KAAmB2T,OAAQ1Q,QAAC,gBAE7B,gBACL,kEAZF,OAAAjD,KAAAub,gBAmBD,SAAAjR,GACQA,IACPtK,KAAAub,WAAAjR,EAMDtK,KAAAwb,oBAA2ClR,EACrCtK,KAAE2L,IAAOC,KAAC,cAAAtB,GACZtK,KAAKmX,wBAGN,EACH2D,cAAC,4DAZAtN,IAAA,WAkBD,OAAAxN,KAAAwb,yBACE,SAAWlR,GACZA,IAMDtK,KAAAwb,oBAAuDlR,EACjDtK,KAAA2L,IAAOC,KAAK,uBAAgBtB,GAC9BtK,KAAAmX,wBAIA,gBACD,0BACSW,EAAM7Y,UAAA,sCACf,WAED,OAAKe,KAAAyb,qCAEL,SAAKnR,GACN,iBAAAA,IApBAA,GAAA,EA+BDA,GAAA,EACQA,EAAqB,GAAKA,EAAQ,OACxCA,EAAY,iGACbtK,KAAAmX,YAWwB4D,YAAA,gBAAA,wDACvBvN,IAAK,WACN,IAAAkH,EAAA1U,KAAAiS,SAAA,oBASD,OAAAjS,KAAA0b,gBAAWS,OAAAzH,GAAAA,EAAAzQ,MAAoB,uBACvB,gBACC,6CACR,IAAA,SAAA8M,EAAA,EAAAA,EAAA9Q,UAAAgD,OAAA8N,IASM2D,EAAA3D,GAAA9Q,UAAA8Q,QAAwB2K,gBAAAxO,EAAAkP,SAAiCrc,MAAAmN,GAAAlN,KAAA0b,iBAAAS,OAAAzH,+DAC9DlH,IAAK,WACN,IAAAiI,EAAAzV,KAAAiS,SAAA,0BAMD,OAAAjS,KAAA2b,sBAAWQ,OAAA1G,GAAOA,EAAAxR,MAAA,uBACT,gBACC,MAEThF,UAAAod,wBAAA,mDAAAC,EAAAvL,GAAA9Q,UAAA8Q,GAgBC/Q,KAAM2b,sBAAqCzO,EAAKkP,SAAMrc,MAAsBmN,GAAElN,KAAQ2b,uBAAOQ,OAAcG,2BAE3FxE,EAAC7Y,UAAA,eACf,WACD,OAAAe,KAAA4b,SAAAW,KAAA,SAAAC,EAAAC,GAEI,OAAWD,EAAGrQ,SAAAsQ,EAAAtQ,UAAA,EAAAqQ,EAAArQ,SAAAsQ,EAAAtQ,SAAA,EAAA,KAInB4O,YAAY,gBACH,MAGL9b,UAAwBgP,UAAM,SAAAyO,EAAAvQ,EAAAwQ,GAClC,IAAMhP,EAAUgP,GAAcpb,KAAAmb,EAAAvQ,SAAAA,EAAAE,IAAAsQ,GAAAD,EAC9B,GAAgB/O,GAAOA,EAAPtB,IAAhB,GAGI9K,OACFoM,EAACpM,KAAA2L,EAAAC,QAGEQ,EAAAxB,WACHwB,EAAOxB,SAAM,GAef,IAAM,IAbPyQ,GAAA,EAYM/O,EAAA7N,KAAA4b,SACK7K,EAAW,EAAA8L,EAAOhP,EAAiBkD,EAAQ8L,EAAG5Z,OAAe8N,IAErE,GADU8L,EAAA9L,GACLxP,OAAUoM,EAAApM,KAAA,CACfqb,GAAO,EACR,MAICA,KACE7Z,KAAQ4K,QAhCP3N,KAAO2L,IAAApL,MAAA,gDAmCXtB,UAAA6d,aAAA,SAAAJ,GACF,IAAAnb,EAAA,iBAAAmb,EAAAA,EAAAA,EAAAnb,KAMM,GAAAA,GASA,IAAA,IALNsM,EAAA7N,KAAA4b,SAKMnW,EAAA,EAAAA,EAAAoI,EAAe5K,OAAtBwC,IACQ,GAAAoI,EAAmBpI,GAAQlE,OAAAA,EAAA,CAC3BsM,EAAsB3K,OAAOuC,EAAA,GAE7B,YAZFzF,KAAE2L,IAAOpL,MAAG,oDAeRtB,UAAA8d,WAAA,SAAA/J,GACNA,IACDhT,KAAAsb,YAAA,YAAAtI,IASH8E,EAAA7Y,UAAW+d,gBAAA,SAAAC,EAAS1b,OAClB2b,EAAkC,iBAA3BD,EAA2BA,GAAAtQ,SAAAsQ,EAAA1b,KAAAA,GACnC4b,GAAAD,IAAAA,EAAAvQ,WAAAuQ,EAAA3b,+BAFD,SAOmBvB,KAAAsb,YAPnB,SAOmB4B,EACjBld,KAAI2L,IAAAC,KAAA,mBAAiBuR,EAAA,OAAAD,EAAAvQ,mBAEpBY,eAAAuK,EAAA7Y,UAAA,aACFuO,IAAA,WAKM,MAAA,0BAENuN,YAAA,EAEMD,cAAA,IAKAhD,EAAA7Y,UAAAme,YAAc,SAArBC,EAAAnR,QACiB,IAAXmR,IAAwBA,GAAA,QAC7B,IAAAnR,IAAAA,EAAA,KAEMmR,GACHrd,KAAOiO,UAAS,IAAAhC,EAAeC,OAI3BjN,UAAgBqe,gBAAU,WAChCtd,KAAsBiO,UAAQ,IAARlB,MACf9N,UAAAse,gBAAA,eAEJte,UAAAue,eAAA,gBAAC7R,IAAO,IAAIF,KAEZxM,UAAA8X,UAAA,SAAAjU,KACFA,GAAA9C,KAAA2O,UAAA5L,KAAAD,IAOHgV,EAAA7Y,UAAkBkY,QAAA,eAChB,IAAIpG,EAAA,EAAA0M,EADNzd,KAAA2O,UACoCoC,EAAK0M,EAAOxa,OAAA8N,IAAA,KAC5CjO,EAAA2a,EAAc1M,GAChB,IAEAjO,EAAO9C,wEAzbMhB,OAAAuO,eAAAuK,EAAgD,YANpDtK,IAAA,WAgdgE,OAP7E,OAAAsK,EAAA4F,mBAOE5F,EAAY4F,qBAA+D5F,EAAA4F,kBANpE3C,YAAO,EAEPD,cAAA,IAMLhD,OAEK4F,iBAAY,OACjB5F,cAAeA,MACjB3E,EAAC,kBACH,SAAC/B,EAAAa,EAAA4B,EAAArT,EAAAM,QAAA,IAAA+S,IAAAA,GAAA,QAdY,IAAArT,IAAAA,EAAgB,WAkB7B,IAAAM,IAAAA,EAAA,MAOEd,KAAAoR,SAAA,EAFQpR,KAAA6T,iBAAA,EAGN7T,KAAKoR,QAASA,EACdpR,KAAKiS,SAASA,EACdjS,KAAK6T,gBAAiBA,EACvB7T,KAAAQ,UAAAA,EAEMR,KAAAc,QAAAA,QAKLqS,iBAAYA,MACd0G,EAAC,WAEM,SAAAA,EAAAnT,EAAAmG,EAAPqL,GACElY,KAAK2d,6BAAU,sEACb1J,OAAKvN,EACP1G,KAAC6M,OAAAA,EAED7M,KAAAkY,kBAAYA,GAAA,IAAA5K,SAGPuM,EAAA5a,UAAAoZ,QAAA,SAAPpL,GAKE,OAJKA,IACHjN,KAAAiU,OAAUhH,KAAMA,GAGbjN,MAEP6Z,EAAC5a,UAAA+Z,UAAA,SAAAnV,GAWC,OAHKA,IACD7D,KAAKiU,OAAGpQ,OAAAA,GAEX7D,QAGCf,UAAe2e,eAAY,SAAAhL,GAC7B,IAAC5S,KAAA6d,kBAAAjL,GAEG,MAAC,IAAAlJ,MAAY,eAAoB1J,KAAA2d,8BAIhC,OAFN3d,KAAAiU,OAAAjH,aAAA4F,EAEM5S,QAEEf,UAAO6e,kBAAkB,SAAAvc,EAAAwc,GAChC,IAACxc,EAED,MAAO,IAAKmI,MAAA,gBAGP,IAAAqU,IAAA/d,KAAA6d,kBAAPE,GACM,MAAA,IAAQrU,MAAQ,MAAI1J,KAAQ2d,8BAIhC,OAFA3d,KAACqZ,YAAA,QAAA9X,EAAAwc,GAEG/d,QAEHf,UAAAma,WAAA,SAAAtY,GASI,OAPAA,IACLd,KAAOiU,OAAKnT,QAAAA,GAMPd,QAEAf,UAAc+e,OAAS,SAAQC,EAAKC,MACvCD,GAAY,IAAAA,EAAA,GACb,MAAA,IAAAvU,MAAA,0DAGD,GAAAwU,GAAY,KAAAA,EAAA,IACb,MAAA,IAAAxU,MAAA,oEAUC1J,KAAIiU,OAAAkK,IAAYF,EAAI,IAAcC,EAChCle,QAGKf,UAAK+d,gBAAA,SAAAC,EAAA1b,GACb,IAAA2b,EAAA,iBAAAD,EAAAA,GAAAtQ,SAAAsQ,EAAA1b,KAAAA,GASM,OAAA2b,IAAAA,EAAAvQ,UAAqBuQ,EAA5B3b,YAGI8X,YAAY,QAAA6D,SAFVld,QAMGf,UAAAmf,mBAA6B,SAAAC,EAAAjV,GAY/B,OAXJiV,GAAAjV,GAEDpJ,KAAOqZ,YAAK,qBAAAkB,cAAA8D,EAAAjV,YAAAA,IASPpJ,QAEGf,UAASqf,sBAAmB,SAAiBC,EAAGC,MACtDD,EAAK,CACN,IAAAle,GAAAoe,eAAAF,GAEMC,IACRne,EAAAme,MAAAA,GAGKxe,KAAEqZ,YAAQ,SAAAhZ,GAEd,OAACL,MAGH6Z,EAAC5a,UAAAyf,qBAAA,SAAAC,EAAAH,GAEM,GAAAG,EAAA,CAAQ,IAAAjS,GAAiBkS,kBAAAD,QAAjBL,sBAAA5R,EAAA8R,kBAENvf,UAAK4f,SAAA,SAAAvU,UACbA,IAUMtK,KAAAiU,OAAA3J,MAAAA,GAEHtK,QAGOf,UAAQ6f,QAAO,WAExB,IAAC,IADC9E,KACDjJ,EAAA,EAAAA,EAAA9Q,UAAAgD,OAAA8N,IAEKiJ,EAAAjJ,GAAS9Q,UAAW8Q,GAG1B,YADEkD,OAAK+F,KAAO9M,EAASkP,SAAIrc,MAAOmN,GAAAlN,KAAAiU,OAAA+F,MAAAmC,OAAAnC,IACjCha,MAGH6Z,EAAC5a,UAAAoa,YAAA,SAAA9X,EAAA+I,EAAAgM,EAAAyI,GAEM,IAAAxd,QAAA3C,IAAA0L,GAAe,MAAtBA,EACM,OAAAtK,KAEHA,KAAAiU,OAAAvH,OAED1M,KAAOiU,OAAKvH,SAGP,IAAA1G,EAAAoM,KAAAgB,MAAAlG,EAAAmF,UAAP/H,EAAsBtK,KAAA6M,OAAeY,OAAAuR,eAAA7C,OAAA4C,OAAAzI,IAKnC,OAJKpJ,EAAC4H,QAAU9O,KACdhG,KAAKiU,OAAAvH,KAAAnL,GAAkByE,GAGlBhG,MAGF6Z,EAAA5a,UAAAggB,eAAP,SAA8DC,GAK5D,OAJIA,GACLlf,KAAA8e,QAAA,YAGM9e,QAEJf,UAAAkgB,eAAA,SAAA9b,GAMD,OAJIA,IACFrD,KAAAkY,kBAAa,YAAA7U,GAGVrD,QAEGf,UAAWsZ,OAAQ,SAAQ7K,QACjCb,OAAMkN,YAAa/Z,KAAQiU,OAAQjU,KAAIkY,kBAAkBxK,MAGpDzO,UAAQ4e,kBAAkB,SAAUvT,SAEzC,OAAC,EAGH,GAAAA,EAAOrH,OAAK,GAAAqH,EAAArH,OAAA,IACb,OAAA,EACF,IAAA,IAAAwC,EAAA,EAAAA,EAAA6E,EAAArH,OAAAwC,IAAA,CA7NY,IAAAW,EAAAkE,EAAAiK,WAAY9O,GAsOzB2Z,EAAAhZ,GAAA,IAAAA,GAAA,GAAAiZ,EAAAjZ,GAAA,IAAAA,GAAA,IAAAA,GAAA,IAAAA,GAAA,IACSkZ,EAAsB,KAADlZ,EACrB,IAAIgZ,IAAWC,IAAAC,EAwBvB,OAAA,EApBG,OAAM,uBAGKzF,QACR,oBACF3L,IAGDlO,KAAMmM,SAAW,GACjBnM,KAAKuB,KAAS,uCAEKtC,UAAWoN,IAAM,SAAUrK,EAAWsK,aAChDtK,EAAM6K,OAAQY,OAElBsD,EAAA,EAAAwO,EADC9R,EAAa4N,gBACdtK,EAAAwO,EAAAtc,OAAA8N,IAAA,CACH,IAACyO,EAAAD,EAAAxO,GACFyO,GAAAxd,EAAA0E,MAAAsT,KAAA1S,QAAAkY,GAAA,GAEOxd,EAAO0E,MAAAsT,KAAAjX,KAAAyc,GAElB,IAAAlE,EAAA7N,EAAA6N,gBA1BY,IAAA,IAAAvc,KAAAuc,EA8Bb,GAAAA,EAAAvc,GAAA,CASE,IAAAiH,EAAAoM,KAAAgB,MAAYlG,EAAAmF,UAAiDiJ,EAAwBvc,GAAA0O,EAAAuR,iBAAzE9R,EAAA4H,QAAA9O,KAAiDhE,EAAA0E,MAAAgG,KAAA3N,GAAAiH,GALrDsG,GAAAA,KAMN4B,OAGAA,4BAAYA,QACE,sBACSuR,EAAgB7E,QACpC,IAAD6E,IAACA,EAAA,WAAA,OAAAhP,KAAAiP,aACU,IAAV9E,IAAUA,EAAA,KACd,IAAAlL,EAAA1P,KAEMA,KAAAmM,SAAA,KAAPnM,KAAAuB,KAAA,yBACEvB,KAAA2f,sBACEC,4BACAC,gBAAeJ,iBACJ7E,cACP,gBACDlL,EAAAiQ,cAAA1c,OAAA,GACDyM,EAAIiQ,cAAMG,QAAeC,eAgExB,SA5DF9gB,UAAAoN,IAAA,SAAArK,EAAAsK,OAEDoD,EAAO1P,OACT,SAACO,GAGK,IADA,IAAAyf,EAAe,EACfzf,GACMA,EAAGO,SAAAP,EAAAO,QAAAmC,SACP+c,GAA2B,IAAXA,EAAiB9S,EAAAmH,YAAA9T,EAAAO,UAGjCP,EAAS0f,aAAK1f,EAAc0f,YAAOhd,SACrC+c,GAAS,IAAAA,EAAA9S,EAAAmH,YAAAjC,KAAAC,UAAA9R,EAAA0f,eAEX1f,EAAOA,EAAAK,aAEPof,GAGGhe,EAAQ0E,MAASgG,KAAI,gBAEnB,KACLwT,EAAQle,EAAA0E,MAAYwZ,OAAK,EAC1BC,EAAAngB,KAAA6f,kBAEGO,EAASpgB,KAAA2f,cAAYU,OAAA,SAAAnY,GAAA,OAAAA,EAAA8X,WAAAA,IAAA,GAxDlB,GAyDLI,IACAA,EAAKE,eAAAJ,GAGLE,EAAOG,WAAKve,EAAA0E,MAAoBoT,QAC1BnO,IAACC,KAAA,uCAA4BoU,GACnChe,EAAC4L,WAAA,IAEJ5L,EAAA4L,WAAA5N,KAAA4f,oBAAA/J,KAAA,SAAA2K,GAAA,OAAAA,EAAAlM,OAAA0L,GAAAQ,EAAArR,WAAAgR,EAAAzQ,EAAAtD,cAEOpK,EAAO2J,IAAAD,MAAA,2BAAAsU,GAChBhgB,KAAA2f,cAAA5c,KAAA,IAAA0d,EAAAT,EAAAhe,EAAAke,IACHle,EAAA4L,WAAC,IArEY5L,EAAA4L,UAkFJ,IANT5L,EAAA2J,IAAAD,MAAA,+BAAAsU,EAAA,aAKEhgB,KAAA4f,oBAA8B7c,MAA6BuR,KAAa0L,EAAA7Q,UAAAgR,IACzDngB,KAAG4f,oBAAS3c,OAAA,IACpBjD,KAAW4f,oBAAQE,QAKxBxT,GAAKA,KAGA8B,OAELA,uBAAqBA,MACvBqS,EAAC,WAEM,SAAAA,EAAAT,EAAAhe,EAAPke,GACElgB,KAAIggB,SAAYA,OACdU,SAAK1e,EACPhC,KAAC2gB,OAAAT,SAELO,EAAAxhB,UAACqhB,eAAA,SAAAJ,GAAAlgB,KAAA2gB,QAAAT,GAIDO,EAAAxhB,UAAA8gB,SAAA,WACS/f,KAAA0gB,SAAQha,MAAcwZ,MAAAlgB,KAAA2gB,OACtB3gB,KAAA0gB,SAAe7T,OAAAY,OAAA4B,MAAAP,QAAwB9O,KAAA0gB,SAAAha,QAEvC+Z,EAAAxhB,UAAAshB,WAAG,SAAVzG,GACQA,EAAA9Z,KAAA0gB,SAA0Bha,MAAAoT,OAE1B9Z,KAAA0gB,SAAYha,MAAQoT,KAAOA,WAK9B,oBACFtL,IAEDxO,KAAImM,SAAW,GAChBnM,KAAAuB,KAAA,+BAhBHiN,EAiBCvP,UAAAoN,IAAA,SAAArK,EAAAsK,GAjBY,IAqBbsU,EAAA5e,EAAA6K,OAAAY,OAAAqO,yBAAA,IAAA9Z,EAAA0E,MAAAgG,KArBa,iBAqBbkU,EAAA,CACS,IAAAC,EAAsBD,EAAAE,mBAAA9e,GAClB6e,IAmDZ7e,EAAA0E,MAAAgG,KA1EY,gBA0EZmU,GA/CGvU,GAAMA,kCAISkC,QACb,oBACAL,SACAhC,SAAM,QACN5K,KAAQ,uBAERtC,UAAYoN,IAAA,SAAArK,EAAAsK,OAEZyU,GACA,YACA,SACA,eACA,cACA,WAEI,UACF,OACF,SAEA,kGAUQ/e,EAAOqL,YAAQ2N,mCAEf,WACDtU,MAAAgG,KAzBP,WAyBO,OACD1K,EAAY6K,OAAOY,OACrBuT,EAACvT,EAAAsO,gBAEDiF,EACD,MAAA,IAAAtX,MAAA,gCAEJ,IAAA1D,EAAAgb,EAAA5N,MAAApR,EAAAxB,GAEO,GAAMwF,EAAC,CAChB,IAAAib,EAAA7O,KAAAgB,MAAAlG,EAAAmF,UAAA7R,EAAAiN,EAAAuR,eAAA7C,OAAA4E,KACF7T,EAAA4H,QAAAmM,KAAAjb,EAAA0G,OArDY1G,EAAW0G,SAyDxB1G,EAAA0G,KAAA,QAAAuU,GAEwBjf,EAAA0E,MAAAgG,KA1ClB,UA0CyC1G,MAIzCsG,wBAIO6B,QACK,sCAER,aACF,gCAEKlP,UAAMoN,IAAA,SAAArK,EAAAsK,cACAR,WACNA,GAAO,IAAA6J,cAAAC,YACV,QACF,IAAK,WACH,IACF,IAAK,MACL,OAAK,EACL,IAAK,QACL,OAAS,MACP,OACF,OAAA,MACE,OACH,OAAA,EACF,IAAA,QAED,OAAA,EAA0C,IAAA,QACjC,OAAA,EACR,IAAA,MAGD,IAAA,QAAiC,IAAA,IAC3B,IAAK,KACP,OAAO,EACR,QAEK,OAAY,YAUhBsL,EAAyBjP,EAAAhF,EAAepJ,EAAAgT,WAC9B,QAAQ5E,OACjBhF,EACF,OAAA4J,EAGF,IAAAsK,EAAA,QAAAlU,EAEOmU,EAAiB,KAAAnU,EAAA,IAChB3C,EAAG2H,EAAYmP,EAAAvd,GAClB,GAAAyG,EAEC,OAAS6W,EAAQ7W,EAAA4C,EAAAmU,UAAA/W,GAEtB,IAAM,IAAAvL,KAAWkT,EAEb,GAAA/E,EAAQgJ,WAAUnX,EAAA4W,cAAgByL,EAAWzL,gBAAezI,EAAA2H,QAAAhR,GAAA9E,EAAAyG,UAAA4b,EAAAne,UAC1D,OAAKke,EAAAlP,EAAkDlT,GAAlDmO,EAAAmU,UAAApP,EAAAlT,IAGZ,OAAA8X,MACCqD,EAAIlY,EAAqB0E,MACzBiF,EAAA3J,EAAQ2J,MACF3J,EAAA6K,OAAAY,OAAwBwE,YACtB,eAAK,gBA9BDA,EAAAqP,GAEZ,YADe,IAAbA,IAAsBA,EAAgB,KACvCC,EAAAL,EAAAjP,EAAA,MAAAqP,EAAA,SAAA,KA6B4BrP,EAAAiI,EAAArW,QAC3B2d,EAACD,EAAArH,EAAAxN,KAAA,WAED8U,GAAQ,IAAMA,EAAM,GAAAA,EAAAC,KACrB9V,EAAAC,KAAA,kDACF5J,EAAA4L,WAAA,QAEC,GAAiB,UAAjBsM,EAAQjN,KAGN,IAFH,IAAA1M,EAAA2Z,EAAAxN,KAAA,WAEW1K,EAAG4L,WAAArN,IAChB,IAAA2gB,EAAAjP,EAAAiI,EAAAjN,KAAA1M,EAAA0M,MAAA,KACHtB,EAAAC,KAAA,kDAACrL,EAAA0M,MAAAjL,EAAA4L,WAAA,GAIDrN,EAAAA,EAAAK,WAE2C,IAA9BsgB,EAA8BjP,EAAAiI,EAAAjN,KAAAiN,EAAArW,QAAA,KAe1C8H,EAAAC,KAAA,wCAAAsO,EAAAjN,KAAA,gBAAAiN,EAAArW,QAbQ7B,EAAA4L,WAAA,GAGLtB,GAAMA,iCAIY+B,QACf,oBACFC,IAEDtO,KAAImM,SAAW,GAChBnM,KAAAuB,KAAA,0BAhBH+M,EAiBCrP,UAAAoN,IAAA,SAAArK,EAAAsK,GAjBY,IAqBbsU,EAAA5e,EAAA6K,OAAAY,OAAAuO,gBAAA,GAAAha,EAAA0E,MAAAgG,KArBa,YAqBb1K,EAAA0E,MAAAgG,KAAA,UAAAgV,SAAAd,EAAA,CACS,IAAAc,EAAqBd,EAACe,WAAA3f,GACtB0f,GAAeA,EAAAze,OAAoB,IAqB3CjB,EAAA0E,MAAAgG,KA5CY,UA4CZgV,QAAAA,GAhBGpV,GAAMA,KAEHgC,wBAEKA,QACK,sCAEP,aACD,6BACCrP,UAAQoN,IAAU,SAACrK,EAAesK,OAEtCmB,EAACzL,EAAA6K,OAAAY,OACFmT,EAAAnT,EAAAwO,qBAED,IAAIja,EAAQ0E,MAAGgG,KAJV,aAIUkU,EAAA,CAChB,IAAAgB,EAAAhB,EAAAiB,eAAA7f,GACH4f,IAAC1U,EAAA2H,QAAA+M,EAAAE,WAAArU,EAAA6O,uBAvBYta,EAAA2J,IAAAC,KAAA,0EA2Bb5J,EAAA4L,WAAA,GAEwB5L,EAAA0E,MAAAgG,KAZf,YAYwCkV,GAI7CtV,GAAMA,KAELiC,OAGFA,kBAAAA,MACHE,EAAA,WAZA,SAYCA,IAZYzO,KAAAmM,SAAA,IAgBbnM,KAAAuB,KAAA,kCAEqCtC,UAAAoN,IAAA,SAAArK,EAAAsK,GAC3B,IAAAmM,EAA0BzW,EAAAqL,YAAA4N,sBAG3BxC,IACNzW,EAAA0E,MAAAgG,KAAA,sBAAA+L,GAGCnM,GAAKA,KAEJmC,OAGDA,uBAA2BA,QACZ,oBAEXuD,EAAgB+P,QAClBC,SACFhiB,KAACiiB,cAAA,EAEDjiB,KAAK+hB,SAAAA,SAEP/P,EAAC/S,UAAAqQ,KAAA,SAAAhF,GAEM,IAAAA,EACL,OAAW,KAGN,IAAA0X,EAAAhiB,KAAAgiB,MACC7S,EAAY7K,KAACK,IAAM8L,KAAAiP,MAAA1f,KAAAiiB,cAAA,GACrB9Z,GAASgH,UAAOA,EAAe7E,MAAKA,GAKxC,OAJE0X,EAAIjf,KAAOoF,GAAEnI,KAAS+hB,YACpBjC,aAEDmC,cAAA9S,EACFhH,EAAAgH,WAGI6C,EAAA/S,UAAAuO,IAAK,SAAZ0U,GACE,OAAKliB,KAAKgiB,MAAMviB,MAAA,EAAAyiB,IAEpBlQ,EAAA/S,UAAC4S,OAAA,SAAA1C,GA3CY,IAAA,IA2CZ6S,EAAAhiB,KAAAgiB,MA3CYthB,EAAA,EAAAA,EAAAshB,EAAA/e,OAAevC,IAoD5B,GAAAshB,EAAAthB,GAAAyO,YAAAA,EAGU,YAER6S,EAAA9e,OAAAxC,EAAA,MAKczB,UAAC2R,MAAA,gBACXoR,UAGFhQ,OAGAA,gBAAkBA,QACD,oBACXmQ,EAAqBJ,GAE3B/hB,KAAKiiB,cAAA,OACHF,SAAWA,EAsGhB,SApGe9iB,UAAKqQ,KAAa,SAAKhF,EAAW8X,SAE5C,OAAC,KACDpiB,KAAKqiB,kBACLL,EAAOhiB,KAAKgiB,MACb7S,EAAA7K,KAAAK,IAAA8L,KAAAiP,MAAA1f,KAAAiiB,cAAA,GAEDljB,EAAOiB,KAAAsiB,OAAUnT,GAClBoT,EAAAnQ,KAAAC,UAAA/H,GAEM,IAAPtK,KAAAwiB,MAAAzjB,EAkBCwjB,GAjBKviB,KAACiiB,cAAc9S,EAEZ6S,EAAKjf,KAAMoM,GAAcnP,KAAC+hB,UAC3B/hB,KAACyiB,OAACziB,KAAAsiB,OAASN,EAAAlC,0BAKX,YAED3Q,KAEMlQ,UAAWuO,IAAK,SAAA0U,SACrBliB,KAEJ,YADGqiB,cACDriB,KAAAgiB,MAAAviB,MAAA,EAAAyiB,GACDlS,IAAA,SAAOb,GACX,IAAApQ,EAAA2Q,EAAA4S,OAAAnT,GAEM,IACA,IAAAoT,EAAc7S,EAAAgT,KAAA3jB,GAGb,OAAaoQ,UAASA,EAAW7E,MADpB8H,KAAMgB,MAAAmP,EAAAlY,IAGvB,MAAS9J,GAET,OADImP,EAACiT,WAAgB5jB,GACf,QAIHshB,OAAA,SAAAlY,GAAA,OAAP,MAAAA,OACalJ,UAAQ4S,OAAK,SAAK1C,GAC7BnP,KAAKqiB,cACN,IAAAL,EAAAhiB,KAAAgiB,MASOvc,EAAAuc,EAAA1a,QAAA6H,GACN,GAAI1J,GAAM,EAAM,CACd,IAAI1G,EAAMiB,KAAGsiB,OAAKnT,GAClBnP,KAAK2iB,WAAA5jB,GACNijB,EAAA9e,OAAAuC,EAAA,OAIIxG,UAAA2R,MAAA,eACHlB,EAAK1P,KACPA,KAACgiB,MAAAY,QAAA,SAAAza,GAAA,OAAAuH,EAAAiT,WAAAjT,EAAA4S,OAAAna,MAACnI,KAAKgiB,UAETG,EAACljB,UAAAojB,YAAA,WAEOriB,KAAAgiB,QAARhiB,KAAAgiB,MAoBChiB,KAAA6iB,cAnBK7iB,KAACiiB,cAAA3d,KAAAK,IAAA5E,MAAAuE,MAAA,GAAA6X,OAAAnc,KAAAgiB,QAAA,MAGI/iB,UAAA0jB,WAAA,SAAA5jB,mBAECA,iBAKLE,UAAA4jB,YAAA,iBAAC7iB,gBAEAA,KAAO8iB,cACR9S,IAAA,SAAAjR,GACA,IACA,IAAKoQ,EAAKO,EAAKqT,aAAKhkB,GACxB,OAAAoQ,IAAgBO,EAAAiT,WAAA5jB,GACL,MAGf,MAAAwB,GAEkB,OAnHGmP,EAAAiT,WAAA5jB,GAmHE,QAEXshB,OAAK,SAAKlR,GAAW,OAAA,MAAAA,IACpBoN,KAAA,SAAcyG,EAAKlY,GAAE,OAAAkY,EAAAlY,UAE7BvK,GACD,WAGJ4hB,OAImCA,oBAAAA,QAMpB,SAAAc,YAEVC,EAAQC,EAAc/M,EAAA2L,QACX,IAAX3L,IAAYA,EAAA,2BACb,IAAA2L,IAAAA,EAAA,IAAC,IAAArS,EAAWuT,EAAA9jB,KAAAa,KAAA+hB,IAAA/hB,KAEb,SADEoW,OAAOA,EAAM+M,EAAA,IACdzT,WALCwT,EAAiBD,GAcdC,EAAAE,YAAA,WACL,IACD,IAAAhU,EAAAzQ,OAAA0kB,aAEMC,EAAA,mBAIA,OAHLlU,EAAOmU,QAAOD,EAAAA,GACflU,EAAAoU,WAAAF,IAEM,EACL,MAAOpjB,UACE,MAIFjB,UAAaujB,MAAA,SAAgBzjB,EAAAuL,GACrC3L,OAAA0kB,aAAAE,QAAAxkB,EAAAuL,MAGYrL,UAAUyjB,KAAA,SAAU3jB,GAChC,OAAAJ,OAAA0kB,aAAAI,QAAA1kB,MAGQE,UAAa6jB,YAAY,WACjC,IAAApT,EAAA1P,KACH,OAAAhB,OAAAmX,KAACxX,OAAA0kB,cA7CmChD,OAAA,SA6CnCthB,GAAA,OAAA,IAAAA,EAAAuI,QAAAoI,EAAA0G,WAID8M,EAAAjkB,UAAAwjB,OAAA,SAAA1jB,GAAAJ,OAAA0kB,aAAAG,WAAAzkB,IACSmkB,EAAAjkB,UAAAqjB,OAAK,SAAZnT,GACE,OAAAnP,KAAAoW,OAAAjH,KAGQlQ,UAA0B8jB,aAAA,SAAAhkB,UAC7B+U,SAAiB/U,EAAM2kB,OAAN1jB,KAAAoW,OAAMnT,QAAN,4BAIPigB,QACd,oBAEDS,cAEc1kB,UAAqBmU,MAAA,SAAApR,EAAAxB,YAEbojB,EAAAC,WAClB7d,KACE+K,EAAM,EAAC+S,GAFK,iBAAAD,GAAAA,GAAAA,OAES9S,EAAW+S,EAAQ7gB,OAAK8N,IAAU,KACvDgT,EAAAD,EAAY/S,KACZhO,MAASxB,KAAOwiB,iBAyBvBC,EAAAhiB,EAAAqL,YADG,0BAENrL,EAAAqL,YAFM,0BAEL/N,EAAA8B,kBAAAZ,EAAA,IA/CY,IAAAwjB,EAmDb,MAAA,IAAAta,MAAA,+CA4BC,IAAA5I,EAAA,iBAAA,EAAAN,OAAA5B,EA3BQ,OACDqO,KAAC+W,EAAaziB,MAAS,QACzBT,QAAOkjB,EAAKljB,SAAAN,EAAAM,SAAAA,EACbmf,qBA9BEgE,GAKG,IAAA,IAFLC,KAEKnT,EAAA,EAAAoT,EAAmCF,EAAAlT,EAAwBoT,EAAClhB,OAAA8N,IAAA,CAE5D,IAAAqT,EAAoCD,EAAQpT,GAC9CmT,EAAQnhB,MACRxB,MAAS6iB,EAAAtkB,MAPG,eAO0BkF,QAAI,IAP9B,eASX6e,WAAaD,EAAAQ,EAAA3d,MACV4d,UAAUD,EAAArjB,IACjBujB,YAAAF,EAAA3iB,MAAA,EAEYC,OAAG0iB,EAAO1iB,QAAU,IAG/B,OAAOwiB,GAYRF,EAAA3jB,aAIEsjB,0BAEaA,QACF,kCAGN1kB,UAAS0iB,WAAM,SAAqB3f,kBACnC+B,SAAAoC,4BACJ,yBAEGA,qBAAgB,kBACVlD,OAAA,YACN,EAAOwC,EAAQS,EAAAjD,OAAYwC,MAC1BA,GAAAe,IACJkb,EAAA3e,MACFwhB,UAAA9e,EACFlE,KAAA2E,EAAAT,GAAAe,IAAAvC,MAAA,KAAA,GAEc+O,QAAA9F,EAAAiI,aAAAjP,EAAAT,GAAAe,OAElBN,EAAAT,GAAA+e,WA5BY9C,EAAA3e,MAgCbwhB,UAAA9e,EAAAlE,KAAA,aAwBCyR,QAAA9F,EAAAmH,YAAAnO,EAAAT,GAAA+e,WAAA5iB,aAlBG,OAAM8f,iCAIW+C,QACQ,oBACvBC,KAgCN,SA7B0BzlB,UAAA4iB,eAA0B,SAAO7f,OACrD+B,WAAA4gB,YAAAnjB,SAEE,OAAA,KAEJ,IAACkT,EAAA1S,EAAA6K,OAAAY,OAAAuR,eAED4C,GACDE,WAAA6C,UAAA/Q,UACHgR,UAAC,WAADpjB,SAAAqjB,SAACC,KAAAtjB,SAAAujB,SAxBYC,KAAAxjB,SAAAwjB,MAAA,KAAAxjB,SAAAwjB,KAAAlR,SAA2BtS,SAAAwjB,KAAA,IAAA,GA4BxCnS,KAAArR,SAAAyjB,SAIExQ,QAAAvH,EAAAsH,WAAYzQ,SAAiB6Q,OAAAF,GAAAwQ,aAAAhY,EAAAiY,iBAAA3jB,SAAA4jB,OAA2B5f,UAAA,GAAAkP,IAKzD,OAHO3Q,SAASshB,UAAkC,KAA3BthB,SAAcshB,WACnCzD,EAAAyD,SAAAthB,SAAAshB,UAEFzD,GAOD8C,OAgHCA,4BAAAA,MA/GQY,EAAA,2BAE6BlP,EAAArE,QACF,IAA1BA,IAA0BA,EAAA,KAChC/R,KAAMqP,MAAA,IAAA6T,EAA2B,IAAA9M,EAAkBrE,GAEnD/R,KAAIiS,SAAW,IAAYiR,EAAM,WAAA9M,EAAA,gCAIfkP,QACA,kCAIRrmB,UAAeyT,YAAiB,SAAMrP,EAAcqK,EAAE+B,cAOzDvN,EAAAqjB,OAoBHC,MAEM,MACN1kB,EAAMykB,EAAAE,aACMF,EAAA7hB,aACZuP,EAACsS,EAAAtS,UAAC/Q,IAASwjB,GAAkB,IAAhBzS,IACN,iCACH,UACA/Q,IAAUyjB,GAAC1S,GAGd,GAAAA,EAAA,KAAAA,EAAA,IAAA,CACF,IAAA2S,EAAAL,EAAAK,aAED,GAAQA,GAAmBA,EAAS9kB,QACrCA,EAAA8kB,EAAA9kB,aAGQ,GAAY4C,IAAiB,IAAAA,EAAA4D,QAAA,WAChC,IACMxG,EAASsR,KAAKgB,MAAM1P,GAAA5C,QAGxB,MAAMZ,GACJY,EAAA4C,WAfQ,SAAVL,EAAOqQ,OAAgB,IAAA,OAkB3BhG,EAAgBuF,GAAK,IAAAnS,GAAA,GAAA4C,WA9CpBmiB,GASH,IAAA,IAHE3S,KAGSnC,EAAO,EAAC+U,GAFlBD,GAAA,IAAA5hB,MAAA,QAEkB8M,EAAA+U,EAAA7iB,OAAA8N,IAAA,CAEf,IAAOgV,EAAeD,EAAW/U,GAC/BiV,EAA2BD,EAAYze,QAAC,MACpC0e,EAAsB,IAExB9S,EAAgB6S,EAAYvgB,UAAG,EAAAwgB,GAAArQ,cAZtC3Q,QAAA,qCAAA,KAYsC+gB,EAAAvgB,UAAAwgB,EAAA,IAGtC,OAAA9S,GA4BsBqS,EAAAU,uBAAAV,EAAAU,iCArDI,YAApB,WAGG,qBACF,KACF,EA6EPllB,EAAAsC,EAAAtC,MAAA,IAAAsC,EAAAtC,IAAAuG,QAAA,KAAA,IAAA,KAAA,gBAAAwL,mBAAAzP,EAAAsQ,QAEG4R,WA7Be3R,EAAWF,EAAQ3S,GACpC,IAACwkB,EAAA,IAAAjiB,sBAAK4iB,KAAEX,GACNA,EAAG/hB,KAAGkQ,EAAK3S,GAAA,GACZwkB,EAAAY,iBAAA,yBAAAvS,GAES,SAAFF,GACF6R,EAAAY,iBAAgB,eAAA,qBAIvB,oBAAAC,gBAEQC,GAAc,GACdd,EAAG,IAAAa,gBACD5iB,KAAAkQ,EAAA,UAAAlS,SAAAqjB,SAAA9jB,EAAAiE,QAAA,SAAA,SAAAjE,IAIPwkB,EAAA,KAGAA,MACEe,QAAO,KAGTf,GAIaliB,EAASuQ,UAACvQ,EAAAqQ,QAAA,OAAA3S,GAC3B,IAAIwkB,EACA,OAAO7X,GAAGA,EAAM,IAAA,uBAGhBwY,KAAgBX,IAClBA,EAAAgB,mBAAiB,WAClB,IAAAhB,EAAAiB,YAEAC,EAAAd,EAAAJ,KAEJA,EAAAmB,WAAA,aAhHYnB,EAAAoB,UAAA,WAAA,OAAAF,EAAAf,EAAwBH,IAoHpCA,EAAAjjB,QAAA,WAAA,OAAAmkB,EAAA,QAAAlB,IACCA,EAAAqB,OAAA,WAAA,OAAAH,EAAAd,EAAAJ,IACMc,EACF1jB,WAAW,WAAC,OAAA4iB,EAAA9hB,KAAAJ,EAAAqJ,OAAA,KAKV6Y,EAAC9hB,KAAIJ,EAAWqJ,qBAKpBma,yBAAYA,aAwCd,GAAiB,oBAAb9iB,SAAJ,CAGA+T,EAAC7Y,UAAAse,gBAAA,WAEO2F,EAAeE,gBACfpjB,KAACoP,QAAA,IAAkBkW,EACnBxO,EAACE,yBAA2BhX,MAC5BA,KAACmX,YAaR,IAAA0E,EAAc/D,EAAkB+D,SAC9B5J,EA3DH,WACE,IAAMlO,WAAUA,SAAAoC,qBAChB,OAAQ,KAIN,IAAA,IAFHD,EAAAnC,SAAAoC,qBAAA,UAEUV,EAAQ,EAAKA,EAAAS,EAAcjD,OAAAwC,IACpC,GAAOS,EAAAT,GAAAe,KAAAN,EAAAT,GAAAe,IAAAc,QAAA,mBAAA,EACR,OAAA4F,EAAAiY,iBAAAjf,EAAAT,GAAAe,IAAAvC,MAAA,KAAA6iB,cAqBG,+MAEe9C,EAAA+C,GACjB,IAACrO,EAAAd,EAAAoP,QAAAxO,yBAAA,IAAA9O,MAAAsa,EAAAljB,UAAAimB,OAAA9T,QAAA,gBAAA,WACDyF,EAAAR,kBAAA,0BAAA8L,EAEItL,EAAQH","file":"exceptionless.min.js","sourcesContent":["/**\n * https://github.com/csnover/TraceKit\n * @license MIT\n * @namespace TraceKit\n */\n(function(window, undefined) {\nif (!window) {\n    return;\n}\n\nvar TraceKit = {};\nvar _oldTraceKit = window.TraceKit;\n\n// global reference to slice\nvar _slice = [].slice;\nvar UNKNOWN_FUNCTION = '?';\n\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error#Error_types\nvar ERROR_TYPES_RE = /^(?:[Uu]ncaught (?:exception: )?)?(?:((?:Eval|Internal|Range|Reference|Syntax|Type|URI|)Error): )?(.*)$/;\n\n/**\n * A better form of hasOwnProperty<br/>\n * Example: `_has(MainHostObject, property) === true/false`\n *\n * @param {Object} object to check property\n * @param {string} key to check\n * @return {Boolean} true if the object has the key and it is not inherited\n */\nfunction _has(object, key) {\n    return Object.prototype.hasOwnProperty.call(object, key);\n}\n\n/**\n * Returns true if the parameter is undefined<br/>\n * Example: `_isUndefined(val) === true/false`\n *\n * @param {*} what Value to check\n * @return {Boolean} true if undefined and false otherwise\n */\nfunction _isUndefined(what) {\n    return typeof what === 'undefined';\n}\n\n/**\n * Export TraceKit out to another variable<br/>\n * Example: `var TK = TraceKit.noConflict()`\n * @return {Object} The TraceKit object\n * @memberof TraceKit\n */\nTraceKit.noConflict = function noConflict() {\n    window.TraceKit = _oldTraceKit;\n    return TraceKit;\n};\n\n/**\n * Wrap any function in a TraceKit reporter<br/>\n * Example: `func = TraceKit.wrap(func);`\n *\n * @param {Function} func Function to be wrapped\n * @return {Function} The wrapped func\n * @memberof TraceKit\n */\nTraceKit.wrap = function traceKitWrapper(func) {\n    function wrapped() {\n        try {\n            return func.apply(this, arguments);\n        } catch (e) {\n            TraceKit.report(e);\n            throw e;\n        }\n    }\n    return wrapped;\n};\n\n/**\n * Cross-browser processing of unhandled exceptions\n *\n * Syntax:\n * ```js\n *   TraceKit.report.subscribe(function(stackInfo) { ... })\n *   TraceKit.report.unsubscribe(function(stackInfo) { ... })\n *   TraceKit.report(exception)\n *   try { ...code... } catch(ex) { TraceKit.report(ex); }\n * ```\n *\n * Supports:\n *   - Firefox: full stack trace with line numbers, plus column number\n *     on top frame; column number is not guaranteed\n *   - Opera: full stack trace with line and column numbers\n *   - Chrome: full stack trace with line and column numbers\n *   - Safari: line and column number for the top frame only; some frames\n *     may be missing, and column number is not guaranteed\n *   - IE: line and column number for the top frame only; some frames\n *     may be missing, and column number is not guaranteed\n *\n * In theory, TraceKit should work on all of the following versions:\n *   - IE5.5+ (only 8.0 tested)\n *   - Firefox 0.9+ (only 3.5+ tested)\n *   - Opera 7+ (only 10.50 tested; versions 9 and earlier may require\n *     Exceptions Have Stacktrace to be enabled in opera:config)\n *   - Safari 3+ (only 4+ tested)\n *   - Chrome 1+ (only 5+ tested)\n *   - Konqueror 3.5+ (untested)\n *\n * Requires TraceKit.computeStackTrace.\n *\n * Tries to catch all unhandled exceptions and report them to the\n * subscribed handlers. Please note that TraceKit.report will rethrow the\n * exception. This is REQUIRED in order to get a useful stack trace in IE.\n * If the exception does not reach the top of the browser, you will only\n * get a stack trace from the point where TraceKit.report was called.\n *\n * Handlers receive a TraceKit.StackTrace object as described in the\n * TraceKit.computeStackTrace docs.\n *\n * @memberof TraceKit\n * @namespace\n */\nTraceKit.report = (function reportModuleWrapper() {\n    var handlers = [],\n        lastException = null,\n        lastExceptionStack = null;\n\n    /**\n     * Add a crash handler.\n     * @param {Function} handler\n     * @memberof TraceKit.report\n     */\n    function subscribe(handler) {\n        installGlobalHandler();\n        handlers.push(handler);\n    }\n\n    /**\n     * Remove a crash handler.\n     * @param {Function} handler\n     * @memberof TraceKit.report\n     */\n    function unsubscribe(handler) {\n        for (var i = handlers.length - 1; i >= 0; --i) {\n            if (handlers[i] === handler) {\n                handlers.splice(i, 1);\n            }\n        }\n\n        if (handlers.length === 0) {\n            window.onerror = _oldOnerrorHandler;\n            _onErrorHandlerInstalled = false;\n        }\n    }\n\n    /**\n     * Dispatch stack information to all handlers.\n     * @param {TraceKit.StackTrace} stack\n     * @param {boolean} isWindowError Is this a top-level window error?\n     * @param {Error=} error The error that's being handled (if available, null otherwise)\n     * @memberof TraceKit.report\n     * @throws An exception if an error occurs while calling an handler.\n     */\n    function notifyHandlers(stack, isWindowError, error) {\n        var exception = null;\n        if (isWindowError && !TraceKit.collectWindowErrors) {\n          return;\n        }\n        for (var i in handlers) {\n            if (_has(handlers, i)) {\n                try {\n                    handlers[i](stack, isWindowError, error);\n                } catch (inner) {\n                    exception = inner;\n                }\n            }\n        }\n\n        if (exception) {\n            throw exception;\n        }\n    }\n\n    var _oldOnerrorHandler, _onErrorHandlerInstalled;\n\n    /**\n     * Ensures all global unhandled exceptions are recorded.\n     * Supported by Gecko and IE.\n     * @param {string} message Error message.\n     * @param {string} url URL of script that generated the exception.\n     * @param {(number|string)} lineNo The line number at which the error occurred.\n     * @param {(number|string)=} columnNo The column number at which the error occurred.\n     * @param {Error=} errorObj The actual Error object.\n     * @memberof TraceKit.report\n     */\n    function traceKitWindowOnError(message, url, lineNo, columnNo, errorObj) {\n        var stack = null;\n\n        if (lastExceptionStack) {\n            TraceKit.computeStackTrace.augmentStackTraceWithInitialElement(lastExceptionStack, url, lineNo, message);\n    \t    processLastException();\n        } else if (errorObj) {\n            stack = TraceKit.computeStackTrace(errorObj);\n            notifyHandlers(stack, true, errorObj);\n        } else {\n            var location = {\n              'url': url,\n              'line': lineNo,\n              'column': columnNo\n            };\n\n            var name;\n            var msg = message; // must be new var or will modify original `arguments`\n            if ({}.toString.call(message) === '[object String]') {\n                var groups = message.match(ERROR_TYPES_RE);\n                if (groups) {\n                    name = groups[1];\n                    msg = groups[2];\n                }\n            }\n\n            location.func = TraceKit.computeStackTrace.guessFunctionName(location.url, location.line);\n            location.context = TraceKit.computeStackTrace.gatherContext(location.url, location.line);\n            stack = {\n                'name': name,\n                'message': msg,\n                'mode': 'onerror',\n                'stack': [location]\n            };\n\n            notifyHandlers(stack, true, null);\n        }\n\n        if (_oldOnerrorHandler) {\n            return _oldOnerrorHandler.apply(this, arguments);\n        }\n\n        return false;\n    }\n\n    /**\n     * Install a global onerror handler\n     * @memberof TraceKit.report\n     */\n    function installGlobalHandler() {\n        if (_onErrorHandlerInstalled === true) {\n            return;\n        }\n\n        _oldOnerrorHandler = window.onerror;\n        window.onerror = traceKitWindowOnError;\n        _onErrorHandlerInstalled = true;\n    }\n\n    /**\n     * Process the most recent exception\n     * @memberof TraceKit.report\n     */\n    function processLastException() {\n        var _lastExceptionStack = lastExceptionStack,\n            _lastException = lastException;\n        lastExceptionStack = null;\n        lastException = null;\n        notifyHandlers(_lastExceptionStack, false, _lastException);\n    }\n\n    /**\n     * Reports an unhandled Error to TraceKit.\n     * @param {Error} ex\n     * @memberof TraceKit.report\n     * @throws An exception if an incomplete stack trace is detected (old IE browsers).\n     */\n    function report(ex) {\n        if (lastExceptionStack) {\n            if (lastException === ex) {\n                return; // already caught by an inner catch block, ignore\n            } else {\n              processLastException();\n            }\n        }\n\n        var stack = TraceKit.computeStackTrace(ex);\n        lastExceptionStack = stack;\n        lastException = ex;\n\n        // If the stack trace is incomplete, wait for 2 seconds for\n        // slow slow IE to see if onerror occurs or not before reporting\n        // this exception; otherwise, we will end up with an incomplete\n        // stack trace\n        setTimeout(function () {\n            if (lastException === ex) {\n                processLastException();\n            }\n        }, (stack.incomplete ? 2000 : 0));\n\n        throw ex; // re-throw to propagate to the top level (and cause window.onerror)\n    }\n\n    report.subscribe = subscribe;\n    report.unsubscribe = unsubscribe;\n    return report;\n}());\n\n/**\n * An object representing a single stack frame.\n * @typedef {Object} StackFrame\n * @property {string} url The JavaScript or HTML file URL.\n * @property {string} func The function name, or empty for anonymous functions (if guessing did not work).\n * @property {string[]?} args The arguments passed to the function, if known.\n * @property {number=} line The line number, if known.\n * @property {number=} column The column number, if known.\n * @property {string[]} context An array of source code lines; the middle element corresponds to the correct line#.\n * @memberof TraceKit\n */\n\n/**\n * An object representing a JavaScript stack trace.\n * @typedef {Object} StackTrace\n * @property {string} name The name of the thrown exception.\n * @property {string} message The exception error message.\n * @property {TraceKit.StackFrame[]} stack An array of stack frames.\n * @property {string} mode 'stack', 'stacktrace', 'multiline', 'callers', 'onerror', or 'failed' -- method used to collect the stack trace.\n * @memberof TraceKit\n */\n\n/**\n * TraceKit.computeStackTrace: cross-browser stack traces in JavaScript\n *\n * Syntax:\n *   ```js\n *   s = TraceKit.computeStackTrace.ofCaller([depth])\n *   s = TraceKit.computeStackTrace(exception) // consider using TraceKit.report instead (see below)\n *   ```\n *\n * Supports:\n *   - Firefox:  full stack trace with line numbers and unreliable column\n *               number on top frame\n *   - Opera 10: full stack trace with line and column numbers\n *   - Opera 9-: full stack trace with line numbers\n *   - Chrome:   full stack trace with line and column numbers\n *   - Safari:   line and column number for the topmost stacktrace element\n *               only\n *   - IE:       no line numbers whatsoever\n *\n * Tries to guess names of anonymous functions by looking for assignments\n * in the source code. In IE and Safari, we have to guess source file names\n * by searching for function bodies inside all page scripts. This will not\n * work for scripts that are loaded cross-domain.\n * Here be dragons: some function names may be guessed incorrectly, and\n * duplicate functions may be mismatched.\n *\n * TraceKit.computeStackTrace should only be used for tracing purposes.\n * Logging of unhandled exceptions should be done with TraceKit.report,\n * which builds on top of TraceKit.computeStackTrace and provides better\n * IE support by utilizing the window.onerror event to retrieve information\n * about the top of the stack.\n *\n * Note: In IE and Safari, no stack trace is recorded on the Error object,\n * so computeStackTrace instead walks its *own* chain of callers.\n * This means that:\n *  * in Safari, some methods may be missing from the stack trace;\n *  * in IE, the topmost function in the stack trace will always be the\n *    caller of computeStackTrace.\n *\n * This is okay for tracing (because you are likely to be calling\n * computeStackTrace from the function you want to be the topmost element\n * of the stack trace anyway), but not okay for logging unhandled\n * exceptions (because your catch block will likely be far away from the\n * inner function that actually caused the exception).\n *\n * Tracing example:\n *  ```js\n *     function trace(message) {\n *         var stackInfo = TraceKit.computeStackTrace.ofCaller();\n *         var data = message + \"\\n\";\n *         for(var i in stackInfo.stack) {\n *             var item = stackInfo.stack[i];\n *             data += (item.func || '[anonymous]') + \"() in \" + item.url + \":\" + (item.line || '0') + \"\\n\";\n *         }\n *         if (window.console)\n *             console.info(data);\n *         else\n *             alert(data);\n *     }\n * ```\n * @memberof TraceKit\n * @namespace\n */\nTraceKit.computeStackTrace = (function computeStackTraceWrapper() {\n    var debug = false,\n        sourceCache = {};\n\n    /**\n     * Attempts to retrieve source code via XMLHttpRequest, which is used\n     * to look up anonymous function names.\n     * @param {string} url URL of source code.\n     * @return {string} Source contents.\n     * @memberof TraceKit.computeStackTrace\n     */\n    function loadSource(url) {\n        if (!TraceKit.remoteFetching) { //Only attempt request if remoteFetching is on.\n            return '';\n        }\n        try {\n            var getXHR = function() {\n                try {\n                    return new window.XMLHttpRequest();\n                } catch (e) {\n                    // explicitly bubble up the exception if not found\n                    return new window.ActiveXObject('Microsoft.XMLHTTP');\n                }\n            };\n\n            var request = getXHR();\n            request.open('GET', url, false);\n            request.send('');\n            return request.responseText;\n        } catch (e) {\n            return '';\n        }\n    }\n\n    /**\n     * Retrieves source code from the source code cache.\n     * @param {string} url URL of source code.\n     * @return {Array.<string>} Source contents.\n     * @memberof TraceKit.computeStackTrace\n     */\n    function getSource(url) {\n        if (typeof url !== 'string') {\n            return [];\n        }\n\n        if (!_has(sourceCache, url)) {\n            // URL needs to be able to fetched within the acceptable domain.  Otherwise,\n            // cross-domain errors will be triggered.\n            /*\n                Regex matches:\n                0 - Full Url\n                1 - Protocol\n                2 - Domain\n                3 - Port (Useful for internal applications)\n                4 - Path\n            */\n            var source = '';\n            var domain = '';\n            try { domain = window.document.domain; } catch (e) { }\n            var match = /(.*)\\:\\/\\/([^:\\/]+)([:\\d]*)\\/{0,1}([\\s\\S]*)/.exec(url);\n            if (match && match[2] === domain) {\n                source = loadSource(url);\n            }\n            sourceCache[url] = source ? source.split('\\n') : [];\n        }\n\n        return sourceCache[url];\n    }\n\n    /**\n     * Tries to use an externally loaded copy of source code to determine\n     * the name of a function by looking at the name of the variable it was\n     * assigned to, if any.\n     * @param {string} url URL of source code.\n     * @param {(string|number)} lineNo Line number in source code.\n     * @return {string} The function name, if discoverable.\n     * @memberof TraceKit.computeStackTrace\n     */\n    function guessFunctionName(url, lineNo) {\n        var reFunctionArgNames = /function ([^(]*)\\(([^)]*)\\)/,\n            reGuessFunction = /['\"]?([0-9A-Za-z$_]+)['\"]?\\s*[:=]\\s*(function|eval|new Function)/,\n            line = '',\n            maxLines = 10,\n            source = getSource(url),\n            m;\n\n        if (!source.length) {\n            return UNKNOWN_FUNCTION;\n        }\n\n        // Walk backwards from the first line in the function until we find the line which\n        // matches the pattern above, which is the function definition\n        for (var i = 0; i < maxLines; ++i) {\n            line = source[lineNo - i] + line;\n\n            if (!_isUndefined(line)) {\n                if ((m = reGuessFunction.exec(line))) {\n                    return m[1];\n                } else if ((m = reFunctionArgNames.exec(line))) {\n                    return m[1];\n                }\n            }\n        }\n\n        return UNKNOWN_FUNCTION;\n    }\n\n    /**\n     * Retrieves the surrounding lines from where an exception occurred.\n     * @param {string} url URL of source code.\n     * @param {(string|number)} line Line number in source code to center around for context.\n     * @return {?Array.<string>} Lines of source code.\n     * @memberof TraceKit.computeStackTrace\n     */\n    function gatherContext(url, line) {\n        var source = getSource(url);\n\n        if (!source.length) {\n            return null;\n        }\n\n        var context = [],\n            // linesBefore & linesAfter are inclusive with the offending line.\n            // if linesOfContext is even, there will be one extra line\n            //   *before* the offending line.\n            linesBefore = Math.floor(TraceKit.linesOfContext / 2),\n            // Add one extra line if linesOfContext is odd\n            linesAfter = linesBefore + (TraceKit.linesOfContext % 2),\n            start = Math.max(0, line - linesBefore - 1),\n            end = Math.min(source.length, line + linesAfter - 1);\n\n        line -= 1; // convert to 0-based index\n\n        for (var i = start; i < end; ++i) {\n            if (!_isUndefined(source[i])) {\n                context.push(source[i]);\n            }\n        }\n\n        return context.length > 0 ? context : null;\n    }\n\n    /**\n     * Escapes special characters, except for whitespace, in a string to be\n     * used inside a regular expression as a string literal.\n     * @param {string} text The string.\n     * @return {string} The escaped string literal.\n     * @memberof TraceKit.computeStackTrace\n     */\n    function escapeRegExp(text) {\n        return text.replace(/[\\-\\[\\]{}()*+?.,\\\\\\^$|#]/g, '\\\\$&');\n    }\n\n    /**\n     * Escapes special characters in a string to be used inside a regular\n     * expression as a string literal. Also ensures that HTML entities will\n     * be matched the same as their literal friends.\n     * @param {string} body The string.\n     * @return {string} The escaped string.\n     * @memberof TraceKit.computeStackTrace\n     */\n    function escapeCodeAsRegExpForMatchingInsideHTML(body) {\n        return escapeRegExp(body).replace('<', '(?:<|&lt;)').replace('>', '(?:>|&gt;)').replace('&', '(?:&|&amp;)').replace('\"', '(?:\"|&quot;)').replace(/\\s+/g, '\\\\s+');\n    }\n\n    /**\n     * Determines where a code fragment occurs in the source code.\n     * @param {RegExp} re The function definition.\n     * @param {Array.<string>} urls A list of URLs to search.\n     * @return {?Object.<string, (string|number)>} An object containing\n     * the url, line, and column number of the defined function.\n     * @memberof TraceKit.computeStackTrace\n     */\n    function findSourceInUrls(re, urls) {\n        var source, m;\n        for (var i = 0, j = urls.length; i < j; ++i) {\n            if ((source = getSource(urls[i])).length) {\n                source = source.join('\\n');\n                if ((m = re.exec(source))) {\n\n                    return {\n                        'url': urls[i],\n                        'line': source.substring(0, m.index).split('\\n').length,\n                        'column': m.index - source.lastIndexOf('\\n', m.index) - 1\n                    };\n                }\n            }\n        }\n\n        return null;\n    }\n\n    /**\n     * Determines at which column a code fragment occurs on a line of the\n     * source code.\n     * @param {string} fragment The code fragment.\n     * @param {string} url The URL to search.\n     * @param {(string|number)} line The line number to examine.\n     * @return {?number} The column number.\n     * @memberof TraceKit.computeStackTrace\n     */\n    function findSourceInLine(fragment, url, line) {\n        var source = getSource(url),\n            re = new RegExp('\\\\b' + escapeRegExp(fragment) + '\\\\b'),\n            m;\n\n        line -= 1;\n\n        if (source && source.length > line && (m = re.exec(source[line]))) {\n            return m.index;\n        }\n\n        return null;\n    }\n\n    /**\n     * Determines where a function was defined within the source code.\n     * @param {(Function|string)} func A function reference or serialized\n     * function definition.\n     * @return {?Object.<string, (string|number)>} An object containing\n     * the url, line, and column number of the defined function.\n     * @memberof TraceKit.computeStackTrace\n     */\n    function findSourceByFunctionBody(func) {\n        if (_isUndefined(window && window.document)) {\n            return;\n        }\n\n        var urls = [window.location.href],\n            scripts = window.document.getElementsByTagName('script'),\n            body,\n            code = '' + func,\n            codeRE = /^function(?:\\s+([\\w$]+))?\\s*\\(([\\w\\s,]*)\\)\\s*\\{\\s*(\\S[\\s\\S]*\\S)\\s*\\}\\s*$/,\n            eventRE = /^function on([\\w$]+)\\s*\\(event\\)\\s*\\{\\s*(\\S[\\s\\S]*\\S)\\s*\\}\\s*$/,\n            re,\n            parts,\n            result;\n\n        for (var i = 0; i < scripts.length; ++i) {\n            var script = scripts[i];\n            if (script.src) {\n                urls.push(script.src);\n            }\n        }\n\n        if (!(parts = codeRE.exec(code))) {\n            re = new RegExp(escapeRegExp(code).replace(/\\s+/g, '\\\\s+'));\n        }\n\n        // not sure if this is really necessary, but I don’t have a test\n        // corpus large enough to confirm that and it was in the original.\n        else {\n            var name = parts[1] ? '\\\\s+' + parts[1] : '',\n                args = parts[2].split(',').join('\\\\s*,\\\\s*');\n\n            body = escapeRegExp(parts[3]).replace(/;$/, ';?'); // semicolon is inserted if the function ends with a comment.replace(/\\s+/g, '\\\\s+');\n            re = new RegExp('function' + name + '\\\\s*\\\\(\\\\s*' + args + '\\\\s*\\\\)\\\\s*{\\\\s*' + body + '\\\\s*}');\n        }\n\n        // look for a normal function definition\n        if ((result = findSourceInUrls(re, urls))) {\n            return result;\n        }\n\n        // look for an old-school event handler function\n        if ((parts = eventRE.exec(code))) {\n            var event = parts[1];\n            body = escapeCodeAsRegExpForMatchingInsideHTML(parts[2]);\n\n            // look for a function defined in HTML as an onXXX handler\n            re = new RegExp('on' + event + '=[\\\\\\'\"]\\\\s*' + body + '\\\\s*[\\\\\\'\"]', 'i');\n\n            if ((result = findSourceInUrls(re, urls[0]))) {\n                return result;\n            }\n\n            // look for ???\n            re = new RegExp(body);\n\n            if ((result = findSourceInUrls(re, urls))) {\n                return result;\n            }\n        }\n\n        return null;\n    }\n\n    // Contents of Exception in various browsers.\n    //\n    // SAFARI:\n    // ex.message = Can't find variable: qq\n    // ex.line = 59\n    // ex.sourceId = 580238192\n    // ex.sourceURL = http://...\n    // ex.expressionBeginOffset = 96\n    // ex.expressionCaretOffset = 98\n    // ex.expressionEndOffset = 98\n    // ex.name = ReferenceError\n    //\n    // FIREFOX:\n    // ex.message = qq is not defined\n    // ex.fileName = http://...\n    // ex.lineNumber = 59\n    // ex.columnNumber = 69\n    // ex.stack = ...stack trace... (see the example below)\n    // ex.name = ReferenceError\n    //\n    // CHROME:\n    // ex.message = qq is not defined\n    // ex.name = ReferenceError\n    // ex.type = not_defined\n    // ex.arguments = ['aa']\n    // ex.stack = ...stack trace...\n    //\n    // INTERNET EXPLORER:\n    // ex.message = ...\n    // ex.name = ReferenceError\n    //\n    // OPERA:\n    // ex.message = ...message... (see the example below)\n    // ex.name = ReferenceError\n    // ex.opera#sourceloc = 11  (pretty much useless, duplicates the info in ex.message)\n    // ex.stacktrace = n/a; see 'opera:config#UserPrefs|Exceptions Have Stacktrace'\n\n    /**\n     * Computes stack trace information from the stack property.\n     * Chrome and Gecko use this property.\n     * @param {Error} ex\n     * @return {?TraceKit.StackTrace} Stack trace information.\n     * @memberof TraceKit.computeStackTrace\n     */\n    function computeStackTraceFromStackProp(ex) {\n        if (!ex.stack) {\n            return null;\n        }\n\n        var chrome = /^\\s*at (.*?) ?\\(((?:file|https?|blob|chrome-extension|native|eval|webpack|<anonymous>|\\/).*?)(?::(\\d+))?(?::(\\d+))?\\)?\\s*$/i,\n            gecko = /^\\s*(.*?)(?:\\((.*?)\\))?(?:^|@)((?:file|https?|blob|chrome|webpack|resource|\\[native).*?|[^@]*bundle)(?::(\\d+))?(?::(\\d+))?\\s*$/i,\n            winjs = /^\\s*at (?:((?:\\[object object\\])?.+) )?\\(?((?:file|ms-appx|https?|webpack|blob):.*?):(\\d+)(?::(\\d+))?\\)?\\s*$/i,\n\n            // Used to additionally parse URL/line/column from eval frames\n            isEval,\n            geckoEval = /(\\S+) line (\\d+)(?: > eval line \\d+)* > eval/i,\n            chromeEval = /\\((\\S*)(?::(\\d+))(?::(\\d+))\\)/,\n\n            lines = ex.stack.split('\\n'),\n            stack = [],\n            submatch,\n            parts,\n            element,\n            reference = /^(.*) is undefined$/.exec(ex.message);\n\n        for (var i = 0, j = lines.length; i < j; ++i) {\n            if ((parts = chrome.exec(lines[i]))) {\n                var isNative = parts[2] && parts[2].indexOf('native') === 0; // start of line\n                isEval = parts[2] && parts[2].indexOf('eval') === 0; // start of line\n                if (isEval && (submatch = chromeEval.exec(parts[2]))) {\n                    // throw out eval line/column and use top-most line/column number\n                    parts[2] = submatch[1]; // url\n                    parts[3] = submatch[2]; // line\n                    parts[4] = submatch[3]; // column\n                }\n                element = {\n                    'url': !isNative ? parts[2] : null,\n                    'func': parts[1] || UNKNOWN_FUNCTION,\n                    'args': isNative ? [parts[2]] : [],\n                    'line': parts[3] ? +parts[3] : null,\n                    'column': parts[4] ? +parts[4] : null\n                };\n            } else if ( parts = winjs.exec(lines[i]) ) {\n                element = {\n                    'url': parts[2],\n                    'func': parts[1] || UNKNOWN_FUNCTION,\n                    'args': [],\n                    'line': +parts[3],\n                    'column': parts[4] ? +parts[4] : null\n                };\n            } else if ((parts = gecko.exec(lines[i]))) {\n                isEval = parts[3] && parts[3].indexOf(' > eval') > -1;\n                if (isEval && (submatch = geckoEval.exec(parts[3]))) {\n                    // throw out eval line/column and use top-most line number\n                    parts[3] = submatch[1];\n                    parts[4] = submatch[2];\n                    parts[5] = null; // no column when eval\n                } else if (i === 0 && !parts[5] && !_isUndefined(ex.columnNumber)) {\n                    // FireFox uses this awesome columnNumber property for its top frame\n                    // Also note, Firefox's column number is 0-based and everything else expects 1-based,\n                    // so adding 1\n                    // NOTE: this hack doesn't work if top-most frame is eval\n                    stack[0].column = ex.columnNumber + 1;\n                }\n                element = {\n                    'url': parts[3],\n                    'func': parts[1] || UNKNOWN_FUNCTION,\n                    'args': parts[2] ? parts[2].split(',') : [],\n                    'line': parts[4] ? +parts[4] : null,\n                    'column': parts[5] ? +parts[5] : null\n                };\n            } else {\n                continue;\n            }\n\n            if (!element.func && element.line) {\n                element.func = guessFunctionName(element.url, element.line);\n            }\n\n            element.context = element.line ? gatherContext(element.url, element.line) : null;\n            stack.push(element);\n        }\n\n        if (!stack.length) {\n            return null;\n        }\n\n        if (stack[0] && stack[0].line && !stack[0].column && reference) {\n            stack[0].column = findSourceInLine(reference[1], stack[0].url, stack[0].line);\n        }\n\n        return {\n            'mode': 'stack',\n            'name': ex.name,\n            'message': ex.message,\n            'stack': stack\n        };\n    }\n\n    /**\n     * Computes stack trace information from the stacktrace property.\n     * Opera 10+ uses this property.\n     * @param {Error} ex\n     * @return {?TraceKit.StackTrace} Stack trace information.\n     * @memberof TraceKit.computeStackTrace\n     */\n    function computeStackTraceFromStacktraceProp(ex) {\n        // Access and store the stacktrace property before doing ANYTHING\n        // else to it because Opera is not very good at providing it\n        // reliably in other circumstances.\n        var stacktrace = ex.stacktrace;\n        if (!stacktrace) {\n            return;\n        }\n\n        var opera10Regex = / line (\\d+).*script (?:in )?(\\S+)(?:: in function (\\S+))?$/i,\n            opera11Regex = / line (\\d+), column (\\d+)\\s*(?:in (?:<anonymous function: ([^>]+)>|([^\\)]+))\\((.*)\\))? in (.*):\\s*$/i,\n            lines = stacktrace.split('\\n'),\n            stack = [],\n            parts;\n\n        for (var line = 0; line < lines.length; line += 2) {\n            var element = null;\n            if ((parts = opera10Regex.exec(lines[line]))) {\n                element = {\n                    'url': parts[2],\n                    'line': +parts[1],\n                    'column': null,\n                    'func': parts[3],\n                    'args':[]\n                };\n            } else if ((parts = opera11Regex.exec(lines[line]))) {\n                element = {\n                    'url': parts[6],\n                    'line': +parts[1],\n                    'column': +parts[2],\n                    'func': parts[3] || parts[4],\n                    'args': parts[5] ? parts[5].split(',') : []\n                };\n            }\n\n            if (element) {\n                if (!element.func && element.line) {\n                    element.func = guessFunctionName(element.url, element.line);\n                }\n                if (element.line) {\n                    try {\n                        element.context = gatherContext(element.url, element.line);\n                    } catch (exc) {}\n                }\n\n                if (!element.context) {\n                    element.context = [lines[line + 1]];\n                }\n\n                stack.push(element);\n            }\n        }\n\n        if (!stack.length) {\n            return null;\n        }\n\n        return {\n            'mode': 'stacktrace',\n            'name': ex.name,\n            'message': ex.message,\n            'stack': stack\n        };\n    }\n\n    /**\n     * NOT TESTED.\n     * Computes stack trace information from an error message that includes\n     * the stack trace.\n     * Opera 9 and earlier use this method if the option to show stack\n     * traces is turned on in opera:config.\n     * @param {Error} ex\n     * @return {?TraceKit.StackTrace} Stack information.\n     * @memberof TraceKit.computeStackTrace\n     */\n    function computeStackTraceFromOperaMultiLineMessage(ex) {\n        // TODO: Clean this function up\n        // Opera includes a stack trace into the exception message. An example is:\n        //\n        // Statement on line 3: Undefined variable: undefinedFunc\n        // Backtrace:\n        //   Line 3 of linked script file://localhost/Users/andreyvit/Projects/TraceKit/javascript-client/sample.js: In function zzz\n        //         undefinedFunc(a);\n        //   Line 7 of inline#1 script in file://localhost/Users/andreyvit/Projects/TraceKit/javascript-client/sample.html: In function yyy\n        //           zzz(x, y, z);\n        //   Line 3 of inline#1 script in file://localhost/Users/andreyvit/Projects/TraceKit/javascript-client/sample.html: In function xxx\n        //           yyy(a, a, a);\n        //   Line 1 of function script\n        //     try { xxx('hi'); return false; } catch(ex) { TraceKit.report(ex); }\n        //   ...\n\n        var lines = ex.message.split('\\n');\n        if (lines.length < 4) {\n            return null;\n        }\n\n        var lineRE1 = /^\\s*Line (\\d+) of linked script ((?:file|https?|blob)\\S+)(?:: in function (\\S+))?\\s*$/i,\n            lineRE2 = /^\\s*Line (\\d+) of inline#(\\d+) script in ((?:file|https?|blob)\\S+)(?:: in function (\\S+))?\\s*$/i,\n            lineRE3 = /^\\s*Line (\\d+) of function script\\s*$/i,\n            stack = [],\n            scripts = (window && window.document && window.document.getElementsByTagName('script')),\n            inlineScriptBlocks = [],\n            parts;\n\n        for (var s in scripts) {\n            if (_has(scripts, s) && !scripts[s].src) {\n                inlineScriptBlocks.push(scripts[s]);\n            }\n        }\n\n        for (var line = 2; line < lines.length; line += 2) {\n            var item = null;\n            if ((parts = lineRE1.exec(lines[line]))) {\n                item = {\n                    'url': parts[2],\n                    'func': parts[3],\n                    'args': [],\n                    'line': +parts[1],\n                    'column': null\n                };\n            } else if ((parts = lineRE2.exec(lines[line]))) {\n                item = {\n                    'url': parts[3],\n                    'func': parts[4],\n                    'args': [],\n                    'line': +parts[1],\n                    'column': null // TODO: Check to see if inline#1 (+parts[2]) points to the script number or column number.\n                };\n                var relativeLine = (+parts[1]); // relative to the start of the <SCRIPT> block\n                var script = inlineScriptBlocks[parts[2] - 1];\n                if (script) {\n                    var source = getSource(item.url);\n                    if (source) {\n                        source = source.join('\\n');\n                        var pos = source.indexOf(script.innerText);\n                        if (pos >= 0) {\n                            item.line = relativeLine + source.substring(0, pos).split('\\n').length;\n                        }\n                    }\n                }\n            } else if ((parts = lineRE3.exec(lines[line]))) {\n                var url = window.location.href.replace(/#.*$/, '');\n                var re = new RegExp(escapeCodeAsRegExpForMatchingInsideHTML(lines[line + 1]));\n                var src = findSourceInUrls(re, [url]);\n                item = {\n                    'url': url,\n                    'func': '',\n                    'args': [],\n                    'line': src ? src.line : parts[1],\n                    'column': null\n                };\n            }\n\n            if (item) {\n                if (!item.func) {\n                    item.func = guessFunctionName(item.url, item.line);\n                }\n                var context = gatherContext(item.url, item.line);\n                var midline = (context ? context[Math.floor(context.length / 2)] : null);\n                if (context && midline.replace(/^\\s*/, '') === lines[line + 1].replace(/^\\s*/, '')) {\n                    item.context = context;\n                } else {\n                    // if (context) alert(\"Context mismatch. Correct midline:\\n\" + lines[i+1] + \"\\n\\nMidline:\\n\" + midline + \"\\n\\nContext:\\n\" + context.join(\"\\n\") + \"\\n\\nURL:\\n\" + item.url);\n                    item.context = [lines[line + 1]];\n                }\n                stack.push(item);\n            }\n        }\n        if (!stack.length) {\n            return null; // could not parse multiline exception message as Opera stack trace\n        }\n\n        return {\n            'mode': 'multiline',\n            'name': ex.name,\n            'message': lines[0],\n            'stack': stack\n        };\n    }\n\n    /**\n     * Adds information about the first frame to incomplete stack traces.\n     * Safari and IE require this to get complete data on the first frame.\n     * @param {TraceKit.StackTrace} stackInfo Stack trace information from\n     * one of the compute* methods.\n     * @param {string} url The URL of the script that caused an error.\n     * @param {(number|string)} lineNo The line number of the script that\n     * caused an error.\n     * @param {string=} message The error generated by the browser, which\n     * hopefully contains the name of the object that caused the error.\n     * @return {boolean} Whether or not the stack information was\n     * augmented.\n     * @memberof TraceKit.computeStackTrace\n     */\n    function augmentStackTraceWithInitialElement(stackInfo, url, lineNo, message) {\n        var initial = {\n            'url': url,\n            'line': lineNo\n        };\n\n        if (initial.url && initial.line) {\n            stackInfo.incomplete = false;\n\n            if (!initial.func) {\n                initial.func = guessFunctionName(initial.url, initial.line);\n            }\n\n            if (!initial.context) {\n                initial.context = gatherContext(initial.url, initial.line);\n            }\n\n            var reference = / '([^']+)' /.exec(message);\n            if (reference) {\n                initial.column = findSourceInLine(reference[1], initial.url, initial.line);\n            }\n\n            if (stackInfo.stack.length > 0) {\n                if (stackInfo.stack[0].url === initial.url) {\n                    if (stackInfo.stack[0].line === initial.line) {\n                        return false; // already in stack trace\n                    } else if (!stackInfo.stack[0].line && stackInfo.stack[0].func === initial.func) {\n                        stackInfo.stack[0].line = initial.line;\n                        stackInfo.stack[0].context = initial.context;\n                        return false;\n                    }\n                }\n            }\n\n            stackInfo.stack.unshift(initial);\n            stackInfo.partial = true;\n            return true;\n        } else {\n            stackInfo.incomplete = true;\n        }\n\n        return false;\n    }\n\n    /**\n     * Computes stack trace information by walking the arguments.caller\n     * chain at the time the exception occurred. This will cause earlier\n     * frames to be missed but is the only way to get any stack trace in\n     * Safari and IE. The top frame is restored by\n     * {@link augmentStackTraceWithInitialElement}.\n     * @param {Error} ex\n     * @return {TraceKit.StackTrace=} Stack trace information.\n     * @memberof TraceKit.computeStackTrace\n     */\n    function computeStackTraceByWalkingCallerChain(ex, depth) {\n        var functionName = /function\\s+([_$a-zA-Z\\xA0-\\uFFFF][_$a-zA-Z0-9\\xA0-\\uFFFF]*)?\\s*\\(/i,\n            stack = [],\n            funcs = {},\n            recursion = false,\n            parts,\n            item,\n            source;\n\n        for (var curr = computeStackTraceByWalkingCallerChain.caller; curr && !recursion; curr = curr.caller) {\n            if (curr === computeStackTrace || curr === TraceKit.report) {\n                continue;\n            }\n\n            item = {\n                'url': null,\n                'func': UNKNOWN_FUNCTION,\n                'args': [],\n                'line': null,\n                'column': null\n            };\n\n            if (curr.name) {\n                item.func = curr.name;\n            } else if ((parts = functionName.exec(curr.toString()))) {\n                item.func = parts[1];\n            }\n\n            if (typeof item.func === 'undefined') {\n              try {\n                item.func = parts.input.substring(0, parts.input.indexOf('{'));\n              } catch (e) { }\n            }\n\n            if ((source = findSourceByFunctionBody(curr))) {\n                item.url = source.url;\n                item.line = source.line;\n\n                if (item.func === UNKNOWN_FUNCTION) {\n                    item.func = guessFunctionName(item.url, item.line);\n                }\n\n                var reference = / '([^']+)' /.exec(ex.message || ex.description);\n                if (reference) {\n                    item.column = findSourceInLine(reference[1], source.url, source.line);\n                }\n            }\n\n            if (funcs['' + curr]) {\n                recursion = true;\n            }else{\n                funcs['' + curr] = true;\n            }\n\n            stack.push(item);\n        }\n\n        if (depth) {\n            stack.splice(0, depth);\n        }\n\n        var result = {\n            'mode': 'callers',\n            'name': ex.name,\n            'message': ex.message,\n            'stack': stack\n        };\n        augmentStackTraceWithInitialElement(result, ex.sourceURL || ex.fileName, ex.line || ex.lineNumber, ex.message || ex.description);\n        return result;\n    }\n\n    /**\n     * Computes a stack trace for an exception.\n     * @param {Error} ex\n     * @param {(string|number)=} depth\n     * @memberof TraceKit.computeStackTrace\n     */\n    function computeStackTrace(ex, depth) {\n        var stack = null;\n        depth = (depth == null ? 0 : +depth);\n\n        try {\n            // This must be tried first because Opera 10 *destroys*\n            // its stacktrace property if you try to access the stack\n            // property first!!\n            stack = computeStackTraceFromStacktraceProp(ex);\n            if (stack) {\n                return stack;\n            }\n        } catch (e) {\n            if (debug) {\n                throw e;\n            }\n        }\n\n        try {\n            stack = computeStackTraceFromStackProp(ex);\n            if (stack) {\n                return stack;\n            }\n        } catch (e) {\n            if (debug) {\n                throw e;\n            }\n        }\n\n        try {\n            stack = computeStackTraceFromOperaMultiLineMessage(ex);\n            if (stack) {\n                return stack;\n            }\n        } catch (e) {\n            if (debug) {\n                throw e;\n            }\n        }\n\n        try {\n            stack = computeStackTraceByWalkingCallerChain(ex, depth + 1);\n            if (stack) {\n                return stack;\n            }\n        } catch (e) {\n            if (debug) {\n                throw e;\n            }\n        }\n\n        return {\n            'name': ex.name,\n            'message': ex.message,\n            'mode': 'failed'\n        };\n    }\n\n    /**\n     * Logs a stacktrace starting from the previous call and working down.\n     * @param {(number|string)=} depth How many frames deep to trace.\n     * @return {TraceKit.StackTrace} Stack trace information.\n     * @memberof TraceKit.computeStackTrace\n     */\n    function computeStackTraceOfCaller(depth) {\n        depth = (depth == null ? 0 : +depth) + 1; // \"+ 1\" because \"ofCaller\" should drop one frame\n        try {\n            throw new Error();\n        } catch (ex) {\n            return computeStackTrace(ex, depth + 1);\n        }\n    }\n\n    computeStackTrace.augmentStackTraceWithInitialElement = augmentStackTraceWithInitialElement;\n    computeStackTrace.computeStackTraceFromStackProp = computeStackTraceFromStackProp;\n    computeStackTrace.guessFunctionName = guessFunctionName;\n    computeStackTrace.gatherContext = gatherContext;\n    computeStackTrace.ofCaller = computeStackTraceOfCaller;\n    computeStackTrace.getSource = getSource;\n\n    return computeStackTrace;\n}());\n\n/**\n * Extends support for global error handling for asynchronous browser\n * functions. Adopted from Closure Library's errorhandler.js\n * @memberof TraceKit\n */\nTraceKit.extendToAsynchronousCallbacks = function () {\n    var _helper = function _helper(fnName) {\n        var originalFn = window[fnName];\n        window[fnName] = function traceKitAsyncExtension() {\n            // Make a copy of the arguments\n            var args = _slice.call(arguments);\n            var originalCallback = args[0];\n            if (typeof (originalCallback) === 'function') {\n                args[0] = TraceKit.wrap(originalCallback);\n            }\n            // IE < 9 doesn't support .call/.apply on setInterval/setTimeout, but it\n            // also only supports 2 argument and doesn't care what \"this\" is, so we\n            // can just call the original function directly.\n            if (originalFn.apply) {\n                return originalFn.apply(this, args);\n            } else {\n                return originalFn(args[0], args[1]);\n            }\n        };\n    };\n\n    _helper('setTimeout');\n    _helper('setInterval');\n};\n\n//Default options:\nif (!TraceKit.remoteFetching) {\n    TraceKit.remoteFetching = true;\n}\nif (!TraceKit.collectWindowErrors) {\n    TraceKit.collectWindowErrors = true;\n}\nif (!TraceKit.linesOfContext || TraceKit.linesOfContext < 1) {\n    // 5 lines before, the offending line, 5 lines after\n    TraceKit.linesOfContext = 11;\n}\n\n// UMD export\nif (typeof define === 'function' && define.amd) {\n    define('TraceKit', [], TraceKit);\n} else if (typeof module !== 'undefined' && module.exports && window.module !== module) {\n    module.exports = TraceKit;\n} else {\n    window.TraceKit = TraceKit;\n}\n\n}(typeof window !== 'undefined' ? window : global));\n","import * as TraceKit from 'TraceKit';\nexport interface ILastReferenceIdManager {\n  getLast(): string;\n  clearLast(): void;\n  setLast(eventId: string): void;\n}\n\nexport interface ILog {\n  trace(message: string): void;\n  info(message: string): void;\n  warn(message: string): void;\n  error(message: string): void;\n}\n\n                                                                    \n\nexport class DefaultLastReferenceIdManager implements ILastReferenceIdManager {\n  /**\n   * Gets the last event's reference id that was submitted to the server.\n   * @type {string}\n   * @private\n   */\n  private _lastReferenceId: string = null;\n\n  /**\n   * Gets the last event's reference id that was submitted to the server.\n   * @returns {string}\n   */\n  public getLast(): string {\n    return this._lastReferenceId;\n  }\n\n  /**\n   * Clears the last event's reference id.\n   */\n  public clearLast(): void {\n    this._lastReferenceId = null;\n  }\n\n  /**\n   * Sets the last event's reference id.\n   * @param eventId\n   */\n  public setLast(eventId: string): void {\n    this._lastReferenceId = eventId;\n  }\n}\n\n                              \n\nexport class ConsoleLog implements ILog {\n  public trace(message: string): void {\n    this.log('debug', message);\n  }\n\n  public info(message: string): void {\n    this.log('info', message);\n  }\n\n  public warn(message: string): void {\n    this.log('warn', message);\n  }\n\n  public error(message: string): void {\n    this.log('error', message);\n  }\n\n  private log(level: string, message: string) {\n    if (console) {\n      const msg = `[${level}] Exceptionless: ${message}`;\n\n      if (console[level]) {\n        console[level](msg);\n      } else if (console.log) {\n        console[`log`](msg);\n      }\n    }\n  }\n}\n\n                              \n\nexport class NullLog implements ILog {\n  public trace(message: string): void { }\n  public info(message: string): void { }\n  public warn(message: string): void { }\n  public error(message: string): void { }\n}\n\nexport interface IUserInfo {\n  identity?: string;\n  name?: string;\n  data?: any;\n}\n\n                                                                                                                                                               \n\nexport class HeartbeatPlugin implements IEventPlugin {\n  public priority: number = 100;\n  public name: string = 'HeartbeatPlugin';\n\n  private _interval: number;\n  private _intervalId: any;\n\n  constructor(heartbeatInterval: number = 30000) {\n    this._interval = heartbeatInterval;\n  }\n\n  public run(context: EventPluginContext, next?: () => void): void {\n    clearInterval(this._intervalId);\n\n    const user: IUserInfo = context.event.data['@user'];\n    if (user && user.identity) {\n      this._intervalId = setInterval(() => context.client.submitSessionHeartbeat(user.identity), this._interval);\n    }\n\n    next && next();\n  }\n}\n\n                                                                                                                                                \n\nexport class ReferenceIdPlugin implements IEventPlugin {\n  public priority: number = 20;\n  public name: string = 'ReferenceIdPlugin';\n\n  public run(context: EventPluginContext, next?: () => void): void {\n    if ((!context.event.reference_id || context.event.reference_id.length === 0) && context.event.type === 'error') {\n      context.event.reference_id = Utils.guid().replace('-', '').substring(0, 10);\n    }\n\n    next && next();\n  }\n}\n\n                                                                                                                                                                                             \n\nexport class EventPluginContext {\n  public cancelled: boolean;\n  public client: ExceptionlessClient;\n  public event: IEvent;\n  public contextData: ContextData;\n\n  constructor(client: ExceptionlessClient, event: IEvent, contextData?: ContextData) {\n    this.client = client;\n    this.event = event;\n    this.contextData = contextData ? contextData : new ContextData();\n  }\n\n  public get log(): ILog {\n    return this.client.config.log;\n  }\n}\n\nn\nexport class EventPluginManager {\n  public static run(context: EventPluginContext, callback: (context?: EventPluginContext) => void): void {\n    const wrap = (plugin: IEventPlugin, next?: () => void): () => void => {\n      return () => {\n        try {\n          if (!context.cancelled) {\n            plugin.run(context, next);\n          }\n        } catch (ex) {\n          context.cancelled = true;\n          context.log.error(`Error running plugin '${plugin.name}': ${ex.message}. Discarding Event.`);\n        }\n\n        if (context.cancelled && !!callback) {\n          callback(context);\n        }\n      };\n    };\n\n    const plugins: IEventPlugin[] = context.client.config.plugins; // optimization for minifier.\n    const wrappedPlugins: Array<() => void> = [];\n    if (!!callback) {\n      wrappedPlugins[plugins.length] = wrap({ name: 'cb', priority: 9007199254740992, run: callback }, null);\n    }\n\n    for (let index = plugins.length - 1; index > -1; index--) {\n      wrappedPlugins[index] = wrap(plugins[index], !!callback || (index < plugins.length - 1) ? wrappedPlugins[index + 1] : null);\n    }\n\n    wrappedPlugins[0]();\n  }\n\n  public static addDefaultPlugins(config: Configuration): void {\n    config.addPlugin(new ConfigurationDefaultsPlugin());\n    config.addPlugin(new ErrorPlugin());\n    config.addPlugin(new DuplicateCheckerPlugin());\n    config.addPlugin(new EventExclusionPlugin());\n    config.addPlugin(new ModuleInfoPlugin());\n    config.addPlugin(new RequestInfoPlugin());\n    config.addPlugin(new EnvironmentInfoPlugin());\n    config.addPlugin(new SubmissionMethodPlugin());\n  }\n}\n\n                                                                                                         \n\nexport interface IEventPlugin {\n  priority?: number;\n  name?: string;\n  run(context: EventPluginContext, next?: () => void): void;\n}\n\n                                                                                                                                                                                                                                                                                                                                     \n\nexport class DefaultEventQueue implements IEventQueue {\n  /**\n   * The configuration object.\n   * @type {Configuration}\n   * @private\n   */\n  private _config: Configuration;\n\n  /**\n   * A list of handlers that will be fired when events are submitted.\n   * @type {Array}\n   * @private\n   */\n  private _handlers: Array<(events: IEvent[], response: SubmissionResponse) => void> = [];\n\n  /**\n   * Suspends processing until the specified time.\n   * @type {Date}\n   * @private\n   */\n  private _suspendProcessingUntil: Date;\n\n  /**\n   * Discards queued items until the specified time.\n   * @type {Date}\n   * @private\n   */\n  private _discardQueuedItemsUntil: Date;\n\n  /**\n   * Returns true if the queue is processing.\n   * @type {boolean}\n   * @private\n   */\n  private _processingQueue: boolean = false;\n\n  /**\n   * Processes the queue every xx seconds.\n   * @type {Timer}\n   * @private\n   */\n  private _queueTimer: any;\n\n  constructor(config: Configuration) {\n    this._config = config;\n  }\n\n  public enqueue(event: IEvent): void {\n    const eventWillNotBeQueued: string = 'The event will not be queued.'; // optimization for minifier.\n    const config: Configuration = this._config; // Optimization for minifier.\n    const log: ILog = config.log; // Optimization for minifier.\n\n    if (!config.enabled) {\n      log.info(`Configuration is disabled. ${eventWillNotBeQueued}`);\n      return;\n    }\n\n    if (!config.isValid) {\n      log.info(`Invalid Api Key. ${eventWillNotBeQueued}`);\n      return;\n    }\n\n    if (this.areQueuedItemsDiscarded()) {\n      log.info(`Queue items are currently being discarded. ${eventWillNotBeQueued}`);\n      return;\n    }\n\n    this.ensureQueueTimer();\n\n    const timestamp = config.storage.queue.save(event);\n    const logText = `type=${event.type} ${!!event.reference_id ? 'refid=' + event.reference_id : ''}`;\n    if (timestamp) {\n      log.info(`Enqueuing event: ${timestamp} ${logText}`);\n    } else {\n      log.error(`Could not enqueue event ${logText}`);\n    }\n  }\n\n  public process(isAppExiting?: boolean): void {\n    const queueNotProcessed: string = 'The queue will not be processed.'; // optimization for minifier.\n    const config: Configuration = this._config; // Optimization for minifier.\n    const log: ILog = config.log; // Optimization for minifier.\n\n    if (this._processingQueue) {\n      return;\n    }\n\n    log.info('Processing queue...');\n    if (!config.enabled) {\n      log.info(`Configuration is disabled. ${queueNotProcessed}`);\n      return;\n    }\n\n    if (!config.isValid) {\n      log.info(`Invalid Api Key. ${queueNotProcessed}`);\n      return;\n    }\n\n    this._processingQueue = true;\n    this.ensureQueueTimer();\n\n    try {\n      const events = config.storage.queue.get(config.submissionBatchSize);\n      if (!events || events.length === 0) {\n        this._processingQueue = false;\n        return;\n      }\n\n      log.info(`Sending ${events.length} events to ${config.serverUrl}.`);\n      config.submissionClient.postEvents(events.map((e) => e.value), config, (response: SubmissionResponse) => {\n        this.processSubmissionResponse(response, events);\n        this.eventsPosted(events.map((e) => e.value), response);\n        log.info('Finished processing queue.');\n        this._processingQueue = false;\n      }, isAppExiting);\n    } catch (ex) {\n      log.error(`Error processing queue: ${ex}`);\n      this.suspendProcessing();\n      this._processingQueue = false;\n    }\n  }\n\n  public suspendProcessing(durationInMinutes?: number, discardFutureQueuedItems?: boolean, clearQueue?: boolean): void {\n    const config: Configuration = this._config; // Optimization for minifier.\n\n    if (!durationInMinutes || durationInMinutes <= 0) {\n      durationInMinutes = 5;\n    }\n\n    config.log.info(`Suspending processing for ${durationInMinutes} minutes.`);\n    this._suspendProcessingUntil = new Date(new Date().getTime() + (durationInMinutes * 60000));\n\n    if (discardFutureQueuedItems) {\n      this._discardQueuedItemsUntil = this._suspendProcessingUntil;\n    }\n\n    if (clearQueue) {\n      // Account is over the limit and we want to ensure that the sample size being sent in will contain newer errors.\n      config.storage.queue.clear();\n    }\n  }\n\n  public onEventsPosted(handler: (events: IEvent[], response: SubmissionResponse) => void): void {\n    !!handler && this._handlers.push(handler);\n  }\n\n  private eventsPosted(events: IEvent[], response: SubmissionResponse) {\n    const handlers = this._handlers; // optimization for minifier.\n    for (const handler of handlers) {\n      try {\n        handler(events, response);\n      } catch (ex) {\n        this._config.log.error(`Error calling onEventsPosted handler: ${ex}`);\n      }\n    }\n  }\n\n  private areQueuedItemsDiscarded(): boolean {\n    return this._discardQueuedItemsUntil && this._discardQueuedItemsUntil > new Date();\n  }\n\n  private ensureQueueTimer(): void {\n    if (!this._queueTimer) {\n      this._queueTimer = setInterval(() => this.onProcessQueue(), 10000);\n    }\n  }\n\n  private isQueueProcessingSuspended(): boolean {\n    return this._suspendProcessingUntil && this._suspendProcessingUntil > new Date();\n  }\n\n  private onProcessQueue(): void {\n    if (!this.isQueueProcessingSuspended() && !this._processingQueue) {\n      this.process();\n    }\n  }\n\n  private processSubmissionResponse(response: SubmissionResponse, events: IStorageItem[]): void {\n    const noSubmission: string = 'The event will not be submitted.'; // Optimization for minifier.\n    const config: Configuration = this._config; // Optimization for minifier.\n    const log: ILog = config.log; // Optimization for minifier.\n\n    if (response.success) {\n      log.info(`Sent ${events.length} events.`);\n      this.removeEvents(events);\n      return;\n    }\n\n    if (response.serviceUnavailable) {\n      // You are currently over your rate limit or the servers are under stress.\n      log.error('Server returned service unavailable.');\n      this.suspendProcessing();\n      return;\n    }\n\n    if (response.paymentRequired) {\n      // If the organization over the rate limit then discard the event.\n      log.info('Too many events have been submitted, please upgrade your plan.');\n      this.suspendProcessing(null, true, true);\n      return;\n    }\n\n    if (response.unableToAuthenticate) {\n      // The api key was suspended or could not be authorized.\n      log.info(`Unable to authenticate, please check your configuration. ${noSubmission}`);\n      this.suspendProcessing(15);\n      this.removeEvents(events);\n      return;\n    }\n\n    if (response.notFound || response.badRequest) {\n      // The service end point could not be found.\n      log.error(`Error while trying to submit data: ${response.message}`);\n      this.suspendProcessing(60 * 4);\n      this.removeEvents(events);\n      return;\n    }\n\n    if (response.requestEntityTooLarge) {\n      const message = 'Event submission discarded for being too large.';\n      if (config.submissionBatchSize > 1) {\n        log.error(`${message} Retrying with smaller batch size.`);\n        config.submissionBatchSize = Math.max(1, Math.round(config.submissionBatchSize / 1.5));\n      } else {\n        log.error(`${message} ${noSubmission}`);\n        this.removeEvents(events);\n      }\n\n      return;\n    }\n\n    if (!response.success) {\n      log.error(`Error submitting events: ${response.message || 'Please check the network tab for more info.'}`);\n      this.suspendProcessing();\n    }\n  }\n\n  private removeEvents(events: IStorageItem[]) {\n    for (let index = 0; index < (events || []).length; index++) {\n      this._config.storage.queue.remove(events[index].timestamp);\n    }\n  }\n}\n\n                                                                                                                 \n\nexport interface IEventQueue {\n  enqueue(event: IEvent): void;\n  process(isAppExiting?: boolean): void;\n  suspendProcessing(durationInMinutes?: number, discardFutureQueuedItems?: boolean, clearQueue?: boolean): void;\n  onEventsPosted(handler: (events: IEvent[], response: SubmissionResponse) => void): void;\n}\n\n                                                                                                                                  \n\nexport interface IEnvironmentInfoCollector {\n  getEnvironmentInfo(context: EventPluginContext): IEnvironmentInfo;\n}\n\n                                                                                                              \n\nexport interface IErrorParser {\n  parse(context: EventPluginContext, exception: Error): IError;\n}\n\n                                                                                                                \n\nexport interface IModuleCollector {\n  getModules(context: EventPluginContext): IModule[];\n}\n\n                                                                                                                          \n\nexport interface IRequestInfoCollector {\n  getRequestInfo(context: EventPluginContext): IRequestInfo;\n}\n\n                                                                                                                                                  \n\nexport class InMemoryStorageProvider implements IStorageProvider {\n  public queue: IStorage;\n  public settings: IStorage;\n\n  constructor(maxQueueItems: number = 250) {\n    this.queue = new InMemoryStorage(maxQueueItems);\n    this.settings = new InMemoryStorage(1);\n  }\n\n}\n\n                                      \n\nexport interface IStorageProvider {\n  queue: IStorage;\n  settings: IStorage;\n}\n\nn\n// tslint:disable-next-line:prefer-const\ndeclare var XDomainRequest: { new (); create(); };\n\nexport class DefaultSubmissionClient implements ISubmissionClient {\n  public configurationVersionHeader: string = 'x-exceptionless-configversion';\n\n  public postEvents(events: IEvent[], config: Configuration, callback: (response: SubmissionResponse) => void, isAppExiting?: boolean): void {\n    const data = JSON.stringify(events);\n    const request = this.createRequest(config, 'POST',  `${config.serverUrl}/api/v2/events`, data);\n    const cb = this.createSubmissionCallback(config, callback);\n\n    return config.submissionAdapter.sendRequest(request, cb, isAppExiting);\n  }\n\n  public postUserDescription(referenceId: string, description: IUserDescription, config: Configuration, callback: (response: SubmissionResponse) => void): void {\n    const path = `${config.serverUrl}/api/v2/events/by-ref/${encodeURIComponent(referenceId)}/user-description`;\n    const data = JSON.stringify(description);\n    const request = this.createRequest(config, 'POST', path, data);\n    const cb = this.createSubmissionCallback(config, callback);\n\n    return config.submissionAdapter.sendRequest(request, cb);\n  }\n\n  public getSettings(config: Configuration, version: number, callback: (response: SettingsResponse) => void): void {\n    const request = this.createRequest(config, 'GET', `${config.serverUrl}/api/v2/projects/config?v=${version}`);\n    const cb = (status, message, data?, headers?) => {\n      if (status !== 200) {\n        return callback(new SettingsResponse(false, null, -1, null, message));\n      }\n\n      let settings: IClientConfiguration;\n      try {\n        settings = JSON.parse(data);\n      } catch (e) {\n        config.log.error(`Unable to parse settings: '${data}'`);\n      }\n\n      if (!settings || isNaN(settings.version)) {\n        return callback(new SettingsResponse(false, null, -1, null, 'Invalid configuration settings.'));\n      }\n\n      callback(new SettingsResponse(true, settings.settings || {}, settings.version));\n    };\n\n    return config.submissionAdapter.sendRequest(request, cb);\n  }\n\n  public sendHeartbeat(sessionIdOrUserId: string, closeSession: boolean, config: Configuration): void {\n    const request = this.createRequest(config, 'GET', `${config.heartbeatServerUrl}/api/v2/events/session/heartbeat?id=${sessionIdOrUserId}&close=${closeSession}`);\n    config.submissionAdapter.sendRequest(request);\n  }\n\n  private createRequest(config: Configuration, method: string, url: string, data: string = null): SubmissionRequest {\n    return {\n      method,\n      url,\n      data,\n      apiKey: config.apiKey,\n      userAgent: config.userAgent\n    };\n  }\n\n  private createSubmissionCallback(config: Configuration, callback: (response: SubmissionResponse) => void) {\n    return (status, message, data?, headers?) => {\n      const settingsVersion: number = headers && parseInt(headers[this.configurationVersionHeader], 10);\n      SettingsManager.checkVersion(settingsVersion, config);\n\n      callback(new SubmissionResponse(status, message));\n    };\n  }\n}\n\n                                                                                                                   \n\nexport interface ISubmissionAdapter {\n  sendRequest(request: SubmissionRequest, callback?: SubmissionCallback, isAppExiting?: boolean): void;\n}\n\n                                                                                                                                                                                                                                                                                           \n\nexport interface ISubmissionClient {\n  postEvents(events: IEvent[], config: Configuration, callback: (response: SubmissionResponse) => void, isAppExiting?: boolean): void;\n  postUserDescription(referenceId: string, description: IUserDescription, config: Configuration, callback: (response: SubmissionResponse) => void): void;\n  getSettings(config: Configuration, version: number, callback: (response: SettingsResponse) => void): void;\n  sendHeartbeat(sessionIdOrUserId: string, closeSession: boolean, config: Configuration): void;\n}\n\nexport class Utils {\n  public static addRange<T>(target: T[], ...values: T[]) {\n    if (!target) {\n      target = [];\n    }\n\n    if (!values || values.length === 0) {\n      return target;\n    }\n\n    for (const value of values) {\n      if (value && target.indexOf(value) < 0) {\n        target.push(value);\n      }\n    }\n\n    return target;\n  }\n\n  public static getHashCode(source: string): number {\n    if (!source || source.length === 0) {\n      return 0;\n    }\n\n    let hash: number = 0;\n    for (let index = 0; index < source.length; index++) {\n      const character = source.charCodeAt(index);\n      hash = ((hash << 5) - hash) + character;\n      hash |= 0;\n    }\n\n    return hash;\n  }\n\n  public static getCookies(cookies: string, exclusions?: string[]): object {\n    const result: object = {};\n\n    const parts: string[] = (cookies || '').split('; ');\n    for (const part of parts) {\n      const cookie: string[] = part.split('=');\n      if (!Utils.isMatch(cookie[0], exclusions)) {\n        result[cookie[0]] = cookie[1];\n      }\n    }\n\n    return !Utils.isEmpty(result) ? result : null;\n  }\n\n  public static guid(): string {\n    function s4() {\n      return Math.floor((1 + Math.random()) * 0x10000).toString(16).substring(1);\n    }\n\n    return s4() + s4() + '-' + s4() + '-' + s4() + '-' + s4() + '-' + s4() + s4() + s4();\n  }\n\n  // tslint:disable-next-line:ban-types\n  public static merge(defaultValues: Object, values: Object) {\n    const result: object = {};\n\n    for (const key in defaultValues || {}) {\n      if (!!defaultValues[key]) {\n        result[key] = defaultValues[key];\n      }\n    }\n\n    for (const key in values || {}) {\n      if (!!values[key]) {\n        result[key] = values[key];\n      }\n    }\n\n    return result;\n  }\n\n  public static parseVersion(source: string): string {\n    if (!source) {\n      return null;\n    }\n\n    const versionRegex = /(v?((\\d+)\\.(\\d+)(\\.(\\d+))?)(?:-([\\dA-Za-z\\-]+(?:\\.[\\dA-Za-z\\-]+)*))?(?:\\+([\\dA-Za-z\\-]+(?:\\.[\\dA-Za-z\\-]+)*))?)/;\n    const matches = versionRegex.exec(source);\n    if (matches && matches.length > 0) {\n      return matches[0];\n    }\n\n    return null;\n  }\n\n  public static parseQueryString(query: string, exclusions?: string[]) {\n    if (!query || query.length === 0) {\n      return null;\n    }\n\n    const pairs: string[] = query.split('&');\n    if (pairs.length === 0) {\n      return null;\n    }\n\n    const result: object = {};\n    for (const pair of pairs) {\n      const parts = pair.split('=');\n      if (!Utils.isMatch(parts[0], exclusions)) {\n        result[decodeURIComponent(parts[0])] = decodeURIComponent(parts[1]);\n      }\n    }\n\n    return !Utils.isEmpty(result) ? result : null;\n  }\n\n  public static randomNumber(): number {\n    return Math.floor(Math.random() * 9007199254740992);\n  }\n\n  /**\n   * Checks to see if a value matches a pattern.\n   * @param input the value to check against the @pattern.\n   * @param pattern The pattern to check, supports wild cards (*).\n   */\n  public static isMatch(input: string, patterns: string[], ignoreCase: boolean = true): boolean {\n    if (!input || typeof input !== 'string') {\n      return false;\n    }\n\n    const trim = /^[\\s\\uFEFF\\xA0]+|[\\s\\uFEFF\\xA0]+$/g;\n    input = (ignoreCase ? input.toLowerCase() : input).replace(trim, '');\n\n    return (patterns || []).some((pattern) => {\n      if (typeof pattern !== 'string') {\n        return false;\n      }\n\n      pattern = (ignoreCase ? pattern.toLowerCase() : pattern).replace(trim, '');\n      if (pattern.length <= 0) {\n        return false;\n      }\n\n      const startsWithWildcard: boolean = pattern[0] === '*';\n      if (startsWithWildcard) {\n        pattern = pattern.slice(1);\n      }\n\n      const endsWithWildcard: boolean = pattern[pattern.length - 1] === '*';\n      if (endsWithWildcard) {\n        pattern = pattern.substring(0, pattern.length - 1);\n      }\n\n      if (startsWithWildcard && endsWithWildcard) {\n        return pattern.length <= input.length && input.indexOf(pattern, 0) !== -1;\n      }\n\n      if (startsWithWildcard) {\n        return Utils.endsWith(input, pattern);\n      }\n\n      if (endsWithWildcard) {\n        return Utils.startsWith(input, pattern);\n      }\n\n      return input === pattern;\n    });\n  }\n\n  public static isEmpty(input: object) {\n    return input === null || (typeof (input) === 'object' && Object.keys(input).length === 0);\n  }\n\n  public static startsWith(input: string, prefix: string): boolean {\n    return input.substring(0, prefix.length) === prefix;\n  }\n\n  public static endsWith(input: string, suffix: string): boolean {\n    return input.indexOf(suffix, input.length - suffix.length) !== -1;\n  }\n\n  /**\n   * Stringifys an object with optional exclusions and max depth.\n   * @param data The data object to add.\n   * @param exclusions Any property names that should be excluded.\n   * @param maxDepth The max depth of the object to include.\n   */\n  public static stringify(data: any, exclusions?: string[], maxDepth?: number): string {\n    function stringifyImpl(obj: any, excludedKeys: string[]): string {\n      const cache: string[] = [];\n      return JSON.stringify(obj, (key: string, value: any) => {\n        if (Utils.isMatch(key, excludedKeys)) {\n          return;\n        }\n\n        if (typeof value === 'object' && !!value) {\n          if (cache.indexOf(value) !== -1) {\n            // Circular reference found, discard key\n            return;\n          }\n\n          cache.push(value);\n        }\n\n        return value;\n      });\n    }\n\n    if (({}).toString.call(data) === '[object Object]') {\n      const flattened = {};\n      /* tslint:disable:forin */\n      for (const prop in data) {\n        const value = data[prop];\n        if (value === data) {\n          continue;\n        }\n        flattened[prop] = data[prop];\n      }\n      /* tslint:enable:forin */\n\n      return stringifyImpl(flattened, exclusions);\n    }\n\n    if (({}).toString.call(data) === '[object Array]') {\n      const result = [];\n      for (let index = 0; index < data.length; index++) {\n        result[index] = JSON.parse(stringifyImpl(data[index], exclusions));\n      }\n\n      return JSON.stringify(result);\n    }\n\n    return stringifyImpl(data, exclusions);\n  }\n\n  public static toBoolean(input, defaultValue: boolean = false): boolean {\n    if (typeof input === 'boolean') {\n      return input;\n    }\n\n    if (input === null || typeof input !== 'number' && typeof input !== 'string') {\n      return defaultValue;\n    }\n\n    switch ((input + '').toLowerCase().trim()) {\n      case 'true': case 'yes': case '1': return true;\n      case 'false': case 'no': case '0': case null: return false;\n    }\n\n    return defaultValue;\n  }\n}\n\nn\nexport interface IConfigurationSettings {\n  apiKey?: string;\n  serverUrl?: string;\n  heartbeatServerUrl?: string;\n  updateSettingsWhenIdleInterval?: number;\n  environmentInfoCollector?: IEnvironmentInfoCollector;\n  errorParser?: IErrorParser;\n  lastReferenceIdManager?: ILastReferenceIdManager;\n  log?: ILog;\n  moduleCollector?: IModuleCollector;\n  requestInfoCollector?: IRequestInfoCollector;\n  submissionBatchSize?: number;\n  submissionClient?: ISubmissionClient;\n  submissionAdapter?: ISubmissionAdapter;\n  storage?: IStorageProvider;\n  queue?: IEventQueue;\n}\n\n                                                                                                                                                     \n\ninterface ISettingsWithVersion {\n  version: number;\n  settings: { [key: string]: string };\n}\n\nexport class SettingsManager {\n  /**\n   * A list of handlers that will be fired when the settings change.\n   * @type {Array}\n   * @private\n   */\n  private static _handlers: Array<(config: Configuration) => void> = [];\n\n  public static onChanged(handler: (config: Configuration) => void) {\n    !!handler && this._handlers.push(handler);\n  }\n\n  public static applySavedServerSettings(config: Configuration): void {\n    if (!config || !config.isValid) {\n      return;\n    }\n\n    const savedSettings = this.getSavedServerSettings(config);\n    config.log.info(`Applying saved settings: v${savedSettings.version}`);\n    config.settings = Utils.merge(config.settings, savedSettings.settings);\n    this.changed(config);\n  }\n\n  public static getVersion(config: Configuration): number {\n    if (!config || !config.isValid) {\n      return 0;\n    }\n\n    const savedSettings = this.getSavedServerSettings(config);\n    return savedSettings.version || 0;\n  }\n\n  public static checkVersion(version: number, config: Configuration): void {\n    const currentVersion: number = this.getVersion(config);\n    if (version <= currentVersion) {\n      return;\n    }\n\n    config.log.info(`Updating settings from v${currentVersion} to v${version}`);\n    this.updateSettings(config, currentVersion);\n  }\n\n  public static updateSettings(config: Configuration, version?: number): void {\n    if (!config || !config.enabled) {\n      return;\n    }\n\n    const unableToUpdateMessage = 'Unable to update settings';\n    if (!config.isValid) {\n      config.log.error(`${unableToUpdateMessage}: ApiKey is not set.`);\n      return;\n    }\n\n    if (!version || version < 0) {\n      version = this.getVersion(config);\n    }\n\n    config.log.info(`Checking for updated settings from: v${version}.`);\n    config.submissionClient.getSettings(config, version, (response: SettingsResponse) => {\n      if (!config || !response || !response.success || !response.settings) {\n        config.log.warn(`${unableToUpdateMessage}: ${response.message}`);\n        return;\n      }\n\n      config.settings = Utils.merge(config.settings, response.settings);\n\n      // TODO: Store snapshot of settings after reading from config and attributes and use that to revert to defaults.\n      // Remove any existing server settings that are not in the new server settings.\n      const savedServerSettings = SettingsManager.getSavedServerSettings(config);\n      for (const key in savedServerSettings) {\n        if (response.settings[key]) {\n          continue;\n        }\n\n        delete config.settings[key];\n      }\n\n      const newSettings: ISettingsWithVersion = {\n        version: response.settingsVersion,\n        settings: response.settings\n      };\n\n      config.storage.settings.save(newSettings);\n\n      config.log.info(`Updated settings: v${newSettings.version}`);\n      this.changed(config);\n    });\n  }\n\n  private static changed(config: Configuration) {\n    const handlers = this._handlers; // optimization for minifier.\n    for (const handler of handlers) {\n      try {\n        handler(config);\n      } catch (ex) {\n        config.log.error(`Error calling onChanged handler: ${ex}`);\n      }\n    }\n  }\n\n  private static getSavedServerSettings(config: Configuration): ISettingsWithVersion {\n    const item = config.storage.settings.get()[0];\n    if (item && item.value && item.value.version && item.value.settings) {\n      return item.value;\n    }\n\n    return { version: 0, settings: {} };\n  }\n}\n\nexport interface IEvent {\n  type?: string;\n  source?: string;\n  date?: Date;\n  tags?: string[];\n  message?: string;\n  geo?: string;\n  value?: number;\n  data?: any;\n  reference_id?: string;\n  count?: number;\n}\n\nexport class SubmissionResponse {\n  public success: boolean = false;\n  public badRequest: boolean = false;\n  public serviceUnavailable: boolean = false;\n  public paymentRequired: boolean = false;\n  public unableToAuthenticate: boolean = false;\n  public notFound: boolean = false;\n  public requestEntityTooLarge: boolean = false;\n  public statusCode: number;\n  public message: string;\n\n  constructor(statusCode: number, message?: string) {\n    this.statusCode = statusCode;\n    this.message = message;\n\n    this.success = statusCode >= 200 && statusCode <= 299;\n    this.badRequest = statusCode === 400;\n    this.serviceUnavailable = statusCode === 503;\n    this.paymentRequired = statusCode === 402;\n    this.unableToAuthenticate = statusCode === 401 || statusCode === 403;\n    this.notFound = statusCode === 404;\n    this.requestEntityTooLarge = statusCode === 413;\n  }\n}\n\nn\nexport class ExceptionlessClient {\n  /**\n   * The default ExceptionlessClient instance.\n   * @type {ExceptionlessClient}\n   * @private\n   */\n  private static _instance: ExceptionlessClient = null;\n\n  public config: Configuration;\n\n  private _intervalId: any;\n  private _timeoutId: any;\n\n  constructor();\n  constructor(settings: IConfigurationSettings);\n  constructor(apiKey: string, serverUrl?: string);\n  constructor(settingsOrApiKey?: IConfigurationSettings | string, serverUrl?: string) {\n    this.config = typeof settingsOrApiKey === 'object'\n      ? new Configuration(settingsOrApiKey)\n      : new Configuration({ apiKey:  settingsOrApiKey as string, serverUrl });\n\n    this.updateSettingsTimer(5000);\n    this.config.onChanged((config) => this.updateSettingsTimer(this._timeoutId > 0 ? 5000 : 0));\n    this.config.queue.onEventsPosted((events, response) =>  this.updateSettingsTimer());\n  }\n\n  public createException(exception: Error): EventBuilder {\n    const pluginContextData = new ContextData();\n    pluginContextData.setException(exception);\n    return this.createEvent(pluginContextData).setType('error');\n  }\n\n  public submitException(exception: Error, callback?: (context: EventPluginContext) => void): void {\n    this.createException(exception).submit(callback);\n  }\n\n  public createUnhandledException(exception: Error, submissionMethod?: string): EventBuilder {\n    const builder = this.createException(exception);\n    builder.pluginContextData.markAsUnhandledError();\n    builder.pluginContextData.setSubmissionMethod(submissionMethod);\n\n    return builder;\n  }\n\n  public submitUnhandledException(exception: Error, submissionMethod?: string, callback?: (context: EventPluginContext) => void) {\n    this.createUnhandledException(exception, submissionMethod).submit(callback);\n  }\n\n  public createFeatureUsage(feature: string): EventBuilder {\n    return this.createEvent().setType('usage').setSource(feature);\n  }\n\n  public submitFeatureUsage(feature: string, callback?: (context: EventPluginContext) => void): void {\n    this.createFeatureUsage(feature).submit(callback);\n  }\n\n  public createLog(message: string): EventBuilder;\n  public createLog(source: string, message: string): EventBuilder;\n  public createLog(source: string, message: string, level: string): EventBuilder;\n  public createLog(sourceOrMessage: string, message?: string, level?: string): EventBuilder {\n    let builder = this.createEvent().setType('log');\n\n    if (level) {\n      builder = builder.setSource(sourceOrMessage).setMessage(message).setProperty('@level', level);\n    } else if (message) {\n      builder = builder.setSource(sourceOrMessage).setMessage(message);\n    } else {\n      builder = builder.setMessage(sourceOrMessage);\n\n      try {\n        // TODO: Look into using https: //www.stevefenton.co.uk/Content/Blog/Date/201304/Blog/Obtaining-A-Class-Name-At-Runtime-In-TypeScript/\n        const caller: any = this.createLog.caller;\n        builder = builder.setSource(caller && caller.caller && caller.caller.name);\n      } catch (e) {\n        this.config.log.trace('Unable to resolve log source: ' + e.message);\n      }\n    }\n\n    return builder;\n  }\n\n  public submitLog(message: string): void;\n  public submitLog(source: string, message: string): void;\n  public submitLog(source: string, message: string, level: string, callback?: (context: EventPluginContext) => void): void;\n  public submitLog(sourceOrMessage: string, message?: string, level?: string, callback?: (context: EventPluginContext) => void): void {\n    this.createLog(sourceOrMessage, message, level).submit(callback);\n  }\n\n  public createNotFound(resource: string): EventBuilder {\n    return this.createEvent().setType('404').setSource(resource);\n  }\n\n  public submitNotFound(resource: string, callback?: (context: EventPluginContext) => void): void {\n    this.createNotFound(resource).submit(callback);\n  }\n\n  public createSessionStart(): EventBuilder {\n    return this.createEvent().setType('session');\n  }\n\n  public submitSessionStart(callback?: (context: EventPluginContext) => void): void {\n    this.createSessionStart().submit(callback);\n  }\n\n  public submitSessionEnd(sessionIdOrUserId: string): void {\n    if (sessionIdOrUserId) {\n      this.config.log.info(`Submitting session end: ${sessionIdOrUserId}`);\n      this.config.submissionClient.sendHeartbeat(sessionIdOrUserId, true, this.config);\n    }\n  }\n\n  public submitSessionHeartbeat(sessionIdOrUserId: string): void {\n    if (sessionIdOrUserId) {\n      this.config.log.info(`Submitting session heartbeat: ${sessionIdOrUserId}`);\n      this.config.submissionClient.sendHeartbeat(sessionIdOrUserId, false, this.config);\n    }\n  }\n\n  public createEvent(pluginContextData?: ContextData): EventBuilder {\n    return new EventBuilder({ date: new Date() }, this, pluginContextData);\n  }\n\n  /**\n   * Submits the event to be sent to the server.\n   * @param event The event data.\n   * @param pluginContextData Any contextual data objects to be used by Exceptionless plugins to gather default information for inclusion in the report information.\n   * @param callback\n   */\n  public submitEvent(event: IEvent, pluginContextData?: ContextData, callback?: (context: EventPluginContext) => void): void {\n    function cancelled(context: EventPluginContext) {\n      if (!!context) {\n        context.cancelled = true;\n      }\n\n      return !!callback && callback(context);\n    }\n\n    const context = new EventPluginContext(this, event, pluginContextData);\n    if (!event) {\n      return cancelled(context);\n    }\n\n    if (!this.config.enabled) {\n      this.config.log.info('Event submission is currently disabled.');\n      return cancelled(context);\n    }\n\n    if (!event.data) {\n      event.data = {};\n    }\n\n    if (!event.tags || !event.tags.length) {\n      event.tags = [];\n    }\n\n    EventPluginManager.run(context, (ctx: EventPluginContext) => {\n      const config = ctx.client.config;\n      const ev = ctx.event;\n\n      if (!ctx.cancelled) {\n        // ensure all required data\n        if (!ev.type || ev.type.length === 0) {\n          ev.type = 'log';\n        }\n\n        if (!ev.date) {\n          ev.date = new Date();\n        }\n\n        config.queue.enqueue(ev);\n\n        if (ev.reference_id && ev.reference_id.length > 0) {\n          ctx.log.info(`Setting last reference id '${ev.reference_id}'`);\n          config.lastReferenceIdManager.setLast(ev.reference_id);\n        }\n      }\n\n      !!callback && callback(ctx);\n    });\n  }\n\n  /**\n   * Updates the user's email address and description of an event for the specified reference id.\n   * @param referenceId The reference id of the event to update.\n   * @param email The user's email address to set on the event.\n   * @param description The user's description of the event.\n   * @param callback The submission response.\n   */\n  public updateUserEmailAndDescription(referenceId: string, email: string, description: string, callback?: (response: SubmissionResponse) => void) {\n    if (!referenceId || !email || !description || !this.config.enabled) {\n      return !!callback && callback(new SubmissionResponse(500, 'cancelled'));\n    }\n\n    const userDescription: IUserDescription = { email_address: email, description };\n    this.config.submissionClient.postUserDescription(referenceId, userDescription, this.config, (response: SubmissionResponse) => {\n      if (!response.success) {\n        this.config.log.error(`Failed to submit user email and description for event '${referenceId}': ${response.statusCode} ${response.message}`);\n      }\n\n      !!callback && callback(response);\n    });\n  }\n\n  /**\n   * Gets the last event client id that was submitted to the server.\n   * @returns {string} The event client id.\n   */\n  public getLastReferenceId(): string {\n    return this.config.lastReferenceIdManager.getLast();\n  }\n\n  private updateSettingsTimer(initialDelay?: number) {\n    this.config.log.info(`Updating settings timer with delay: ${initialDelay}`);\n\n    this._timeoutId = clearTimeout(this._timeoutId);\n    this._timeoutId = clearInterval(this._intervalId);\n\n    const interval = this.config.updateSettingsWhenIdleInterval;\n    if (interval > 0) {\n      const updateSettings = () => SettingsManager.updateSettings(this.config);\n      if (initialDelay > 0) {\n        this._timeoutId = setTimeout(updateSettings, initialDelay);\n      }\n\n      this._intervalId = setInterval(updateSettings, interval);\n    }\n  }\n\n  /**\n   * The default ExceptionlessClient instance.\n   * @type {ExceptionlessClient}\n   */\n  public static get default() {\n    if (ExceptionlessClient._instance === null) {\n      ExceptionlessClient._instance = new ExceptionlessClient(null);\n    }\n\n    return ExceptionlessClient._instance;\n  }\n}\n\nexport class ContextData {\n  public setException(exception: Error): void {\n    if (exception) {\n      this['@@_Exception'] = exception;\n    }\n  }\n\n  public get hasException(): boolean {\n    return !!this['@@_Exception'];\n  }\n\n  public getException(): Error {\n    return this['@@_Exception'] || null;\n  }\n\n  public markAsUnhandledError(): void {\n    this['@@_IsUnhandledError'] = true;\n  }\n\n  public get isUnhandledError(): boolean {\n    return !!this['@@_IsUnhandledError'];\n  }\n\n  public setSubmissionMethod(method: string): void {\n    if (method) {\n      this['@@_SubmissionMethod'] = method;\n    }\n  }\n\n  public getSubmissionMethod(): string {\n    return this['@@_SubmissionMethod'] || null;\n  }\n}\n\nexport interface IEnvironmentInfo {\n  processor_count?: number;\n  total_physical_memory?: number;\n  available_physical_memory?: number;\n  command_line?: string;\n  process_name?: string;\n  process_id?: string;\n  process_memory_size?: number;\n  thread_id?: string;\n  architecture?: string;\n  o_s_name?: string;\n  o_s_version?: string;\n  ip_address?: string;\n  machine_name?: string;\n  install_id?: string;\n  runtime_version?: string;\n  data?: any;\n}\n\nexport interface IParameter {\n  data?: any;\n  generic_arguments?: string[];\n\n  name?: string;\n  type?: string;\n  type_namespace?: string;\n}\n\n                                          \n\nexport interface IMethod {\n  data?: any;\n  generic_arguments?: string[];\n  parameters?: IParameter[];\n\n  is_signature_target?: boolean;\n  declaring_namespace?: string;\n  declaring_type?: string;\n  name?: string;\n  module_id?: number;\n}\n\n                                    \n\nexport interface IStackFrame extends IMethod {\n  file_name?: string;\n  line_number?: number;\n  column?: number;\n}\n\n                                                                                 \n\nexport interface IInnerError {\n  message?: string;\n  type?: string;\n  code?: string;\n  data?: any;\n  inner?: IInnerError;\n  stack_trace?: IStackFrame[];\n  target_method?: IMethod;\n}\n\nexport interface IModule {\n  data?: any;\n\n  module_id?: number;\n  name?: string;\n  version?: string;\n  is_entry?: boolean;\n  created_date?: Date;\n  modified_date?: Date;\n}\n\n                                                                                 \n\nexport interface IError extends IInnerError {\n  modules?: IModule[];\n}\n\nexport interface IRequestInfo {\n  user_agent?: string;\n  http_method?: string;\n  is_secure?: boolean;\n  host?: string;\n  port?: number;\n  path?: string;\n  referrer?: string;\n  client_ip_address?: string;\n  cookies?: any;\n  post_data?: any;\n  query_string?: any;\n  data?: any;\n}\n\nexport interface IStorageItem {\n  timestamp: number;\n  value: any;\n}\n\n                                              \n\nexport interface IStorage {\n  save(value: any): number;\n  get(limit?: number): IStorageItem[];\n  remove(timestamp: number): void;\n  clear(): void;\n}\n\nexport type SubmissionCallback = (status: number, message: string, data?: string, headers?: object) => void;\n\nexport interface SubmissionRequest {\n  apiKey: string;\n  userAgent: string;\n  method: string;\n  url: string;\n  data: string;\n}\n\nn\nexport class Configuration implements IConfigurationSettings {\n  /**\n   * The default configuration settings that are applied to new configuration instances.\n   * @type {IConfigurationSettings}\n   * @private\n   */\n  private static _defaultSettings: IConfigurationSettings = null;\n\n  /**\n   * A default list of tags that will automatically be added to every\n   * report submitted to the server.\n   *\n   * @type {Array}\n   */\n  public defaultTags: string[] = [];\n\n  /**\n   * A default list of of extended data objects that will automatically\n   * be added to every report submitted to the server.\n   *\n   * @type {{}}\n   */\n  public defaultData: object = {};\n\n  /**\n   * Whether the client is currently enabled or not. If it is disabled,\n   * submitted errors will be discarded and no data will be sent to the server.\n   *\n   * @returns {boolean}\n   */\n  public enabled: boolean = true;\n\n  public environmentInfoCollector: IEnvironmentInfoCollector;\n  public errorParser: IErrorParser;\n  public lastReferenceIdManager: ILastReferenceIdManager = new DefaultLastReferenceIdManager();\n  public log: ILog;\n  public moduleCollector: IModuleCollector;\n  public requestInfoCollector: IRequestInfoCollector;\n\n  /**\n   * Maximum number of events that should be sent to the server together in a batch. (Defaults to 50)\n   */\n  public submissionBatchSize: number;\n  public submissionAdapter: ISubmissionAdapter;\n  public submissionClient: ISubmissionClient;\n\n  /**\n   * Contains a dictionary of custom settings that can be used to control\n   * the client and will be automatically updated from the server.\n   */\n  public settings: object = {};\n\n  public storage: IStorageProvider;\n\n  public queue: IEventQueue;\n\n  /**\n   * The API key that will be used when sending events to the server.\n   * @type {string}\n   * @private\n   */\n  private _apiKey: string;\n\n  /**\n   * The server url that all events will be sent to.\n   * @type {string}\n   * @private\n   */\n  private _serverUrl: string = 'https://collector.exceptionless.io';\n\n  /**\n   * The heartbeat server url that all heartbeats will be sent to.\n   * @type {string}\n   * @private\n   */\n  private _heartbeatServerUrl: string = 'https://heartbeat.exceptionless.io';\n\n  /**\n   * How often the client should check for updated server settings when idle. The default is every 2 minutes.\n   * @type {number}\n   * @private\n   */\n  private _updateSettingsWhenIdleInterval: number = 120000;\n\n  /**\n   * A list of exclusion patterns.\n   * @type {Array}\n   * @private\n   */\n  private _dataExclusions: string[] = [];\n\n  /**\n   * A list of user agent patterns.\n   * @type {Array}\n   * @private\n   */\n  private _userAgentBotPatterns: string[] = [];\n\n  /**\n   * The list of plugins that will be used in this configuration.\n   * @type {Array}\n   * @private\n   */\n  private _plugins: IEventPlugin[] = [];\n\n  /**\n   * A list of handlers that will be fired when configuration changes.\n   * @type {Array}\n   * @private\n   */\n  private _handlers: Array<(config: Configuration) => void> = [];\n\n  constructor(configSettings?: IConfigurationSettings) {\n    function inject(fn: any) {\n      return typeof fn === 'function' ? fn(this) : fn;\n    }\n\n    configSettings = Utils.merge(Configuration.defaults, configSettings);\n\n    this.log = inject(configSettings.log) || new NullLog();\n    this.apiKey = configSettings.apiKey;\n    this.serverUrl = configSettings.serverUrl;\n    this.heartbeatServerUrl = configSettings.heartbeatServerUrl;\n    this.updateSettingsWhenIdleInterval = configSettings.updateSettingsWhenIdleInterval;\n\n    this.environmentInfoCollector = inject(configSettings.environmentInfoCollector);\n    this.errorParser = inject(configSettings.errorParser);\n    this.lastReferenceIdManager = inject(configSettings.lastReferenceIdManager) || new DefaultLastReferenceIdManager();\n    this.moduleCollector = inject(configSettings.moduleCollector);\n    this.requestInfoCollector = inject(configSettings.requestInfoCollector);\n    this.submissionBatchSize = inject(configSettings.submissionBatchSize) || 50;\n    this.submissionAdapter = inject(configSettings.submissionAdapter);\n    this.submissionClient = inject(configSettings.submissionClient) || new DefaultSubmissionClient();\n    this.storage = inject(configSettings.storage) || new InMemoryStorageProvider();\n    this.queue = inject(configSettings.queue) || new DefaultEventQueue(this);\n\n    SettingsManager.applySavedServerSettings(this);\n    EventPluginManager.addDefaultPlugins(this);\n  }\n\n  /**\n   * The API key that will be used when sending events to the server.\n   * @returns {string}\n   */\n  public get apiKey(): string {\n    return this._apiKey;\n  }\n\n  /**\n   * The API key that will be used when sending events to the server.\n   * @param value\n   */\n  public set apiKey(value: string) {\n    this._apiKey = value || null;\n    this.log.info(`apiKey: ${this._apiKey}`);\n    this.changed();\n  }\n\n  /**\n   * Returns true if the apiKey is valid.\n   * @returns {boolean}\n   */\n  public get isValid(): boolean {\n    return !!this.apiKey && this.apiKey.length >= 10;\n  }\n\n  /**\n   * The server url that all events will be sent to.\n   * @returns {string}\n   */\n  public get serverUrl(): string {\n    return this._serverUrl;\n  }\n\n  /**\n   * The server url that all events will be sent to.\n   * @param value\n   */\n  public set serverUrl(value: string) {\n    if (!!value) {\n      this._serverUrl = value;\n      this._heartbeatServerUrl = value;\n      this.log.info(`serverUrl: ${value}`);\n      this.changed();\n    }\n  }\n\n  /**\n   * The heartbeat server url that all heartbeats will be sent to.\n   * @returns {string}\n   */\n  public get heartbeatServerUrl(): string {\n    return this._heartbeatServerUrl;\n  }\n\n  /**\n   * The heartbeat server url that all heartbeats will be sent to.\n   * @param value\n   */\n  public set heartbeatServerUrl(value: string) {\n    if (!!value) {\n      this._heartbeatServerUrl = value;\n      this.log.info(`heartbeatServerUrl: ${value}`);\n      this.changed();\n    }\n  }\n\n  /**\n   * How often the client should check for updated server settings when idle. The default is every 2 minutes.\n   * @returns {number}\n   */\n  public get updateSettingsWhenIdleInterval(): number {\n    return this._updateSettingsWhenIdleInterval;\n  }\n\n  /**\n   * How often the client should check for updated server settings when idle. The default is every 2 minutes.\n   * @param value\n   */\n  public set updateSettingsWhenIdleInterval(value: number) {\n    if (typeof value !== 'number') {\n      return;\n    }\n\n    if (value <= 0) {\n      value = -1;\n    } else if (value > 0 && value < 15000) {\n      value = 15000;\n    }\n\n    this._updateSettingsWhenIdleInterval = value;\n    this.log.info(`updateSettingsWhenIdleInterval: ${value}`);\n    this.changed();\n  }\n\n  /**\n   *  A list of exclusion patterns that will automatically remove any data that\n   *  matches them from any data submitted to the server.\n   *\n   *  For example, entering CreditCard will remove any extended data properties,\n   *  form fields, cookies and query parameters from the report.\n   *\n   * @returns {string[]}\n   */\n  public get dataExclusions(): string[] {\n    const exclusions: string = this.settings['@@DataExclusions'];\n    return this._dataExclusions.concat(exclusions && exclusions.split(',') || []);\n  }\n\n  /**\n   * Add items to the list of exclusion patterns that will automatically remove any\n   * data that matches them from any data submitted to the server.\n   *\n   * For example, entering CreditCard will remove any extended data properties, form\n   * fields, cookies and query parameters from the report.\n   *\n   * @param exclusions\n   */\n  public addDataExclusions(...exclusions: string[]) {\n    this._dataExclusions = Utils.addRange<string>(this._dataExclusions, ...exclusions);\n  }\n\n  /**\n   * A list of user agent patterns that will cause any event with a matching user agent to not be submitted.\n   *\n   * For example, entering *Bot* will cause any events that contains a user agent of Bot will not be submitted.\n   *\n   * @returns {string[]}\n   */\n  public get userAgentBotPatterns(): string[] {\n    const patterns: string = this.settings['@@UserAgentBotPatterns'];\n    return this._userAgentBotPatterns.concat(patterns && patterns.split(',') || []);\n  }\n\n  /**\n   * Add items to the list of user agent patterns that will cause any event with a matching user agent to not be submitted.\n   *\n   * For example, entering *Bot* will cause any events that contains a user agent of Bot will not be submitted.\n   *\n   * @param userAgentBotPatterns\n   */\n  public addUserAgentBotPatterns(...userAgentBotPatterns: string[]) {\n    this._userAgentBotPatterns = Utils.addRange<string>(this._userAgentBotPatterns, ...userAgentBotPatterns);\n  }\n\n  /**\n   * The list of plugins that will be used in this configuration.\n   * @returns {IEventPlugin[]}\n   */\n  public get plugins(): IEventPlugin[] {\n    return this._plugins.sort((p1: IEventPlugin, p2: IEventPlugin) => {\n      return (p1.priority < p2.priority) ? -1 : (p1.priority > p2.priority) ? 1 : 0;\n    });\n  }\n\n  /**\n   * Register an plugin to be used in this configuration.\n   * @param plugin\n   */\n  public addPlugin(plugin: IEventPlugin): void;\n\n  /**\n   * Register an plugin to be used in this configuration.\n   * @param name The name used to identify the plugin.\n   * @param priority Used to determine plugins priority.\n   * @param pluginAction A function that is run.\n   */\n  public addPlugin(name: string, priority: number, pluginAction: (context: EventPluginContext, next?: () => void) => void): void;\n  public addPlugin(pluginOrName: IEventPlugin | string, priority?: number, pluginAction?: (context: EventPluginContext, next?: () => void) => void): void {\n    const plugin: IEventPlugin = !!pluginAction ? { name: pluginOrName as string, priority, run: pluginAction } :  pluginOrName as IEventPlugin;\n    if (!plugin || !plugin.run) {\n      this.log.error('Add plugin failed: Run method not defined');\n      return;\n    }\n\n    if (!plugin.name) {\n      plugin.name = Utils.guid();\n    }\n\n    if (!plugin.priority) {\n      plugin.priority = 0;\n    }\n\n    let pluginExists: boolean = false;\n    const plugins = this._plugins; // optimization for minifier.\n    for (const p of plugins) {\n      if (p.name === plugin.name) {\n        pluginExists = true;\n        break;\n      }\n    }\n\n    if (!pluginExists) {\n      plugins.push(plugin);\n    }\n  }\n\n  /**\n   * Remove the plugin from this configuration.\n   * @param plugin\n   */\n  public removePlugin(plugin: IEventPlugin): void;\n\n  /**\n   * Remove an plugin by key from this configuration.\n   * @param name\n   */\n  public removePlugin(pluginOrName: IEventPlugin | string): void {\n    const name: string = typeof pluginOrName === 'string' ? pluginOrName : pluginOrName.name;\n    if (!name) {\n      this.log.error('Remove plugin failed: Plugin name not defined');\n      return;\n    }\n\n    const plugins = this._plugins; // optimization for minifier.\n    for (let index = 0; index < plugins.length; index++) {\n      if (plugins[index].name === name) {\n        plugins.splice(index, 1);\n        break;\n      }\n    }\n  }\n\n  /**\n   * Automatically set the application version for events.\n   * @param version\n   */\n  public setVersion(version: string): void {\n    if (!!version) {\n      this.defaultData['@version'] = version;\n    }\n  }\n\n  public setUserIdentity(userInfo: IUserInfo): void;\n  public setUserIdentity(identity: string): void;\n  public setUserIdentity(identity: string, name: string): void;\n  public setUserIdentity(userInfoOrIdentity: IUserInfo | string, name?: string): void {\n    const USER_KEY: string = '@user'; // optimization for minifier.\n    const userInfo: IUserInfo = typeof userInfoOrIdentity !== 'string' ? userInfoOrIdentity : { identity: userInfoOrIdentity, name };\n\n    const shouldRemove: boolean = !userInfo || (!userInfo.identity && !userInfo.name);\n    if (shouldRemove) {\n      delete this.defaultData[USER_KEY];\n    } else {\n      this.defaultData[USER_KEY] = userInfo;\n    }\n\n    this.log.info(`user identity: ${shouldRemove ? 'null' : userInfo.identity}`);\n  }\n\n  /**\n   * Used to identify the client that sent the events to the server.\n   * @returns {string}\n   */\n  public get userAgent(): string {\n    return 'exceptionless-js/1.0.0.0';\n  }\n\n  /**\n   * Automatically send a heartbeat to keep the session alive.\n   */\n  public useSessions(sendHeartbeats: boolean = true, heartbeatInterval: number = 30000): void {\n    if (sendHeartbeats) {\n      this.addPlugin(new HeartbeatPlugin(heartbeatInterval));\n    }\n  }\n\n  /**\n   * Automatically set a reference id for error events.\n   */\n  public useReferenceIds(): void {\n    this.addPlugin(new ReferenceIdPlugin());\n  }\n\n  public useLocalStorage(): void {\n    // This method will be injected via the prototype.\n  }\n\n  // TODO: Support a min log level.\n  public useDebugLogger(): void {\n    this.log = new ConsoleLog();\n  }\n\n  public onChanged(handler: (config: Configuration) => void) {\n    !!handler && this._handlers.push(handler);\n  }\n\n  private changed() {\n    const handlers = this._handlers; // optimization for minifier.\n    for (const handler of handlers) {\n      try {\n        handler(this);\n      } catch (ex) {\n        this.log.error(`Error calling onChanged handler: ${ex}`);\n      }\n    }\n  }\n\n  /**\n   * The default configuration settings that are applied to new configuration instances.\n   * @returns {IConfigurationSettings}\n   */\n  public static get defaults() {\n    if (Configuration._defaultSettings === null) {\n      Configuration._defaultSettings = {};\n    }\n\n    return Configuration._defaultSettings;\n  }\n}\n\nexport interface IUserDescription {\n  email_address?: string;\n  description?: string;\n  data?: any;\n}\n\nexport class SettingsResponse {\n  public success: boolean = false;\n  public settings: any;\n  public settingsVersion: number = -1;\n  public message: string;\n  public exception: any;\n\n  constructor(success: boolean, settings: any, settingsVersion: number = -1, exception: any = null, message: string = null) {\n    this.success = success;\n    this.settings = settings;\n    this.settingsVersion = settingsVersion;\n    this.exception = exception;\n    this.message = message;\n  }\n}\n\n                                                                                                                                                                                                                                                                                                                                                                                   \n\nexport class EventBuilder {\n  public target: IEvent;\n  public client: ExceptionlessClient;\n  public pluginContextData: ContextData;\n\n  private _validIdentifierErrorMessage: string = 'must contain between 8 and 100 alphanumeric or \\'-\\' characters.'; // optimization for minifier.\n\n  constructor(event: IEvent, client: ExceptionlessClient, pluginContextData?: ContextData) {\n    this.target = event;\n    this.client = client;\n    this.pluginContextData = pluginContextData || new ContextData();\n  }\n\n  public setType(type: string): EventBuilder {\n    if (!!type) {\n      this.target.type = type;\n    }\n\n    return this;\n  }\n\n  public setSource(source: string): EventBuilder {\n    if (!!source) {\n      this.target.source = source;\n    }\n\n    return this;\n  }\n\n  public setReferenceId(referenceId: string): EventBuilder {\n    if (!this.isValidIdentifier(referenceId)) {\n      throw new Error(`ReferenceId ${this._validIdentifierErrorMessage}`);\n    }\n\n    this.target.reference_id = referenceId;\n    return this;\n  }\n\n  /**\n   * Allows you to reference a parent event by its ReferenceId property. This allows you to have parent and child relationships.\n   * @param name Reference name\n   * @param id The reference id that points to a specific event\n   * @returns {EventBuilder}\n   */\n  public setEventReference(name: string, id: string): EventBuilder {\n    if (!name) {\n      throw new Error('Invalid name');\n    }\n\n    if (!id || !this.isValidIdentifier(id)) {\n      throw new Error(`Id ${this._validIdentifierErrorMessage}`);\n    }\n\n    this.setProperty('@ref:' + name, id);\n    return this;\n  }\n\n  public setMessage(message: string): EventBuilder {\n    if (!!message) {\n      this.target.message = message;\n    }\n\n    return this;\n  }\n\n  public setGeo(latitude: number, longitude: number): EventBuilder {\n    if (latitude < -90.0 || latitude > 90.0) {\n      throw new Error('Must be a valid latitude value between -90.0 and 90.0.');\n    }\n\n    if (longitude < -180.0 || longitude > 180.0) {\n      throw new Error('Must be a valid longitude value between -180.0 and 180.0.');\n    }\n\n    this.target.geo = `${latitude},${longitude}`;\n    return this;\n  }\n\n  public setUserIdentity(userInfo: IUserInfo): EventBuilder;\n  public setUserIdentity(identity: string): EventBuilder;\n  public setUserIdentity(identity: string, name: string): EventBuilder;\n  public setUserIdentity(userInfoOrIdentity: IUserInfo | string, name?: string): EventBuilder {\n    const userInfo = typeof userInfoOrIdentity !== 'string' ? userInfoOrIdentity : { identity: userInfoOrIdentity, name };\n    if (!userInfo || (!userInfo.identity && !userInfo.name)) {\n      return this;\n    }\n\n    this.setProperty('@user', userInfo);\n    return this;\n  }\n\n  /**\n   * Sets the user's description of the event.\n   *\n   * @param emailAddress The email address\n   * @param description The user's description of the event.\n   * @returns {EventBuilder}\n   */\n  public setUserDescription(emailAddress: string, description: string): EventBuilder {\n    if (emailAddress && description) {\n      this.setProperty('@user_description', { email_address: emailAddress, description });\n    }\n\n    return this;\n  }\n\n  /**\n   * Changes default stacking behavior by setting manual\n   * stacking information.\n   * @param signatureData A dictionary of strings to use for stacking.\n   * @param title An optional title for the stacking information.\n   * @returns {EventBuilder}\n   */\n  public setManualStackingInfo(signatureData: any, title?: string) {\n    if (signatureData) {\n      const stack: IManualStackingInfo = { signature_data: signatureData };\n      if (title) {\n        stack.title = title;\n      }\n\n      this.setProperty('@stack', stack);\n    }\n\n    return this;\n  }\n\n  /**\n   * Changes default stacking behavior by setting the stacking key.\n   * @param manualStackingKey The manual stacking key.\n   * @param title An optional title for the stacking information.\n   * @returns {EventBuilder}\n   */\n  public setManualStackingKey(manualStackingKey: string, title?: string): EventBuilder {\n    if (manualStackingKey) {\n      const data = { ManualStackingKey: manualStackingKey };\n      this.setManualStackingInfo(data, title);\n    }\n\n    return this;\n  }\n\n  public setValue(value: number): EventBuilder {\n    if (!!value) {\n      this.target.value = value;\n    }\n\n    return this;\n  }\n\n  public addTags(...tags: string[]): EventBuilder {\n    this.target.tags = Utils.addRange<string>(this.target.tags, ...tags);\n    return this;\n  }\n\n  /**\n   * Adds the object to extended data. Uses @excludedPropertyNames\n   * to exclude data from being included in the event.\n   * @param name The data object to add.\n   * @param value The name of the object to add.\n   * @param maxDepth The max depth of the object to include.\n   * @param excludedPropertyNames Any property names that should be excluded.\n   */\n  public setProperty(name: string, value: any, maxDepth?: number, excludedPropertyNames?: string[]): EventBuilder {\n    if (!name || (value === undefined || value == null)) {\n      return this;\n    }\n\n    if (!this.target.data) {\n      this.target.data = {};\n    }\n\n    const result = JSON.parse(Utils.stringify(value, this.client.config.dataExclusions.concat(excludedPropertyNames || []), maxDepth));\n    if (!Utils.isEmpty(result)) {\n      this.target.data[name] = result;\n    }\n\n    return this;\n  }\n\n  public markAsCritical(critical: boolean): EventBuilder {\n    if (critical) {\n      this.addTags('Critical');\n    }\n\n    return this;\n  }\n\n  public addRequestInfo(request: object): EventBuilder {\n    if (!!request) {\n      this.pluginContextData['@request'] = request;\n    }\n\n    return this;\n  }\n\n  public submit(callback?: (context: EventPluginContext) => void): void {\n    this.client.submitEvent(this.target, this.pluginContextData, callback);\n  }\n\n  private isValidIdentifier(value: string): boolean {\n    if (!value) {\n      return true;\n    }\n\n    if (value.length < 8 || value.length > 100) {\n      return false;\n    }\n\n    for (let index = 0; index < value.length; index++) {\n      const code = value.charCodeAt(index);\n      const isDigit = (code >= 48) && (code <= 57);\n      const isLetter = ((code >= 65) && (code <= 90)) || ((code >= 97) && (code <= 122));\n      const isMinus = code === 45;\n\n      if (!(isDigit || isLetter) && !isMinus) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n}\n\nexport interface IManualStackingInfo {\n  title?: string;\n  signature_data?: any;\n}\n\n                                                                                                                                                \n\nexport class ConfigurationDefaultsPlugin implements IEventPlugin {\n  public priority: number = 10;\n  public name: string = 'ConfigurationDefaultsPlugin';\n\n  public run(context: EventPluginContext, next?: () => void): void {\n    const config = context.client.config;\n    const defaultTags: string[] = config.defaultTags || [];\n    for (const tag of defaultTags) {\n      if (!!tag && context.event.tags.indexOf(tag) < 0) {\n        context.event.tags.push(tag);\n      }\n    }\n\n    // tslint:disable-next-line:ban-types\n    const defaultData: Object = config.defaultData || {};\n    for (const key in defaultData) {\n      if (!!defaultData[key]) {\n        const result = JSON.parse(Utils.stringify(defaultData[key], config.dataExclusions));\n        if (!Utils.isEmpty(result)) {\n          context.event.data[key] = result;\n        }\n      }\n    }\n\n    next && next();\n  }\n}\n\n                                                                                                                                                                                                        \n\nexport class DuplicateCheckerPlugin implements IEventPlugin {\n  public priority: number = 1010;\n  public name: string = 'DuplicateCheckerPlugin';\n\n  private _mergedEvents: MergedEvent[] = [];\n  private _processedHashcodes: TimestampedHash[] = [];\n  private _getCurrentTime: () => number;\n  private _interval: number;\n\n  constructor(getCurrentTime: () => number = () => Date.now(), interval: number = 30000) {\n    this._getCurrentTime = getCurrentTime;\n    this._interval = interval;\n\n    setInterval(() => {\n      while (this._mergedEvents.length > 0) {\n        this._mergedEvents.shift().resubmit();\n      }\n    }, interval);\n  }\n\n  public run(context: EventPluginContext, next?: () => void): void {\n    function getHashCode(error: IInnerError): number {\n      let hashCode = 0;\n      while (error) {\n        if (error.message && error.message.length) {\n          hashCode += (hashCode * 397) ^ Utils.getHashCode(error.message);\n        }\n        if (error.stack_trace && error.stack_trace.length) {\n          hashCode += (hashCode * 397) ^ Utils.getHashCode(JSON.stringify(error.stack_trace));\n        }\n        error = error.inner;\n      }\n\n      return hashCode;\n    }\n\n    const error = context.event.data['@error'];\n    const hashCode = getHashCode(error);\n    if (hashCode) {\n      const count = context.event.count || 1;\n      const now = this._getCurrentTime();\n\n      const merged = this._mergedEvents.filter((s) => s.hashCode === hashCode)[0];\n      if (merged) {\n        merged.incrementCount(count);\n        merged.updateDate(context.event.date);\n        context.log.info('Ignoring duplicate event with hash: ' + hashCode);\n        context.cancelled = true;\n      }\n\n      if (!context.cancelled && this._processedHashcodes.some((h) => h.hash === hashCode && h.timestamp >= (now - this._interval))) {\n        context.log.trace('Adding event with hash: ' + hashCode);\n        this._mergedEvents.push(new MergedEvent(hashCode, context, count));\n        context.cancelled = true;\n      }\n\n      if (!context.cancelled) {\n        context.log.trace('Enqueueing event with hash: ' + hashCode + 'to cache.');\n        this._processedHashcodes.push({ hash: hashCode, timestamp: now });\n\n        // Only keep the last 50 recent errors.\n        while (this._processedHashcodes.length > 50) {\n          this._processedHashcodes.shift();\n        }\n      }\n    }\n\n    next && next();\n  }\n}\n\ninterface TimestampedHash {\n  hash: number;\n  timestamp: number;\n}\n\nclass MergedEvent {\n  public hashCode: number;\n  private _count: number;\n  private _context: EventPluginContext;\n\n  constructor(hashCode: number, context: EventPluginContext, count: number) {\n    this.hashCode = hashCode;\n    this._context = context;\n    this._count = count;\n  }\n\n  public incrementCount(count: number) {\n    this._count += count;\n  }\n\n  public resubmit() {\n    this._context.event.count = this._count;\n    this._context.client.config.queue.enqueue(this._context.event);\n  }\n\n  public updateDate(date) {\n    if (date > this._context.event.date) {\n      this._context.event.date = date;\n    }\n  }\n}\n\n                                                                                                                                                                             \n\nexport class EnvironmentInfoPlugin implements IEventPlugin {\n  public priority: number = 80;\n  public name: string = 'EnvironmentInfoPlugin';\n\n  public run(context: EventPluginContext, next?: () => void): void {\n    const ENVIRONMENT_KEY: string = '@environment'; // optimization for minifier.\n\n    const collector = context.client.config.environmentInfoCollector;\n    if (!context.event.data[ENVIRONMENT_KEY] && collector) {\n      const environmentInfo: IEnvironmentInfo = collector.getEnvironmentInfo(context);\n      if (!!environmentInfo) {\n        context.event.data[ENVIRONMENT_KEY] = environmentInfo;\n      }\n    }\n\n    next && next();\n  }\n}\n\n                                                                                                                                                \n\nexport class ErrorPlugin implements IEventPlugin {\n  public priority: number = 30;\n  public name: string = 'ErrorPlugin';\n\n  public run(context: EventPluginContext, next?: () => void): void {\n    const ERROR_KEY: string = '@error'; // optimization for minifier.\n    const ignoredProperties: string[] = [\n      'arguments',\n      'column',\n      'columnNumber',\n      'description',\n      'fileName',\n      'message',\n      'name',\n      'number',\n      'line',\n      'lineNumber',\n      'opera#sourceloc',\n      'sourceId',\n      'sourceURL',\n      'stack',\n      'stackArray',\n      'stacktrace'\n    ];\n\n    const exception = context.contextData.getException();\n    if (!!exception) {\n      context.event.type = 'error';\n\n      if (!context.event.data[ERROR_KEY]) {\n        const config = context.client.config;\n        const parser = config.errorParser;\n        if (!parser) {\n          throw new Error('No error parser was defined.');\n        }\n\n        const result = parser.parse(context, exception);\n        if (!!result) {\n          const additionalData = JSON.parse(Utils.stringify(exception, config.dataExclusions.concat(ignoredProperties)));\n          if (!Utils.isEmpty(additionalData)) {\n            if (!result.data) {\n              result.data = {};\n            }\n            result.data['@ext'] = additionalData;\n          }\n\n          context.event.data[ERROR_KEY] = result;\n        }\n      }\n    }\n\n    next && next();\n  }\n}\n\n                                                                                                                                                                                                        \n\nexport class EventExclusionPlugin implements IEventPlugin {\n  public priority: number = 45;\n  public name: string = 'EventExclusionPlugin';\n\n  public run(context: EventPluginContext, next?: () => void): void {\n    function getLogLevel(level: string): number {\n      switch ((level || '').toLowerCase().trim()) {\n        case 'trace':\n        case 'true':\n        case '1':\n        case 'yes':\n          return 0;\n        case 'debug':\n          return 1;\n        case 'info':\n          return 2;\n        case 'warn':\n          return 3;\n        case 'error':\n          return 4;\n        case 'fatal':\n          return 5;\n        case 'off':\n        case 'false':\n        case '0':\n        case 'no':\n          return 6;\n        default:\n          return -1;\n      }\n    }\n\n    function getMinLogLevel(settings: object, loggerName: string = '*'): number {\n      return getLogLevel(getTypeAndSourceSetting(settings, 'log', loggerName, 'Trace') + '');\n    }\n\n    // tslint:disable-next-line:ban-types\n    function getTypeAndSourceSetting(settings: Object = {}, type: string, source: string, defaultValue?: string|boolean): string|boolean {\n      if (!type) {\n        return defaultValue;\n      }\n\n      const isLog = type === 'log';\n      const sourcePrefix =  `@@${type}:`;\n\n      const value = settings[sourcePrefix + source];\n      if (value) {\n        return !isLog ? Utils.toBoolean(value) : value;\n      }\n\n      // check for wildcard match\n      for (const key in settings) {\n        if (Utils.startsWith(key.toLowerCase(), sourcePrefix.toLowerCase()) && Utils.isMatch(source, [key.substring(sourcePrefix.length)])) {\n          return !isLog ? Utils.toBoolean(settings[key]) : settings[key];\n        }\n      }\n\n      return defaultValue;\n    }\n\n    const ev = context.event;\n    const log = context.log;\n    const settings = context.client.config.settings;\n\n    if (ev.type === 'log') {\n      const minLogLevel = getMinLogLevel(settings, ev.source);\n      const logLevel = getLogLevel(ev.data['@level']);\n\n      if (logLevel >= 0 && (logLevel > 5 || logLevel < minLogLevel)) {\n        log.info('Cancelling log event due to minimum log level.');\n        context.cancelled = true;\n      }\n    } else if (ev.type === 'error') {\n      let error: IInnerError = ev.data['@error'];\n      while (!context.cancelled && error) {\n        if (getTypeAndSourceSetting(settings, ev.type, error.type, true) === false) {\n          log.info(`Cancelling error from excluded exception type: ${error.type}`);\n          context.cancelled = true;\n        }\n\n        error = error.inner;\n      }\n    } else if (getTypeAndSourceSetting(settings, ev.type, ev.source, true) === false) {\n      log.info(`Cancelling event from excluded type: ${ev.type} and source: ${ev.source}`);\n      context.cancelled = true;\n    }\n\n    next && next();\n  }\n}\n\n                                                                                                                                                           \n\nexport class ModuleInfoPlugin implements IEventPlugin {\n  public priority: number = 50;\n  public name: string = 'ModuleInfoPlugin';\n\n  public run(context: EventPluginContext, next?: () => void): void {\n    const ERROR_KEY: string = '@error'; // optimization for minifier.\n\n    const collector = context.client.config.moduleCollector;\n    if (context.event.data[ERROR_KEY] && !context.event.data['@error'].modules && !!collector) {\n      const modules: IModule[] = collector.getModules(context);\n      if (modules && modules.length > 0) {\n        context.event.data[ERROR_KEY].modules = modules;\n      }\n    }\n\n    next && next();\n  }\n}\n\n                                                                                                                                                                                                          \n\nexport class RequestInfoPlugin implements IEventPlugin {\n  public priority: number = 70;\n  public name: string = 'RequestInfoPlugin';\n\n  public run(context: EventPluginContext, next?: () => void): void {\n    const REQUEST_KEY: string = '@request'; // optimization for minifier.\n\n    const config = context.client.config;\n    const collector = config.requestInfoCollector;\n    if (!context.event.data[REQUEST_KEY] && !!collector) {\n      const requestInfo: IRequestInfo = collector.getRequestInfo(context);\n      if (!!requestInfo) {\n        if (Utils.isMatch(requestInfo.user_agent, config.userAgentBotPatterns)) {\n          context.log.info('Cancelling event as the request user agent matches a known bot pattern');\n          context.cancelled = true;\n        } else {\n          context.event.data[REQUEST_KEY] = requestInfo;\n        }\n      }\n    }\n\n    next && next();\n  }\n}\n\n                                                                                                           \n\nexport class SubmissionMethodPlugin implements IEventPlugin {\n  public priority: number = 100;\n  public name: string = 'SubmissionMethodPlugin';\n\n  public run(context: EventPluginContext, next?: () => void): void {\n    const submissionMethod: string = context.contextData.getSubmissionMethod();\n    if (!!submissionMethod) {\n      context.event.data['@submission_method'] = submissionMethod;\n    }\n\n    next && next();\n  }\n}\n\n                                                                                     \n\nexport class InMemoryStorage implements IStorage {\n  private maxItems: number;\n  private items: IStorageItem[] = [];\n  private lastTimestamp: number = 0;\n\n  constructor(maxItems: number) {\n    this.maxItems = maxItems;\n  }\n\n  public save(value: any): number {\n    if (!value) {\n      return null;\n    }\n\n    const items = this.items;\n    const timestamp = Math.max(Date.now(), this.lastTimestamp + 1);\n    const item = { timestamp, value };\n\n    if (items.push(item) > this.maxItems) {\n      items.shift();\n    }\n\n    this.lastTimestamp = timestamp;\n    return item.timestamp;\n  }\n\n  public get(limit?: number): IStorageItem[] {\n    return this.items.slice(0, limit);\n  }\n\n  public remove(timestamp: number): void {\n    const items = this.items;\n    for (let i = 0; i < items.length; i++) {\n      if (items[i].timestamp === timestamp) {\n        items.splice(i, 1);\n        return;\n      }\n    }\n  }\n\n  public clear(): void {\n    this.items = [];\n  }\n}\n\nexport interface IClientConfiguration {\n  settings: object;\n  version: number;\n}\n\n                                                                                     \n\nexport abstract class KeyValueStorageBase implements IStorage {\n  private maxItems: number;\n  private items: number[];\n  private lastTimestamp: number = 0;\n\n  constructor(maxItems) {\n    this.maxItems = maxItems;\n  }\n\n  public save(value: any, single?: boolean): number {\n    if (!value) {\n      return null;\n    }\n\n    this.ensureIndex();\n\n    const items = this.items;\n    const timestamp = Math.max(Date.now(), this.lastTimestamp + 1);\n    const key = this.getKey(timestamp);\n    const json = JSON.stringify(value);\n\n    try {\n      this.write(key, json);\n      this.lastTimestamp = timestamp;\n      if (items.push(timestamp) > this.maxItems) {\n        this.delete(this.getKey(items.shift()));\n      }\n    } catch (e) {\n      return null;\n    }\n\n    return timestamp;\n  }\n\n  public get(limit?: number): IStorageItem[] {\n    this.ensureIndex();\n\n    return this.items.slice(0, limit)\n      .map((timestamp) => {\n        // Read and parse item for this timestamp\n        const key = this.getKey(timestamp);\n        try {\n          const json = this.read(key);\n          const value = JSON.parse(json, parseDate);\n          return { timestamp, value };\n        } catch (error) {\n          // Something went wrong - try to delete the cause.\n          this.safeDelete(key);\n          return null;\n        }\n      })\n      .filter((item) => item != null);\n  }\n\n  public remove(timestamp: number): void {\n    this.ensureIndex();\n\n    const items = this.items;\n    const index = items.indexOf(timestamp);\n    if (index >= 0) {\n      const key = this.getKey(timestamp);\n      this.safeDelete(key);\n      items.splice(index, 1);\n    }\n  }\n\n  public clear(): void {\n    this.items.forEach((item) => this.safeDelete(this.getKey(item)));\n    this.items = [];\n  }\n\n  protected abstract write(key: string, value: string): void;\n  protected abstract read(key: string): string;\n  protected abstract readAllKeys(): string[];\n  protected abstract delete(key: string);\n  protected abstract getKey(timestamp: number): string;\n  protected abstract getTimestamp(key: string): number;\n\n  private ensureIndex() {\n    if (!this.items) {\n      this.items = this.createIndex();\n      this.lastTimestamp = Math.max(0, ...this.items) + 1;\n    }\n  }\n\n  private safeDelete(key: string): void {\n    try {\n      this.delete(key);\n    } catch (error) {\n    }\n  }\n\n  private createIndex() {\n    try {\n      const keys = this.readAllKeys();\n      return keys.map((key) => {\n        try {\n          const timestamp = this.getTimestamp(key);\n          if (!timestamp) {\n            this.safeDelete(key);\n            return null;\n          }\n          return timestamp;\n        } catch (error) {\n          this.safeDelete(key);\n          return null;\n        }\n      }).filter((timestamp) => timestamp != null)\n        .sort((a, b) => a - b);\n    } catch (error) {\n      return [];\n    }\n  }\n}\n\nfunction parseDate(key, value) {\n  const dateRegx = /\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d+([+-][0-2]\\d:[0-5]\\d|Z)/g;\n  if (typeof value === 'string') {\n    const a = dateRegx.exec(value);\n    if (a) {\n      return new Date(value);\n    }\n  }\n  return value;\n}\n\n                                                            \n\nexport class BrowserStorage extends KeyValueStorageBase {\n  private prefix: string;\n\n  public static isAvailable(): boolean {\n    try {\n      const storage = window.localStorage;\n      const x = '__storage_test__';\n      storage.setItem(x, x);\n      storage.removeItem(x);\n      return true;\n    } catch (e) {\n      return false;\n    }\n  }\n\n  constructor(namespace: string, prefix: string = 'com.exceptionless.', maxItems: number = 20) {\n    super(maxItems);\n\n    this.prefix = prefix + namespace + '-';\n  }\n\n  public write(key: string, value: string) {\n    window.localStorage.setItem(key, value);\n  }\n\n  public read(key: string) {\n    return window.localStorage.getItem(key);\n  }\n\n  public readAllKeys() {\n    return Object.keys(window.localStorage)\n      .filter((key) => key.indexOf(this.prefix) === 0);\n  }\n\n  public delete(key: string) {\n    window.localStorage.removeItem(key);\n  }\n\n  public getKey(timestamp) {\n    return this.prefix + timestamp;\n  }\n\n  public getTimestamp(key) {\n    return parseInt(key.substr(this.prefix.length), 10);\n  }\n}\n\n                                                                                                                                                                                                                                                                                                           \n\nexport class DefaultErrorParser implements IErrorParser {\n  public parse(context: EventPluginContext, exception: Error): IError {\n    function getParameters(parameters: string | string[]): IParameter[] {\n      const params: string[] = (typeof parameters === 'string' ? [parameters] : parameters) || [];\n\n      const result: IParameter[] = [];\n      for (const param of params) {\n        result.push({ name: param });\n      }\n\n      return result;\n    }\n\n    function getStackFrames(stackFrames: TraceKit.StackFrame[]): IStackFrame[] {\n      const ANONYMOUS: string = '<anonymous>';\n      const frames: IStackFrame[] = [];\n\n      for (const frame of stackFrames) {\n        frames.push({\n          name: (frame.func || ANONYMOUS).replace('?', ANONYMOUS),\n          parameters: getParameters(frame.args),\n          file_name: frame.url,\n          line_number: frame.line || 0,\n          column: frame.column || 0\n        });\n      }\n\n      return frames;\n    }\n\n    const TRACEKIT_STACK_TRACE_KEY: string = '@@_TraceKit.StackTrace'; // optimization for minifier.\n\n    const stackTrace: TraceKit.StackTrace = !!context.contextData[TRACEKIT_STACK_TRACE_KEY]\n      ? context.contextData[TRACEKIT_STACK_TRACE_KEY]\n      : TraceKit.computeStackTrace(exception, 25);\n\n    if (!stackTrace) {\n      throw new Error('Unable to parse the exceptions stack trace.');\n    }\n\n    const message = typeof(exception) === 'string' ? exception as any : undefined;\n    return {\n      type: stackTrace.name || 'Error',\n      message: stackTrace.message || exception.message || message,\n      stack_trace: getStackFrames(stackTrace.stack || [])\n    };\n  }\n}\n\n                                                                                                                                                                                                         \n\nexport class DefaultModuleCollector implements IModuleCollector {\n  public getModules(context: EventPluginContext): IModule[] {\n    if (!document || !document.getElementsByTagName) {\n      return null;\n    }\n\n    const modules: IModule[] = [];\n    const scripts: NodeListOf<HTMLScriptElement> = document.getElementsByTagName('script');\n    if (scripts && scripts.length > 0) {\n      for (let index = 0; index < scripts.length; index++) {\n        if (scripts[index].src) {\n          modules.push({\n            module_id: index,\n            name: scripts[index].src.split('?')[0],\n            version: Utils.parseVersion(scripts[index].src)\n          });\n        } else if (!!scripts[index].innerHTML) {\n          modules.push({\n            module_id: index,\n            name: 'Script Tag',\n            version: Utils.getHashCode(scripts[index].innerHTML).toString()\n          });\n        }\n      }\n    }\n\n    return modules;\n  }\n}\n\n                                                                                                                                                                                                                             \n\nexport class DefaultRequestInfoCollector implements IRequestInfoCollector {\n  public getRequestInfo(context: EventPluginContext): IRequestInfo {\n    if (!document || !navigator || !location) {\n      return null;\n    }\n\n    const exclusions = context.client.config.dataExclusions;\n    const requestInfo: IRequestInfo = {\n      user_agent: navigator.userAgent,\n      is_secure: location.protocol === 'https:',\n      host: location.hostname,\n      port: location.port && location.port !== '' ? parseInt(location.port, 10) : 80,\n      path: location.pathname,\n      // client_ip_address: 'TODO',\n      cookies: Utils.getCookies(document.cookie, exclusions),\n      query_string: Utils.parseQueryString(location.search.substring(1), exclusions)\n    };\n\n    if (document.referrer && document.referrer !== '') {\n      requestInfo.referrer = document.referrer;\n    }\n\n    return requestInfo;\n  }\n}\n\n                                                                                                                                                \n\nexport class BrowserStorageProvider implements IStorageProvider {\n  public queue: IStorage;\n  public settings: IStorage;\n\n  constructor(prefix?: string, maxQueueItems: number = 250) {\n    this.queue = new BrowserStorage('q', prefix, maxQueueItems);\n    this.settings = new BrowserStorage('settings', prefix, 1);\n  }\n\n}\n\n                                                                                                                                                                              \n\n// tslint:disable-next-line:prefer-const\ndeclare var XDomainRequest: { new (); create(); };\n\nexport class DefaultSubmissionAdapter implements ISubmissionAdapter {\n  public sendRequest(request: SubmissionRequest, callback?: SubmissionCallback, isAppExiting?: boolean) {\n    // TODO: Handle sending events when app is exiting with send beacon.\n    const TIMEOUT: string = 'timeout';  // optimization for minifier.\n    const LOADED: string = 'loaded';  // optimization for minifier.\n    const WITH_CREDENTIALS: string = 'withCredentials';  // optimization for minifier.\n\n    let isCompleted: boolean = false;\n    let useSetTimeout: boolean = false;\n    function complete(mode: string, xhr: XMLHttpRequest) {\n      function parseResponseHeaders(headerStr) {\n        function trim(value) {\n          return value.replace(/^[\\s\\uFEFF\\xA0]+|[\\s\\uFEFF\\xA0]+$/g, '');\n        }\n\n        const headers = {};\n        const headerPairs = (headerStr || '').split('\\u000d\\u000a');\n        for (const headerPair of headerPairs) {\n          // Can't use split() here because it does the wrong thing\n          // if the header value has the string \": \" in it.\n          const separator = headerPair.indexOf('\\u003a\\u0020');\n          if (separator > 0) {\n            headers[trim(headerPair.substring(0, separator).toLowerCase())] = headerPair.substring(separator + 2);\n          }\n        }\n\n        return headers;\n      }\n\n      if (isCompleted) {\n        return;\n      }\n\n      isCompleted = true;\n\n      let message: string = xhr.statusText;\n      const responseText: string = xhr.responseText;\n      let status: number = xhr.status;\n\n      if (mode === TIMEOUT || status === 0) {\n        message = 'Unable to connect to server.';\n        status = 0;\n      } else if (mode === LOADED && !status) {\n        status = request.method === 'POST' ? 202 : 200;\n      } else if (status < 200 || status > 299) {\n        const responseBody: any = (xhr as any).responseBody;\n        if (!!responseBody && !!responseBody.message) {\n          message = responseBody.message;\n        } else if (!!responseText && responseText.indexOf('message') !== -1) {\n          try {\n            message = JSON.parse(responseText).message;\n          } catch (e) {\n            message = responseText;\n          }\n        }\n      }\n\n      callback && callback(status || 500, message || '', responseText, parseResponseHeaders(xhr.getAllResponseHeaders && xhr.getAllResponseHeaders()));\n    }\n\n    function createRequest(userAgent: string, method: string, url: string): XMLHttpRequest {\n      let xhr: any = new XMLHttpRequest();\n      if (WITH_CREDENTIALS in xhr) {\n        xhr.open(method, url, true);\n\n        xhr.setRequestHeader('X-Exceptionless-Client', userAgent);\n        if (method === 'POST') {\n          xhr.setRequestHeader('Content-Type', 'application/json');\n        }\n      } else if (typeof XDomainRequest !== 'undefined') {\n        useSetTimeout = true;\n        xhr = new XDomainRequest();\n        xhr.open(method, location.protocol === 'http:' ? url.replace('https:', 'http:') : url);\n      } else {\n        xhr = null;\n      }\n\n      if (xhr) {\n        xhr.timeout = 10000;\n      }\n\n      return xhr;\n    }\n\n    const url = `${request.url}${(request.url.indexOf('?') === -1 ? '?' : '&')}access_token=${encodeURIComponent(request.apiKey)}`;\n    const xhr = createRequest(request.userAgent, request.method || 'POST', url);\n    if (!xhr) {\n      return (callback && callback(503, 'CORS not supported.'));\n    }\n\n    if (WITH_CREDENTIALS in xhr) {\n      xhr.onreadystatechange = () => {\n        // xhr not ready.\n        if (xhr.readyState !== 4) {\n          return;\n        }\n\n        complete(LOADED, xhr);\n      };\n    }\n\n    xhr.onprogress = () => { };\n    xhr.ontimeout = () => complete(TIMEOUT, xhr);\n    xhr.onerror = () => complete('error', xhr);\n    xhr.onload = () => complete(LOADED, xhr);\n\n    if (useSetTimeout) {\n      setTimeout(() => xhr.send(request.data), 500);\n    } else {\n      xhr.send(request.data);\n    }\n  }\n}\n\nn\n(function init() {\n  function getDefaultsSettingsFromScriptTag(): IConfigurationSettings {\n    if (!document || !document.getElementsByTagName) {\n      return null;\n    }\n\n    const scripts = document.getElementsByTagName('script');\n    // tslint:disable-next-line:prefer-for-of\n    for (let index = 0; index < scripts.length; index++) {\n      if (scripts[index].src && scripts[index].src.indexOf('/exceptionless') > -1) {\n        return Utils.parseQueryString(scripts[index].src.split('?').pop());\n      }\n    }\n    return null;\n  }\n\n  function processUnhandledException(stackTrace: TraceKit.StackTrace, options?: any): void {\n    const builder = ExceptionlessClient.default.createUnhandledException(new Error(stackTrace.message || (options || {}).status || 'Script error'), 'onerror');\n    builder.pluginContextData['@@_TraceKit.StackTrace'] = stackTrace;\n    builder.submit();\n  }\n\n  if (typeof document === 'undefined') {\n    return;\n  }\n\n  /*\n   TODO: We currently are unable to parse string exceptions.\n   function processJQueryAjaxError(event, xhr, settings, error:string): void {\n   let client = ExceptionlessClient.default;\n   if (xhr.status === 404) {\n   client.submitNotFound(settings.url);\n   } else if (xhr.status !== 401) {\n   client.createUnhandledException(error, 'JQuery.ajaxError')\n   .setSource(settings.url)\n   .setProperty('status', xhr.status)\n   .setProperty('request', settings.data)\n   .setProperty('response', xhr.responseText && xhr.responseText.slice && xhr.responseText.slice(0, 1024))\n   .submit();\n   }\n   }\n   */\n\n  Configuration.prototype.useLocalStorage = function() {\n    if (BrowserStorage.isAvailable()) {\n      this.storage = new BrowserStorageProvider();\n      SettingsManager.applySavedServerSettings(this);\n      this.changed();\n    }\n  };\n\n  const defaults = Configuration.defaults;\n  const settings = getDefaultsSettingsFromScriptTag();\n  if (settings && (settings.apiKey || settings.serverUrl)) {\n    defaults.apiKey = settings.apiKey;\n    defaults.serverUrl = settings.serverUrl;\n  }\n\n  defaults.errorParser = new DefaultErrorParser();\n  defaults.moduleCollector = new DefaultModuleCollector();\n  defaults.requestInfoCollector = new DefaultRequestInfoCollector();\n  defaults.submissionAdapter = new DefaultSubmissionAdapter();\n\n  TraceKit.report.subscribe(processUnhandledException);\n  TraceKit.extendToAsynchronousCallbacks();\n\n  // window && window.addEventListener && window.addEventListener('beforeunload', function () {\n  //   ExceptionlessClient.default.config.queue.process(true);\n  // });\n\n  // if (typeof $ !== 'undefined' && $(document)) {\n  //   $(document).ajaxError(processJQueryAjaxError);\n  // }\n\n  (Error as any).stackTraceLimit = Infinity;\n})();\n\n// tslint:disable-next-line:prefer-const\ndeclare var $;\n\n"]}